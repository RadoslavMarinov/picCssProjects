CCS PCM C Compiler, Version 5.051, 5967               26-май-18 19:36

               Filename:   D:\Custom Computer Services\Projects\nikolaj-danailov-sirena\src\main.lst

               ROM used:   193 words (9%)
                           Largest free fragment is 1855
               RAM used:   15 (12%) at main() level
                           16 (12%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   087
0003:  NOP
0004:  BTFSC  03.5
0005:  GOTO   00A
0006:  MOVWF  24
0007:  SWAPF  03,W
0008:  MOVWF  25
0009:  GOTO   00F
000A:  BCF    03.5
000B:  MOVWF  24
000C:  SWAPF  03,W
000D:  MOVWF  25
000E:  BSF    25.1
000F:  MOVF   0A,W
0010:  MOVWF  2B
0011:  CLRF   0A
0012:  BCF    03.7
0013:  SWAPF  24,F
0014:  MOVF   04,W
0015:  MOVWF  26
0016:  MOVF   20,W
0017:  MOVWF  27
0018:  MOVF   21,W
0019:  MOVWF  28
001A:  MOVF   22,W
001B:  MOVWF  29
001C:  MOVF   23,W
001D:  MOVWF  2A
001E:  BCF    03.5
001F:  MOVLW  8C
0020:  MOVWF  04
0021:  BTFSS  00.1
0022:  GOTO   025
0023:  BTFSC  0C.1
0024:  GOTO   038
0025:  MOVF   26,W
0026:  MOVWF  04
0027:  MOVF   27,W
0028:  MOVWF  20
0029:  MOVF   28,W
002A:  MOVWF  21
002B:  MOVF   29,W
002C:  MOVWF  22
002D:  MOVF   2A,W
002E:  MOVWF  23
002F:  MOVF   2B,W
0030:  MOVWF  0A
0031:  SWAPF  25,W
0032:  MOVWF  03
0033:  BCF    03.5
0034:  SWAPF  24,W
0035:  BTFSC  25.1
0036:  BSF    03.5
0037:  RETFIE
.................... #include <12F683.H>  
.................... //////////// Standard Header file for the PIC12F683 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC12F683 
....................  
.................... #list 
....................  
.................... #fuses INTRC, NOWDT, NOPROTECT, NOMCLR 
.................... #USE DELAY (int = 8MHZ) 
....................  
.................... #define pins_state_alarm_on()       ( input(PIN_A5) ) 
.................... #define pins_state_alarm_off()   ( ! input(PIN_A5) ) 
.................... #define LAMP_TICK_TIME     1666UL 
.................... #define T6                 PIN_A0 
.................... #define T5                 PIN_A1 
.................... #define BATT               PIN_A4 
.................... #define LAMP               PIN_A2 
....................  
.................... void set_interrupts(void); 
.................... void init_gpios(void); 
.................... void flip_transistors(); 
.................... void start_siren(void); 
.................... void stop_siren(void); 
.................... void onExitStateAlarmOff(); 
.................... void postExitStateAlarmOn(); 
....................  
.................... #bit t5bit=0x05.1 // Transistor 5 drive pin 
.................... #bit t6bit=0x05.0 // Transistor 6 drive pin 
....................  
.................... enum States {ALARM_ON, ALARM_OFF}; 
....................  
.................... typedef struct  { 
....................    States  state; 
.................... } State; 
....................  
.................... State state_mashine = {ALARM_OFF}; 
*
0099:  MOVLW  01
009A:  MOVWF  2C
.................... unsigned int16 timer2Ticks; 
....................  
.................... void main() { 
*
0087:  MOVF   03,W
0088:  ANDLW  1F
0089:  MOVWF  03
008A:  MOVLW  71
008B:  BSF    03.5
008C:  MOVWF  0F
008D:  CLRF   10
008E:  MOVF   0F,W
008F:  BCF    03.5
0090:  BCF    1F.6
0091:  BSF    03.5
0092:  BCF    1F.0
0093:  BCF    1F.1
0094:  BCF    1F.2
0095:  BCF    1F.3
0096:  MOVLW  07
0097:  BCF    03.5
0098:  MOVWF  19
.................... init_gpios(); 
*
009B:  GOTO   063
.................... set_interrupts(); 
009C:  GOTO   072
.................... setup_timer_2(T2_DIV_BY_4, 152, 1); //300uS period 
009D:  MOVLW  00
009E:  MOVWF  21
009F:  IORLW  05
00A0:  MOVWF  12
00A1:  MOVLW  98
00A2:  BSF    03.5
00A3:  MOVWF  12
....................  
....................    while(true) { 
....................        
....................       switch(state_mashine.state) { 
00A4:  MOVLW  00
00A5:  BCF    03.5
00A6:  BTFSC  2C.0
00A7:  MOVLW  01
00A8:  XORLW  01
00A9:  BTFSC  03.2
00AA:  GOTO   0AF
00AB:  XORLW  01
00AC:  BTFSC  03.2
00AD:  GOTO   0B7
00AE:  GOTO   0BE
....................          case ALARM_OFF: { 
....................             if(pins_state_alarm_on()) { 
00AF:  BSF    03.5
00B0:  BSF    05.5
00B1:  BCF    03.5
00B2:  BTFSS  05.5
00B3:  GOTO   0B6
....................                onExitStateAlarmOff(); 
00B4:  GOTO   078
....................                state_mashine.state = ALARM_ON; 
00B5:  BCF    2C.0
....................             } 
....................             break; 
00B6:  GOTO   0BE
....................          } 
....................          case ALARM_ON: { 
....................             if(pins_state_alarm_off()) { 
00B7:  BSF    03.5
00B8:  BSF    05.5
00B9:  BCF    03.5
00BA:  BTFSC  05.5
00BB:  GOTO   0BE
....................                state_mashine.state = ALARM_OFF; 
00BC:  BSF    2C.0
....................                postExitStateAlarmOn(); 
00BD:  GOTO   07E
....................             } 
....................             break; 
....................          } 
....................       } 
00BE:  BSF    03.5
00BF:  GOTO   0A4
....................    } 
.................... } 
....................  
.................... #INT_TIMER2  
.................... void timer2_isr_handler(void) { 
00C0:  SLEEP
....................    if(state_mashine.state == ALARM_ON){ 
*
0038:  BTFSC  2C.0
0039:  GOTO   060
....................       flip_transistors(); 
....................       timer2Ticks++; 
*
004B:  INCF   2D,F
004C:  BTFSC  03.2
004D:  INCF   2E,F
....................       if(timer2Ticks >=  LAMP_TICK_TIME) { 
004E:  MOVF   2E,W
004F:  SUBLW  05
0050:  BTFSC  03.0
0051:  GOTO   060
0052:  XORLW  FF
0053:  BTFSS  03.2
0054:  GOTO   059
0055:  MOVF   2D,W
0056:  SUBLW  81
0057:  BTFSC  03.0
0058:  GOTO   060
....................          timer2Ticks = 0; 
0059:  CLRF   2E
005A:  CLRF   2D
....................          output_toggle(LAMP); 
005B:  BSF    03.5
005C:  BCF    05.2
005D:  MOVLW  04
005E:  BCF    03.5
005F:  XORWF  05,F
....................       } 
....................    } 
0060:  BCF    0C.1
0061:  BCF    0A.3
0062:  GOTO   025
.................... } 
....................  
....................  
....................  
.................... void set_interrupts(void) { 
....................    enable_interrupts(GLOBAL); 
*
0072:  MOVLW  C0
0073:  IORWF  0B,F
....................    enable_interrupts(INT_TIMER2); 
0074:  BSF    03.5
0075:  BSF    0C.1
0076:  BCF    03.5
0077:  GOTO   09D (RETURN)
.................... } 
....................  
.................... void init_gpios(void) { 
....................    set_tris_a(0b000011); 
*
0063:  MOVLW  03
0064:  BSF    03.5
0065:  MOVWF  05
....................    output_low(T5); 
0066:  BCF    05.1
0067:  BCF    03.5
0068:  BCF    05.1
....................    output_low(T6); 
0069:  BSF    03.5
006A:  BCF    05.0
006B:  BCF    03.5
006C:  BCF    05.0
....................    output_low(LAMP); 
006D:  BSF    03.5
006E:  BCF    05.2
006F:  BCF    03.5
0070:  BCF    05.2
0071:  GOTO   09C (RETURN)
.................... } 
....................  
.................... void flip_transistors(void) { 
....................    if(t6bit) { 
*
003A:  BTFSS  05.0
003B:  GOTO   043
....................       t6bit = !t6bit; 
003C:  MOVLW  01
003D:  XORWF  05,F
....................       t5bit = !t6bit; 
003E:  BTFSC  05.0
003F:  BCF    05.1
0040:  BTFSS  05.0
0041:  BSF    05.1
....................    } else if(t5bit){ 
0042:  GOTO   04B
0043:  BTFSS  05.1
0044:  GOTO   04B
....................       t5bit = !t5bit; 
0045:  MOVLW  02
0046:  XORWF  05,F
....................       t6bit = !t5bit; 
0047:  BTFSC  05.1
0048:  BCF    05.0
0049:  BTFSS  05.1
004A:  BSF    05.0
....................    } 
.................... } 
....................  
.................... void start_siren(void) { 
....................    t6bit = 1; 
*
0078:  BSF    05.0
.................... } 
....................  
.................... void stop_siren(void) { 
....................    t6bit = 0; 
*
007E:  BCF    05.0
....................    t5bit = 0; 
007F:  BCF    05.1
.................... } 
....................  
.................... void onExitStateAlarmOff(){ 
....................    start_siren(); 
....................    output_high(LAMP); 
*
0079:  BSF    03.5
007A:  BCF    05.2
007B:  BCF    03.5
007C:  BSF    05.2
007D:  GOTO   0B5 (RETURN)
.................... } 
....................  
.................... // Interrupt may ocure between stop_siren and switch state to alarm_off 
.................... // and one of the transistors may remain on 
.................... void postExitStateAlarmOn() { 
....................    stop_siren(); 
....................    output_low(LAMP); 
*
0080:  BSF    03.5
0081:  BCF    05.2
0082:  BCF    03.5
0083:  BCF    05.2
....................    timer2Ticks = 0; 
0084:  CLRF   2E
0085:  CLRF   2D
0086:  GOTO   0BE (RETURN)
.................... } 

Configuration Fuses:
   Word  1: 0FC4   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN
