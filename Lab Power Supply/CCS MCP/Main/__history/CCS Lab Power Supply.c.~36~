#include <18F2520.h>
#DEVICE ADC=10
#fuses INTRC_IO, NOFCMEN, PUT, NOWDT, NOPBADEN, NOMCLR, NOLVP
#use delay(clock = 8M)

#define LED                   PIN_C4
#define LedOff()              output_high(LED)
#define LedOn()               output_low(LED)
#define ANALOG_INPUT_I        0
#define ANALOG_INPUT_V1       1
#define ANALOG_INPUT_V2       2

#define LCD_STARTUP_TIME_MS   500
#define LCD_ENABLE_PIN        PIN_A6                                  
#define LCD_RS_PIN            PIN_A5                                   
#define LCD_RW_PIN            PIN_A7                                
#define LCD_DATA4             PIN_C0                                   
#define LCD_DATA5             PIN_C1                                   
#define LCD_DATA6             PIN_C2                                   
#define LCD_DATA7             PIN_C3 
#include <lcd.c>

void chip_init();
unsigned int16 adc_read_v1();
unsigned int16 adc_read_v2();
unsigned int16 adc_read_i();



void main()
{
unsigned int32 current;
unsigned int32 voltage;
   chip_init();
   lcd_gotoxy(1,1);
   printf(lcd_putc,"Hello Riko");
   while (TRUE)
   {
   current = ((unsigned int32)(adc_read_i()) * 100) / 472;
   printf(lcd_putc,"\fI=%1.2w\n",current);
   printf(lcd_putc,"V=%lu", (adc_read_v1() - adc_read_v2()));
   delay_ms(300);  
   }
}




void chip_init()
{
//Analog Inputs Initialization
setup_adc(ADC_CLOCK_INTERNAL);
setup_adc_ports(AN0_TO_AN2);
//initialize the LED
LedOff();
  
//LCD Initialization
delay_ms(LCD_STARTUP_TIME_MS);
lcd_init();
delay_ms(LCD_STARTUP_TIME_MS);
}

unsigned int16 adc_read_v1()
{
unsigned int16 adc_val;
   set_adc_channel(ANALOG_INPUT_V1);
      while( !(adc_done()) )
      {
 
      }
   adc_val = read_adc();
   return read_adc();
}

unsigned int16 adc_read_v2()
{
unsigned int16 adc_val;
   set_adc_channel(ANALOG_INPUT_V2);
      while( !(adc_done()) )
      {
 
      }
   adc_val = read_adc();
   return read_adc();
}

unsigned int16 adc_read_i()
{
unsigned int16 adc_val;
   set_adc_channel(ANALOG_INPUT_I);
      while( !(adc_done()) )
      {
 
      }
   adc_val = read_adc();
   return read_adc();
}
