CCS PCM C Compiler, Version 5.025, 5967               29-окт-14 21:01

               Filename:   D:\Projects\Button\source.lst

               ROM used:   150 words (7%)
                           Largest free fragment is 1898
               RAM used:   6 (5%) at main() level
                           7 (5%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   035
0003:  NOP
.................... #include <12F683.h> 
.................... //////////// Standard Header file for the PIC12F683 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC12F683 
....................  
.................... #list 
....................  
.................... #fuses intrc_io, nowdt, put, nomclr, protect, nocpd,brownout, noieso, nofcmen 
.................... #use delay(internal = 4M) 
*
0021:  MOVLW  27
0022:  MOVWF  04
0023:  MOVF   00,W
0024:  BTFSC  03.2
0025:  GOTO   034
0026:  MOVLW  01
0027:  MOVWF  21
0028:  CLRF   20
0029:  DECFSZ 20,F
002A:  GOTO   029
002B:  DECFSZ 21,F
002C:  GOTO   028
002D:  MOVLW  4A
002E:  MOVWF  20
002F:  DECFSZ 20,F
0030:  GOTO   02F
0031:  GOTO   032
0032:  DECFSZ 00,F
0033:  GOTO   026
0034:  RETURN
.................... #define RELAY_1 PIN_A0 
.................... #define RELAY_2 PIN_A1 
.................... #define BUTTON  PIN_A4 
.................... #define BUTT_PRESSED input(BUTTON) 
....................  
.................... enum butt_state {BUTT_OPEN = 1, BUTT_CLOSED}; 
.................... void chip_init(unsigned int *bsf); 
....................  
.................... void main() 
0035:  MOVF   03,W
0036:  ANDLW  1F
0037:  MOVWF  03
0038:  MOVLW  61
0039:  BSF    03.5
003A:  MOVWF  0F
003B:  CLRF   10
003C:  MOVF   0F,W
003D:  BCF    03.5
003E:  BCF    1F.6
003F:  BSF    03.5
0040:  BCF    1F.0
0041:  BCF    1F.1
0042:  BCF    1F.2
0043:  BCF    1F.3
0044:  MOVLW  07
0045:  BCF    03.5
0046:  MOVWF  19
0047:  MOVLW  01
0048:  MOVWF  25
.................... { 
.................... unsigned int butt_state_flag = 1; 
....................    chip_init(&butt_state_flag); 
0049:  MOVLW  25
004A:  MOVWF  26
004B:  GOTO   004
....................    while (TRUE) 
....................    { 
....................       if ((butt_state_flag == BUTT_OPEN) && (BUTT_PRESSED)) 
004C:  DECFSZ 25,W
004D:  GOTO   06E
004E:  BSF    03.5
004F:  BSF    05.4
0050:  BCF    03.5
0051:  BTFSS  05.4
0052:  GOTO   06E
....................       { 
....................          delay_ms(50); 
0053:  MOVLW  32
0054:  MOVWF  27
0055:  CALL   021
....................          if((butt_state_flag == BUTT_OPEN) && (BUTT_PRESSED)) 
0056:  DECFSZ 25,W
0057:  GOTO   06E
0058:  BSF    03.5
0059:  BSF    05.4
005A:  BCF    03.5
005B:  BTFSS  05.4
005C:  GOTO   06E
....................          { 
....................             butt_state_flag = BUTT_CLOSED; 
005D:  MOVLW  02
005E:  MOVWF  25
....................             output_high(RELAY_1); 
005F:  BSF    03.5
0060:  BCF    05.0
0061:  BCF    03.5
0062:  BSF    05.0
....................             delay_ms(2000); 
0063:  MOVLW  08
0064:  MOVWF  26
0065:  MOVLW  FA
0066:  MOVWF  27
0067:  CALL   021
0068:  DECFSZ 26,F
0069:  GOTO   065
....................             output_low(RELAY_1); 
006A:  BSF    03.5
006B:  BCF    05.0
006C:  BCF    03.5
006D:  BCF    05.0
....................          } 
....................       } 
....................       if ((butt_state_flag == BUTT_CLOSED) && (!BUTT_PRESSED)) 
006E:  MOVF   25,W
006F:  SUBLW  02
0070:  BTFSS  03.2
0071:  GOTO   094
0072:  BSF    03.5
0073:  BSF    05.4
0074:  BCF    03.5
0075:  BTFSC  05.4
0076:  GOTO   094
....................       { 
....................          delay_ms(50); 
0077:  MOVLW  32
0078:  MOVWF  27
0079:  CALL   021
....................          if ((butt_state_flag == BUTT_CLOSED) && (!BUTT_PRESSED)) 
007A:  MOVF   25,W
007B:  SUBLW  02
007C:  BTFSS  03.2
007D:  GOTO   094
007E:  BSF    03.5
007F:  BSF    05.4
0080:  BCF    03.5
0081:  BTFSC  05.4
0082:  GOTO   094
....................          { 
....................             butt_state_flag = BUTT_OPEN; 
0083:  MOVLW  01
0084:  MOVWF  25
....................             output_high(RELAY_2); 
0085:  BSF    03.5
0086:  BCF    05.1
0087:  BCF    03.5
0088:  BSF    05.1
....................             delay_ms(2000); 
0089:  MOVLW  08
008A:  MOVWF  26
008B:  MOVLW  FA
008C:  MOVWF  27
008D:  CALL   021
008E:  DECFSZ 26,F
008F:  GOTO   08B
....................             output_low(RELAY_2); 
0090:  BSF    03.5
0091:  BCF    05.1
0092:  BCF    03.5
0093:  BCF    05.1
....................          } 
....................           
....................       } 
0094:  GOTO   04C
....................        
....................    } 
.................... } 
....................  
0095:  SLEEP
.................... void chip_init(unsigned  int *bsf) 
.................... { 
....................    setup_oscillator(OSC_4MHZ); 
*
0004:  MOVLW  61
0005:  BSF    03.5
0006:  MOVWF  0F
0007:  CLRF   10
0008:  MOVF   0F,W
....................    set_tris_a(0x08); 
0009:  MOVLW  08
000A:  MOVWF  05
....................    output_low(RELAY_1); 
000B:  BCF    05.0
000C:  BCF    03.5
000D:  BCF    05.0
....................    output_low(RELAY_2); 
000E:  BSF    03.5
000F:  BCF    05.1
0010:  BCF    03.5
0011:  BCF    05.1
....................    if(BUTT_PRESSED) 
0012:  BSF    03.5
0013:  BSF    05.4
0014:  BCF    03.5
0015:  BTFSS  05.4
0016:  GOTO   01C
....................    { 
....................       *bsf = BUTT_CLOSED;    
0017:  MOVF   26,W
0018:  MOVWF  04
0019:  MOVLW  02
001A:  MOVWF  00
....................    } 
001B:  GOTO   020
....................    else 
....................    { 
....................       *bsf = BUTT_OPEN;  
001C:  MOVF   26,W
001D:  MOVWF  04
001E:  MOVLW  01
001F:  MOVWF  00
....................    } 
0020:  GOTO   04C (RETURN)
.................... } 

Configuration Fuses:
   Word  1: 3384   INTRC_IO NOWDT PUT NOMCLR PROTECT NOCPD BROWNOUT NOIESO NOFCMEN
