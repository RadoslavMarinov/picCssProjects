//////////////////////////////////////////////////////////////////////////////
//
// ex15.c - Example 15 from the Embedded Internet/Embedded Ethernet tutorial
//
// A webserver that accepts GET and POST commands.
//
// See ex_st_webserver2.c for a more complicated webserver example that
// uses MPFS filesystem.
//
// NOTE: Change the code in IPAddrInit() to your desired IP address, which
//       is based on your network.
//
//////////////////////////////////////////////////////////////////////////////

// force enabling of LCD library.  if hardware doesn't have LCD hardware,
// then it will use RS232/Serial for lcd_putc().
#define STACK_USE_PICDEM_LCD     1

#define STACK_USE_CCS_INI  0

#define STACK_USE_ICMP_SERVER
#define STACK_USE_TCP
#define STACK_USE_CCS_HTTP1_SERVER

#define HTTP_NUM_SOCKETS   1

// configure TCP stack for the correct number of sockets and RAM needed.
#define TCP_CONFIGURATION  HTTP_NUM_SOCKETS   //tell TCPIPConfig.h to not include default TCPSocketInitializer[] array.
// See ex13b.c for comments.
#define TCP_ETH_RAM_SIZE   2100

#include "ccstcpip.h"

// one HTTP purpose TCP sockets.
TCPSocketInitializer_t TCPSocketInitializer[TCP_CONFIGURATION] =
{
    {TCP_PURPOSE_HTTP_SERVER, TCP_ETH_RAM, 1500, 500}
};

#if defined(__PCD__)
/*
   This example is not compatible with PCD compiler.  It was meant to run
   on PIC18 with read_program_memory().  See ex_st_webserver2.c for a 
   webserver example that works with PCD.
*/
   #error This example not compatible with PCD compiler.  See above comments.
#endif

//here is this examples / page
rom char  HTML_INDEX_PAGE[]="
<HTML><BODY BGCOLOR=#FFFFFF TEXT=#000000>
<IMG SRC=\"http://www.ccsinfo.com/images/CCSlogotiny.gif\"><P>
<H1>RIKOTECH Embedded project</H1>
<FORM METHOD=GET>
<P>LCD: <INPUT TYPE=\"text\" NAME=\"lcd\" size=20 maxlength=16>
<BR>LED1:<INPUT type=\"radio\" name=\"led1\" value=1>ON &nbsp; &nbsp; &nbsp;
<INPUT type=\"radio\" name=\"led1\" value=0>OFF
<BR>LED2:<INPUT type=\"radio\" name=\"led2\" value=1>ON &nbsp; &nbsp; &nbsp;
<INPUT type=\"radio\" name=\"led2\" value=0>OFF
<BR><INPUT TYPE=\"submit\"></FORM>
<P><A HREF=\"/analog\">Analog Readings</A>
</BODY></HTML>
";

rom char  HTML_ANALOG_PAGE[]="
<HTML><BODY BGCOLOR=#FFFFFF TEXT=#000000>
<IMG SRC=\"http://www.ccsinfo.com/images/CCSlogotiny.gif\">
<H1>ADC READINGS</H1>
<P>%0
<BR>%1
<P><A HREF=\"/\">Change LCD/LEDs</A>
</BODY></HTML>
";

rom char FAVICON[]=""; //saves time when web browser requests this file

//this is a callback function to the HTTP stack.  see http.c
//this demo provides to web "pages", an index (/) and an about page (/about)
unsigned int32 http_get_page(char *file_str) {
   unsigned int32 file_loc=0;
   static char index[]="/";
   static char about[]="/analog";
   static char favicon[]="/favicon.ico";

   printf("\r\nRequest %s ",file_str);

   if (stricmp(file_str,index)==0)
      file_loc = &HTML_INDEX_PAGE[0];

   else if (stricmp(file_str,about)==0)
      file_loc = &HTML_ANALOG_PAGE[0];
      
   else if (stricmp(file_str,favicon)==0)
      file_loc = &FAVICON[0];

   if (file_loc)
      printf("(FILE=%0xLX)",file_loc);
   else
      printf("(File Not Found)");

   return(file_loc);
}

//this is a callback function to the HTTP stack. see http.c
// this demo provides handling for two formatting chars, %0 and %1.
//  %0 is ADC for channel 0, %1 is ADC for channel 1.
unsigned int8 http_format_char(unsigned int32 file, char id, char *str, unsigned int8 max_ret) {
   char new_str[20];
   unsigned int8 len=0;
   unsigned int8 i;

   *str=0;

   switch(id) {
      case '0':
        #if STACK_USE_CCS_PICNET
         set_adc_channel(0);
         delay_us(100);
        #endif
         i=read_adc();
         sprintf(new_str,"<B>%s = </B>%lu",STANDARD_ADC_STRING,755);
         len=strlen(new_str);
         break;

      case '1':
        #if STACK_USE_CCS_PICNET
         set_adc_channel(1);
         delay_us(100);
         i=read_adc();
         sprintf(new_str,"<B>AN1 = </B>0x%X",i);
         len=strlen(new_str);
        #else
         len=0;
        #endif
         break;

   }

   if (len) {
      if (len>max_ret) {len=max_ret;}
      memcpy(str,new_str,len+1);
   }

   return(len);
}

//this is a callback function to the HTTP stack. see http.c
//in this example it verifies that "pwd" is "master", if it is
//then it sets led1 and led2 ("led1" and "led2") based on their value
//and changes the lcd screen ("lcd").
void http_exec_cgi(unsigned int32 file, char *key, char *val) {
   static char led1_key[]="led1";
   static char led2_key[]="led2";
   static char lcd_key[]="lcd";
   unsigned int8 v;
   char scr[17];

   printf("\r\nCGI FILE=%LD KEY=%S VAL=%S", file, key, val);

   if (stricmp(key,led1_key)==0) {
      v=atoi(val);
      if (v) {LED_ON(USER_LED1);}
      else {LED_OFF(USER_LED1);}
   }

   if (stricmp(key,led2_key)==0) {
      v=atoi(val);
      if (v) {LED_ON(USER_LED2);}
      else {LED_OFF(USER_LED2);}
   }

   if (stricmp(key,lcd_key)==0) 
   {
      IPToString(scr, &MY_IP);
      printf(lcd_putc,"\f%s\n\r%s",val, scr);
   }
}


void LCDTask(void) 
{
   static enum {LCD_INIT=0, LCD_NO_MAC, LCD_NO_DHCP, LCD_IDLE} state=0;

   switch(state) 
   {
      case LCD_INIT:
         printf(lcd_putc, "\fWebserver\n\rNo MAC Link");
         state = LCD_NO_MAC;
         LED_OFF(USER_LED1);
         break;
         
      case LCD_NO_MAC:
         if (MACIsLinked())
         {
           #if defined(STACK_USE_DHCP_CLIENT)
            if (!DHCPIsEnabled(0))
           #else
            if (1)
           #endif
            {
               printf(lcd_putc, "\fDHCP Disabled\n\r%u.%u.%u.%u", 
                     MY_IP_BYTE1, MY_IP_BYTE2, MY_IP_BYTE3, MY_IP_BYTE4
                  );
               state = LCD_IDLE;
            }
            else
            {
               printf(lcd_putc, "\fWebserver\n\rDHCP Not Bound");
               state = LCD_NO_DHCP;
            }
         }
         break;
    
    #if defined(STACK_USE_DHCP_CLIENT)
     case LCD_NO_DHCP:
         if (!MACIsLinked())
         {
            state = LCD_INIT;
            break;
         }
         if (DHCPIsBound(0))
         {
            state = LCD_IDLE;
            printf(lcd_putc, "\fDHCP Bound\n\r%u.%u.%u.%u", MY_IP_BYTE1, MY_IP_BYTE2,
               MY_IP_BYTE3, MY_IP_BYTE4);
            LED_ON(USER_LED1);
         }
         break;
    #endif

      case LCD_IDLE:
         if (
               !MACIsLinked()
              #if defined(STACK_USE_DHCP_CLIENT)
               || (DHCPIsEnabled(0) && !DHCPIsBound(0))
              #endif
            )
         {
            state = LCD_INIT;
         }
         break;
   }
}

void main(void) 
{
   Init();
   
   printf("\r\n\nCCS TCP/IP TUTORIAL, EXAMPLE 15 (HTTP SERVER)\r\n");
   
   lcd_init();
   
   printf(lcd_putc,"\fCCS CGI Example\n\rInit Stack...");

   StackInit();
   
   printf("\r\n\nCCS CGI Example\r\nWaiting");
   
   while(TRUE) 
   {
      restart_wdt();
      StackTask();

      LCDTask();
      StackApplications(); //HTTP is processed here
   }
}
