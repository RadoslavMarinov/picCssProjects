CCS PCB C Compiler, Version 5.025, 5967               01-септ-15 22:12

               Filename:   D:\Projects\BSL_Sequencer\CCS_Project\Outputs\CCS_BSL_Sequencer.lst

               ROM used:   142 words (55%)
                           Largest free fragment is 114
               RAM used:   6 (38%) at main() level
                           7 (44%) worst case
               Stack used: 1 locations
               Stack size: 2

*
0000:  MOVWF  05
0001:  GOTO   060
0002:  NOP
0003:  MOVWF  05
0004:  GOTO   060
0005:  GOTO   009
0006:  GOTO   00E
0007:  GOTO   020
0008:  GOTO   040
.................... #include <10F200.h> 
.................... //////////// Standard Header file for the PIC10F200 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC10F200 
....................  
.................... #list 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #fuses NOWDT, NOMCLR 
.................... #use delay(clock = 4000000) 
*
000E:  MOVF   17,W
000F:  BTFSC  03.2
0010:  GOTO   01F
0011:  MOVLW  01
0012:  MOVWF  11
0013:  CLRF   10
0014:  DECFSZ 10,F
0015:  GOTO   014
0016:  DECFSZ 11,F
0017:  GOTO   013
0018:  MOVLW  4A
0019:  MOVWF  10
001A:  DECFSZ 10,F
001B:  GOTO   01A
001C:  GOTO   01D
001D:  DECFSZ 17,F
001E:  GOTO   011
001F:  RETLW  00
.................... #USE FAST_IO (B) 
....................  
.................... #define LED                   PIN_B1 
.................... #define LED_ON                output_high(LED) 
.................... #define LED_OFF               output_low(LED) 
.................... #define BUTTON_IS_PRESSED     (!input(pin_b3)) 
.................... #define TEST                  PIN_B2 
.................... #define RST                   PIN_B0 
.................... #define TEST_H                output_high(TEST) 
.................... #define TEST_L                output_low(TEST) 
.................... #define RST_H                 output_high(RST) 
.................... #define RST_L                 output_low(RST) 
.................... #define DEBOUNCE_DELAY        delay_ms(50); 
....................  
.................... void gpio_init(void) 
.................... { 
....................    TEST_L; 
*
0009:  BCF    06.2
....................    RST_L; 
000A:  BCF    06.0
....................    LED_OFF; 
000B:  BCF    06.1
....................    *((uint8_t*)0x05) &= ~(0x01); 
000C:  BCF    05.0
000D:  GOTO   06B (RETURN)
.................... } 
....................  
.................... void entry_seq(void) 
.................... { 
....................    RST_L; 
*
0020:  BCF    06.0
....................    delay_us(50); 
0021:  MOVLW  10
0022:  MOVWF  10
0023:  DECFSZ 10,F
0024:  GOTO   023
0025:  NOP
....................    TEST_H; 
0026:  BSF    06.2
....................    delay_us(30); 
0027:  MOVLW  09
0028:  MOVWF  10
0029:  DECFSZ 10,F
002A:  GOTO   029
002B:  GOTO   02C
....................    TEST_L; 
002C:  BCF    06.2
....................    delay_us(8); 
002D:  MOVLW  02
002E:  MOVWF  10
002F:  DECFSZ 10,F
0030:  GOTO   02F
0031:  NOP
....................    TEST_H; 
0032:  BSF    06.2
....................    delay_us(15); 
0033:  MOVLW  04
0034:  MOVWF  10
0035:  DECFSZ 10,F
0036:  GOTO   035
0037:  GOTO   038
....................    RST_H; 
0038:  BSF    06.0
....................    delay_us(15); 
0039:  MOVLW  04
003A:  MOVWF  10
003B:  DECFSZ 10,F
003C:  GOTO   03B
003D:  GOTO   03E
....................    TEST_L; 
003E:  BCF    06.2
003F:  GOTO   07A (RETURN)
.................... } 
....................  
.................... void exit_seq(void) 
.................... { 
....................    TEST_H; 
0040:  BSF    06.2
....................    delay_us(30); 
0041:  MOVLW  09
0042:  MOVWF  10
0043:  DECFSZ 10,F
0044:  GOTO   043
0045:  GOTO   046
....................    TEST_L; 
0046:  BCF    06.2
....................    delay_us(30); 
0047:  MOVLW  09
0048:  MOVWF  10
0049:  DECFSZ 10,F
004A:  GOTO   049
004B:  GOTO   04C
....................    TEST_H; 
004C:  BSF    06.2
....................    delay_us(30); 
004D:  MOVLW  09
004E:  MOVWF  10
004F:  DECFSZ 10,F
0050:  GOTO   04F
0051:  GOTO   052
....................    TEST_L; 
0052:  BCF    06.2
....................    delay_us(60); 
0053:  MOVLW  13
0054:  MOVWF  10
0055:  DECFSZ 10,F
0056:  GOTO   055
0057:  GOTO   058
....................    RST_L; 
0058:  BCF    06.0
....................    delay_us(60); 
0059:  MOVLW  13
005A:  MOVWF  10
005B:  DECFSZ 10,F
005C:  GOTO   05B
005D:  GOTO   05E
....................    RST_H; 
005E:  BSF    06.0
005F:  GOTO   08C (RETURN)
.................... } 
....................  
.................... void main() 
0060:  CLRF   04
0061:  MOVLW  DF
0062:  OPTION
0063:  CLRF   15
0064:  MOVLW  01
0065:  MOVWF  16
.................... { 
.................... uint8_t in_bsl_mode = 0, flag = 1; 
....................    set_tris_b(0x08); 
0066:  MOVLW  08
0067:  TRIS   6
....................     
....................    #ASM 
0068:  CLRW
....................    CLRW 
....................    MOVLW 0x00 
0069:  OPTION
....................    OPTION 
....................    CLRW 
....................    #ENDASM 
....................     
....................    gpio_init(); 
006A:  GOTO   005
....................    while (TRUE) 
....................    { 
....................     
....................       if(BUTTON_IS_PRESSED && !in_bsl_mode && flag) 
006B:  BTFSC  06.3
006C:  GOTO   07D
006D:  MOVF   15,F
006E:  BTFSS  03.2
006F:  GOTO   07D
0070:  MOVF   16,F
0071:  BTFSC  03.2
0072:  GOTO   07D
....................       { 
....................          DEBOUNCE_DELAY; 
0073:  MOVLW  32
0074:  MOVWF  17
0075:  CALL   00E
....................          if(BUTTON_IS_PRESSED) 
0076:  BTFSC  06.3
0077:  GOTO   07D
....................          { 
....................             flag = 0; 
0078:  CLRF   16
....................             entry_seq(); 
0079:  GOTO   007
....................             in_bsl_mode = 1; 
007A:  MOVLW  01
007B:  MOVWF  15
....................             LED_ON; 
007C:  BSF    06.1
....................          } 
....................       } 
....................        
....................        
....................       if(BUTTON_IS_PRESSED && in_bsl_mode && flag) 
007D:  BTFSC  06.3
007E:  GOTO   08E
007F:  MOVF   15,F
0080:  BTFSC  03.2
0081:  GOTO   08E
0082:  MOVF   16,F
0083:  BTFSC  03.2
0084:  GOTO   08E
....................       { 
....................          DEBOUNCE_DELAY; 
0085:  MOVLW  32
0086:  MOVWF  17
0087:  CALL   00E
....................          if(BUTTON_IS_PRESSED) 
0088:  BTFSC  06.3
0089:  GOTO   08E
....................          { 
....................             flag = 0; 
008A:  CLRF   16
....................             exit_seq(); 
008B:  GOTO   008
....................             in_bsl_mode = 0; 
008C:  CLRF   15
....................             LED_OFF; 
008D:  BCF    06.1
....................          } 
....................       } 
....................        
....................        
....................       if(!BUTTON_IS_PRESSED) 
008E:  BTFSS  06.3
008F:  GOTO   092
....................          flag = 1; 
0090:  MOVLW  01
0091:  MOVWF  16
0092:  GOTO   06B
....................    } 
.................... } 
0093:  SLEEP

Configuration Fuses:
   Word  1: 0FEB   NOWDT NOPROTECT NOMCLR
