D G "__PCB__" 0 104 ""5.025""
D G "__DEVICE__" 0 104 "200"
D G "__DATE__" 0 104 ""01-септ-15""
D G "__TIME__" 0 104 ""22:12:23"" "Standard Header file for the PIC10F200 device ////////////////"
c L "set_tris_b" 1 3 6 "FUNCTION"
v L "value" 1 35 "int8" `35 
f B "set_tris_b" 1 35 "void(int8 value)" `34 
f B "get_tris_b" 1 36 "int8()" `36 
v L "value" 1 37 "int8" `38 
f B "output_b" 1 37 "void(int8 value)" `37 
f B "input_b" 1 38 "int8()" `39 
f B "input_change_b" 1 39 "int8()" `40 
v L "pin" 1 40 "int16" `42 
f B "input" 1 40 "int8(int16 pin)" `41 
v L "pin" 1 41 "int16" `44 
f B "input_state" 1 41 "int8(int16 pin)" `43 
v L "pin" 1 42 "int16" `46 
f B "output_low" 1 42 "void(int16 pin)" `45 
v L "pin" 1 43 "int16" `48 
f B "output_high" 1 43 "void(int16 pin)" `47 
v L "pin" 1 44 "int16" `50 
f B "output_toggle" 1 44 "void(int16 pin)" `49 
v L "pin" 1 45 "int16" `52 
v L "level" 1 45 "int8" `53 
f B "output_bit" 1 45 "void(int16 pin,int8 level)" `51 
v L "pin" 1 46 "int16" `55 
f B "output_float" 1 46 "void(int16 pin)" `54 
v L "pin" 1 47 "int16" `57 
f B "output_drive" 1 47 "void(int16 pin)" `56  "Constants used to identify pins in the above are:"
d G "PIN_B0" 1 51 "48"
d G "PIN_B1" 1 52 "49"
d G "PIN_B2" 1 53 "50"
d G "PIN_B3" 1 54 "51"
d G "FALSE" 1 57 "0"
d G "TRUE" 1 58 "1"
d G "BYTE" 1 60 "int8"
d G "BOOLEAN" 1 61 "int1"
d G "getc" 1 63 "getch"
d G "fgetc" 1 64 "getch"
d G "getchar" 1 65 "getch"
d G "putc" 1 66 "putchar"
d G "fputc" 1 67 "putchar"
d G "fgets" 1 68 "gets"
d G "fputs" 1 69 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f B "restart_cause" 1 74 "int8()" `58 
f B "reset_cpu" 1 75 "void()" `59 
f B "sleep" 1 76 "void()" `60  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 78 "0x00"
d G "WDT_TIMEOUT" 1 79 "0x08"
d G "MCLR_FROM_SLEEP" 1 80 "0x10"
d G "NORMAL_POWER_UP" 1 81 "0x18"
d G "COMP_FROM_SLEEP" 1 82 "0x50"
d G "CHANGE_FROM_SLEEP" 1 83 "0x90"
c L "sleep" 1 3 5 "FUNCTION"
v L "mode" 1 91 "int8" `62 
f B "setup_timer_0" 1 91 "void(int8 mode)" `61 
v L "value" 1 92 "int8" `64 
f B "set_timer0" 1 92 "void(int8 value)" `63 
f B "get_timer0" 1 93 "int8()" `65 
v L "mode" 1 94 "int8" `67 
v L "prescaler" 1 94 "int8" `68 
f B "setup_counters" 1 94 "void(int8 mode,int8 prescaler)" `66 
v L "value" 1 95 "int8" `70 
f B "set_rtcc" 1 95 "void(int8 value)" `69 
f B "get_rtcc" 1 96 "int8()" `71  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 98 "0"
d G "T0_EXT_L_TO_H" 1 99 "32"
d G "T0_EXT_H_TO_L" 1 100 "48"
d G "T0_DIV_1" 1 102 "8"
d G "T0_DIV_2" 1 103 "0"
d G "T0_DIV_4" 1 104 "1"
d G "T0_DIV_8" 1 105 "2"
d G "T0_DIV_16" 1 106 "3"
d G "T0_DIV_32" 1 107 "4"
d G "T0_DIV_64" 1 108 "5"
d G "T0_DIV_128" 1 109 "6"
d G "T0_DIV_256" 1 110 "7"
d G "T0_8_BIT" 1 113 "0"
d G "RTCC_INTERNAL" 1 115 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 116 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 117 "48"
d G "RTCC_DIV_1" 1 118 "8"
d G "RTCC_DIV_2" 1 119 "0"
d G "RTCC_DIV_4" 1 120 "1"
d G "RTCC_DIV_8" 1 121 "2"
d G "RTCC_DIV_16" 1 122 "3"
d G "RTCC_DIV_32" 1 123 "4"
d G "RTCC_DIV_64" 1 124 "5"
d G "RTCC_DIV_128" 1 125 "6"
d G "RTCC_DIV_256" 1 126 "7"
d G "RTCC_8_BIT" 1 127 "0"
c L "get_rtcc" 1 3 8 "FUNCTION"
v L "mode" 1 138 "int16" `73 
f B "setup_wdt" 1 138 "void(int16 mode)" `72 
f B "restart_wdt" 1 139 "void()" `74  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 142 "8"
d G "WDT_36MS" 1 143 "9"
d G "WDT_72MS" 1 144 "10"
d G "WDT_144MS" 1 145 "11"
d G "WDT_288MS" 1 146 "12"
d G "WDT_576MS" 1 147 "13"
d G "WDT_1152MS" 1 148 "14"
d G "WDT_2304MS" 1 149 "15"
d G "DISABLE_PULLUPS" 1 152 "0x40" "for 505, 508, 509, 527 and 570 only"
d G "DISABLE_WAKEUP_ON_CHANGE" 1 153 "0x80" "for 505, 508, 509, 527 and 570 only"
d G "PIN_CHANGE_FROM_SLEEP" 1 154 "0" "DEFAULT, for 505, 508, 509, 527 and 570 only"
c L "restart_wdt" 1 3 3 "FUNCTION"
v L "x" 1 160 "sint8" `76 
f B "abs" 1 160 "sint8(sint8 x)" `75 
v L "x" 1 161 "sint16" `78 
f G "abs" 1 161 "sint16(sint16 x)" `77 
v L "x" 1 162 "sint32" `80 
f G "abs" 1 162 "sint32(sint32 x)" `79 
v L "x" 1 163 "float" `82 
f G "abs" 1 163 "float(float x)" `81 
v L "??65535" 1 164 "int8" `84 
v L "??65535" 1 164 "int8" `85 
f B "_mul" 1 164 "int16(int8 ,int8 )" `83 
v L "??65535" 1 165 "sint8" `84 
v L "??65535" 1 165 "sint8" `88 
f G "_mul" 1 165 "sint16(sint8 ,sint8 )" `86 
v L "??65535" 1 166 "int16" `84 
v L "??65535" 1 166 "int16" `91 
f G "_mul" 1 166 "int32(int16 ,int16 )" `89 
v L "??65535" 1 167 "sint16" `84 
v L "??65535" 1 167 "sint16" `94 
f G "_mul" 1 167 "sint32(sint16 ,sint16 )" `92  "Memory Manipulation Prototypes:"
v L "bank" 1 170 "int8" `96 
v L "offset" 1 170 "int8" `97 
f B "read_bank" 1 170 "int8(int8 bank,int8 offset)" `95 
v L "bank" 1 171 "int8" `99 
v L "offset" 1 171 "int8" `100 
v L "value" 1 171 "int8" `101 
f B "write_bank" 1 171 "void(int8 bank,int8 offset,int8 value)" `98 
v L "dest" 1 172 "*int8" `103 
v L "src" 1 172 "*int8" `104 
f B "strcpy" 1 172 "void(*int8 dest,*int8 src)" `102 
v L "dest" 1 173 "*int8" `106 
v L "src" 1 173 "*int8" `107 
f B "strcopy" 1 173 "void(*int8 dest,*int8 src)" `105 
v L "destination" 1 174 "*int8" `109 
v L "value" 1 174 "int8" `110 
v L "num" 1 174 "int16" `111 
f B "memset" 1 174 "void(*int8 destination,int8 value,int16 num)" `108 
v L "destination" 1 175 "*int8" `113 
v L "source" 1 175 "*int8" `114 
v L "num" 1 175 "int16" `115 
f B "memcpy" 1 175 "void(*int8 destination,*int8 source,int16 num)" `112  "String Prototypes:"
v L "cvalue" 1 178 "int8" `117 
f B "toupper" 1 178 "int8(int8 cvalue)" `116 
v L "cvalue" 1 179 "int8" `119 
f B "tolower" 1 179 "int8(int8 cvalue)" `118 
v L "string" 1 180 "*int8" `121 
v L "cstring" 1 180 "*int8" `122 
f B "sprintf" 1 180 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `120  "Data Manipulators Prototypes:"
v L "address" 1 183 "*int8" `125 
v L "bytes" 1 183 "int8" `126 
v L "value" 1 183 "int8" `127 
f B "shift_left" 1 183 "int8(*int8 address,int8 bytes,int8 value)" `124 
v L "address" 1 184 "*int8" `129 
v L "bytes" 1 184 "int8" `130 
v L "value" 1 184 "int8" `131 
f B "shift_right" 1 184 "int8(*int8 address,int8 bytes,int8 value)" `128 
v L "address" 1 185 "*int8" `133 
v L "bytes" 1 185 "int8" `134 
f B "rotate_left" 1 185 "void(*int8 address,int8 bytes)" `132 
v L "address" 1 186 "*int8" `136 
v L "bytes" 1 186 "int8" `137 
f B "rotate_right" 1 186 "void(*int8 address,int8 bytes)" `135 
v L "value" 1 187 "int8" `139 
f B "swap" 1 187 "void(int8 value)" `138 
v L "var" 1 188 "int16" `141 
v L "offset" 1 188 "int8" `142 
f B "make8" 1 188 "int8(int16 var,int8 offset)" `140 
v L "var" 1 189 "int32" `141 
v L "offset" 1 189 "int8" `145 
f G "make8" 1 189 "int8(int32 var,int8 offset)" `143 
v L "varhigh" 1 190 "int8" `147 
v L "varlow" 1 190 "int8" `148 
f B "make16" 1 190 "int16(int8 varhigh,int8 varlow)" `146 
v L "var1" 1 191 "int16" `150 
f B "make32" 1 191 "int32(int16 var1)" `149 
v L "var1" 1 192 "int16" `152 
v L "var2" 1 192 "int16" `153 
f G "make32" 1 192 "int32(int16 var1,int16 var2)" `151 
v L "var1" 1 193 "int16" `152 
v L "var2" 1 193 "int8" `156 
f G "make32" 1 193 "int32(int16 var1,int8 var2)" `154 
v L "var1" 1 194 "int16" `158 
v L "var2" 1 194 "int8" `159 
v L "var3" 1 194 "int8" `160 
f G "make32" 1 194 "int32(int16 var1,int8 var2,int8 var3)" `157 
v L "var1" 1 195 "int8" `162 
f G "make32" 1 195 "int32(int8 var1)" `161 
v L "var1" 1 196 "int8" `152 
v L "var2" 1 196 "int8" `165 
f G "make32" 1 196 "int32(int8 var1,int8 var2)" `163 
v L "var1" 1 197 "int8" `158 
v L "var2" 1 197 "int8" `159 
v L "var3" 1 197 "int8" `169 
f G "make32" 1 197 "int32(int8 var1,int8 var2,int8 var3)" `166 
v L "var1" 1 198 "int8" `171 
v L "var2" 1 198 "int8" `172 
v L "var3" 1 198 "int8" `173 
v L "var4" 1 198 "int8" `174 
f G "make32" 1 198 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `170 
v L "var1" 1 199 "int8" `152 
v L "var2" 1 199 "int16" `177 
f G "make32" 1 199 "int32(int8 var1,int16 var2)" `175 
v L "var1" 1 200 "int8" `158 
v L "var2" 1 200 "int16" `159 
v L "var3" 1 200 "int8" `181 
f G "make32" 1 200 "int32(int8 var1,int16 var2,int8 var3)" `178 
v L "var1" 1 201 "int8" `158 
v L "var2" 1 201 "int8" `159 
v L "var3" 1 201 "int16" `185 
f G "make32" 1 201 "int32(int8 var1,int8 var2,int16 var3)" `182 
v L "var" 1 202 "int8" `187 
v L "bit" 1 202 "int8" `188 
f B "bit_set" 1 202 "void(int8 var,int8 bit)" `186 
v L "var" 1 203 "int16" `187 
v L "bit" 1 203 "int8" `191 
f G "bit_set" 1 203 "void(int16 var,int8 bit)" `189 
v L "var" 1 204 "int32" `187 
v L "bit" 1 204 "int8" `194 
f G "bit_set" 1 204 "void(int32 var,int8 bit)" `192 
v L "var" 1 205 "int8" `196 
v L "bit" 1 205 "int8" `197 
f B "bit_clear" 1 205 "void(int8 var,int8 bit)" `195 
v L "var" 1 206 "int16" `196 
v L "bit" 1 206 "int8" `200 
f G "bit_clear" 1 206 "void(int16 var,int8 bit)" `198 
v L "var" 1 207 "int32" `196 
v L "bit" 1 207 "int8" `203 
f G "bit_clear" 1 207 "void(int32 var,int8 bit)" `201 
v L "var" 1 208 "int8" `205 
v L "bit" 1 208 "int8" `206 
f B "bit_test" 1 208 "int8(int8 var,int8 bit)" `204 
v L "var" 1 209 "int16" `205 
v L "bit" 1 209 "int8" `209 
f G "bit_test" 1 209 "int8(int16 var,int8 bit)" `207 
v L "var" 1 210 "int32" `205 
v L "bit" 1 210 "int8" `212 
f G "bit_test" 1 210 "int8(int32 var,int8 bit)" `210  "#use delay() Prototypes:"
v L "count" 1 213 "int8" `214 
f B "delay_cycles" 1 213 "void(int8 count)" `213 
v L "time" 1 214 "int16" `216 
f B "delay_ms" 1 214 "void(int16 time)" `215 
v L "time" 1 215 "int16" `218 
f B "delay_us" 1 215 "void(int16 time)" `217  "#use rs232() Prototypes:"
v L "cdata" 1 218 "int8" `220 
f B "putchar" 1 218 "void(int8 cdata)" `219 
v L "cdata" 1 219 "int8" `222 
v L "stream" 1 219 "int8" `223 
f G "putchar" 1 219 "void(int8 cdata,int8 stream)" `221 
v L "string" 1 220 "*int8" `225 
f B "puts" 1 220 "void(*int8 string)" `224 
v L "string" 1 221 "*int8" `227 
v L "stream" 1 221 "int8" `228 
f G "puts" 1 221 "void(*int8 string,int8 stream)" `226 
f B "getch" 1 222 "int8()" `229 
v L "stream" 1 223 "int8" `231 
f G "getch" 1 223 "int8(int8 stream)" `230 
v L "string" 1 224 "*int8" `233 
f B "gets" 1 224 "void(*int8 string)" `232 
v L "string" 1 225 "*int8" `235 
v L "stream" 1 225 "int8" `236 
f G "gets" 1 225 "void(*int8 string,int8 stream)" `234 
f B "kbhit" 1 226 "int8()" `237 
v L "stream" 1 227 "int8" `239 
f G "kbhit" 1 227 "int8(int8 stream)" `238 
v L "string" 1 228 "*int8" `241 
f B "printf" 1 228 "void(*int8 string,*int8 _VA_LIST)" `240 
v L "stream" 1 229 "int8" `244 
v L "string" 1 229 "*int8" `245 
f B "fprintf" 1 229 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `243 
f B "putc_send" 1 230 "void()" `247 
v L "stream" 1 231 "int8" `249 
f B "fputc_send" 1 231 "void(int8 stream)" `248 
f B "rcv_buffer_full" 1 232 "int8()" `250 
v L "stream" 1 233 "int8" `252 
f G "rcv_buffer_full" 1 233 "int8(int8 stream)" `251 
f B "rcv_buffer_bytes" 1 234 "int16()" `253 
v L "stream" 1 235 "int8" `255 
f G "rcv_buffer_bytes" 1 235 "int16(int8 stream)" `254 
f B "tx_buffer_full" 1 236 "int8()" `256 
v L "stream" 1 237 "int8" `258 
f G "tx_buffer_full" 1 237 "int8(int8 stream)" `257 
f B "tx_buffer_bytes" 1 238 "int16()" `259 
v L "stream" 1 239 "int8" `261 
f G "tx_buffer_bytes" 1 239 "int16(int8 stream)" `260  "#use i2c() Prototypes:"
f B "i2c_read" 1 242 "int8()" `262 
v L "stream" 1 243 "int8" `264 
f G "i2c_read" 1 243 "int8(int8 stream)" `263 
v L "stream" 1 244 "int8" `266 
v L "ack" 1 244 "int8" `267 
f G "i2c_read" 1 244 "int8(int8 stream,int8 ack)" `265 
v L "data" 1 245 "int8" `269 
f B "i2c_write" 1 245 "int8(int8 data)" `268 
v L "stream" 1 246 "int8" `271 
v L "data" 1 246 "int8" `272 
f G "i2c_write" 1 246 "int8(int8 stream,int8 data)" `270 
f B "i2c_start" 1 247 "void()" `273 
v L "stream" 1 248 "int8" `275 
f G "i2c_start" 1 248 "void(int8 stream)" `274 
v L "stream" 1 249 "int8" `277 
v L "restart" 1 249 "int8" `278 
f G "i2c_start" 1 249 "void(int8 stream,int8 restart)" `276 
f B "i2c_stop" 1 250 "void()" `279 
v L "stream" 1 251 "int8" `281 
f G "i2c_stop" 1 251 "void(int8 stream)" `280 
f B "i2c_isr_state" 1 252 "int8()" `282 
v L "addr" 1 253 "int8" `284 
f B "i2c_slaveaddr" 1 253 "void(int8 addr)" `283 
v L "stream" 1 254 "int8" `286 
v L "addr" 1 254 "int8" `287 
f G "i2c_slaveaddr" 1 254 "void(int8 stream,int8 addr)" `285 
f B "i2c_poll" 1 255 "int8()" `288 
v L "stream" 1 256 "int8" `290 
f G "i2c_poll" 1 256 "int8(int8 stream)" `289 
v L "baud" 1 257 "int32" `292 
f B "i2c_init" 1 257 "void(int32 baud)" `291 
v L "stream" 1 258 "int8" `294 
v L "baud" 1 258 "int32" `295 
f G "i2c_init" 1 258 "void(int8 stream,int32 baud)" `293  "#use spi() Prototypes:"
f B "spi_xfer" 1 261 "int8()" `296 
f G "spi_xfer" 1 262 "int16()" `297 
f G "spi_xfer" 1 263 "int32()" `298 
v L "data" 1 264 "int8" `300 
f G "spi_xfer" 1 264 "int8(int8 data)" `299 
v L "data" 1 265 "int16" `302 
f G "spi_xfer" 1 265 "int16(int16 data)" `301 
v L "data" 1 266 "int32" `304 
f G "spi_xfer" 1 266 "int32(int32 data)" `303 
v L "stream" 1 267 "int8" `306 
v L "data" 1 267 "int8" `307 
f G "spi_xfer" 1 267 "int8(int8 stream,int8 data)" `305 
v L "stream" 1 268 "int8" `306 
v L "data" 1 268 "int16" `310 
f G "spi_xfer" 1 268 "int16(int8 stream,int16 data)" `308 
v L "stream" 1 269 "int8" `306 
v L "data" 1 269 "int32" `313 
f G "spi_xfer" 1 269 "int32(int8 stream,int32 data)" `311 
v L "stream" 1 270 "int8" `315 
v L "data" 1 270 "int8" `316 
v L "bits" 1 270 "int8" `317 
f G "spi_xfer" 1 270 "int8(int8 stream,int8 data,int8 bits)" `314 
v L "stream" 1 271 "int8" `315 
v L "data" 1 271 "int16" `316 
v L "bits" 1 271 "int8" `321 
f G "spi_xfer" 1 271 "int16(int8 stream,int16 data,int8 bits)" `318 
v L "stream" 1 272 "int8" `315 
v L "data" 1 272 "int32" `316 
v L "bits" 1 272 "int8" `325 
f G "spi_xfer" 1 272 "int32(int8 stream,int32 data,int8 bits)" `322 
v L "baud" 1 273 "int32" `327 
f B "spi_init" 1 273 "void(int32 baud)" `326 
v L "stream" 1 274 "int8" `329 
v L "baud" 1 274 "int32" `330 
f G "spi_init" 1 274 "void(int8 stream,int32 baud)" `328 
v L "baud" 1 275 "int32" `332 
f B "spi_speed" 1 275 "void(int32 baud)" `331 
v L "stream" 1 276 "int8" `334 
v L "baud" 1 276 "int32" `335 
f G "spi_speed" 1 276 "void(int8 stream,int32 baud)" `333 
v L "stream" 1 277 "int8" `337 
v L "baud" 1 277 "int32" `338 
v L "clock" 1 277 "int32" `339 
f G "spi_speed" 1 277 "void(int8 stream,int32 baud,int32 clock)" `336 
v L "data" 1 278 "int8" `341 
f B "spi_prewrite" 1 278 "void(int8 data)" `340 
v L "data" 1 279 "int16" `343 
f G "spi_prewrite" 1 279 "void(int16 data)" `342 
v L "data" 1 280 "int32" `345 
f G "spi_prewrite" 1 280 "void(int32 data)" `344 
v L "??65535" 1 281 "int8" `347 
v L "data" 1 281 "int8" `348 
f G "spi_prewrite" 1 281 "void(int8 ,int8 data)" `346 
v L "??65535" 1 282 "int8" `347 
v L "data" 1 282 "int16" `351 
f G "spi_prewrite" 1 282 "void(int8 ,int16 data)" `349 
v L "??65535" 1 283 "int8" `347 
v L "data" 1 283 "int32" `354 
f G "spi_prewrite" 1 283 "void(int8 ,int32 data)" `352 
f B "spi_xfer_in" 1 284 "int8()" `355 
f G "spi_xfer_in" 1 285 "int16()" `356 
f G "spi_xfer_in" 1 286 "int32()" `357 
v L "bits" 1 287 "int8" `359 
f G "spi_xfer_in" 1 287 "int8(int8 bits)" `358 
v L "bits" 1 288 "int8" `361 
f G "spi_xfer_in" 1 288 "int16(int8 bits)" `360 
v L "bits" 1 289 "int8" `363 
f G "spi_xfer_in" 1 289 "int32(int8 bits)" `362 
v L "stream" 1 290 "int8" `365 
v L "bits" 1 290 "int8" `366 
f G "spi_xfer_in" 1 290 "int8(int8 stream,int8 bits)" `364 
v L "stream" 1 291 "int8" `365 
v L "bits" 1 291 "int8" `369 
f G "spi_xfer_in" 1 291 "int16(int8 stream,int8 bits)" `367 
v L "stream" 1 292 "int8" `365 
v L "bits" 1 292 "int8" `372 
f G "spi_xfer_in" 1 292 "int32(int8 stream,int8 bits)" `370  "#use rtos() Prototypes:"
f B "rtos_run" 1 295 "void()" `373 
f B "rtos_yield" 1 296 "void()" `374 
v L "task" 1 297 "int8" `376 
f B "rtos_enable" 1 297 "void(int8 task)" `375 
v L "task" 1 298 "int8" `378 
f B "rtos_disable" 1 298 "void(int8 task)" `377 
f B "rtos_terminate" 1 299 "void()" `379 
v L "flag" 1 300 "int8" `381 
f B "rtos_await" 1 300 "void(int8 flag)" `380 
v L "sem" 1 301 "int8" `383 
f B "rtos_wait" 1 301 "void(int8 sem)" `382 
v L "sem" 1 302 "int8" `385 
f B "rtos_signal" 1 302 "void(int8 sem)" `384 
v L "task" 1 303 "int8" `387 
v L "msg" 1 303 "int8" `388 
f B "rtos_msg_send" 1 303 "void(int8 task,int8 msg)" `386 
f B "rtos_msg_read" 1 304 "int8()" `389 
f B "rtos_msg_poll" 1 305 "int8()" `390 
v L "task" 1 306 "int8" `392 
f B "rtos_overrun" 1 306 "int8(int8 task)" `391 
v L "task" 1 307 "int8" `394 
v L "stat" 1 307 "*int8" `395 
f B "rtos_stats" 1 307 "void(int8 task,*int8 stat)" `393  "#use timer() Prototypes:"
f B "get_ticks" 1 310 "int8()" `396 
f G "get_ticks" 1 311 "int16()" `397 
f G "get_ticks" 1 312 "int32()" `398 
v L "stream" 1 313 "int8" `400 
f G "get_ticks" 1 313 "int8(int8 stream)" `399 
v L "stream" 1 314 "int8" `402 
f G "get_ticks" 1 314 "int16(int8 stream)" `401 
v L "stream" 1 315 "int8" `404 
f G "get_ticks" 1 315 "int32(int8 stream)" `403 
v L "value" 1 316 "int8" `406 
f B "set_ticks" 1 316 "void(int8 value)" `405 
v L "value" 1 317 "int16" `408 
f G "set_ticks" 1 317 "void(int16 value)" `407 
v L "value" 1 318 "int32" `410 
f G "set_ticks" 1 318 "void(int32 value)" `409 
v L "stream" 1 319 "int8" `412 
v L "value" 1 319 "int8" `413 
f G "set_ticks" 1 319 "void(int8 stream,int8 value)" `411 
v L "stream" 1 320 "int8" `412 
v L "value" 1 320 "int16" `416 
f G "set_ticks" 1 320 "void(int8 stream,int16 value)" `414 
v L "stream" 1 321 "int8" `412 
v L "value" 1 321 "int32" `419 
f G "set_ticks" 1 321 "void(int8 stream,int32 value)" `417  "#use pwm() Prototypes:"
f B "pwm_on" 1 324 "void()" `420 
v L "stream" 1 325 "int8" `422 
f G "pwm_on" 1 325 "void(int8 stream)" `421 
f B "pwm_off" 1 326 "void()" `423 
v L "stream" 1 327 "int8" `425 
f G "pwm_off" 1 327 "void(int8 stream)" `424 
v L "duty" 1 328 "int16" `427 
f B "pwm_set_duty" 1 328 "void(int16 duty)" `426 
v L "stream" 1 329 "int8" `429 
v L "duty" 1 329 "int16" `430 
f G "pwm_set_duty" 1 329 "void(int8 stream,int16 duty)" `428 
v L "percent" 1 330 "int16" `432 
f B "pwm_set_duty_percent" 1 330 "void(int16 percent)" `431 
v L "stream" 1 331 "int8" `434 
v L "percent" 1 331 "int16" `435 
f G "pwm_set_duty_percent" 1 331 "void(int8 stream,int16 percent)" `433 
v L "frequency" 1 332 "int32" `437 
f B "pwm_set_frequency" 1 332 "void(int32 frequency)" `436 
v L "stream" 1 333 "int8" `439 
v L "frequency" 1 333 "int32" `440 
f G "pwm_set_frequency" 1 333 "void(int8 stream,int32 frequency)" `438  "#use capture() Prototypes:"
f B "get_capture_time" 1 336 "int16()" `441 
v L "stream" 1 337 "int8" `443 
f G "get_capture_time" 1 337 "int16(int8 stream)" `442 
f B "get_capture_event" 1 338 "int8()" `444 
v L "stream" 1 339 "int8" `446 
f G "get_capture_event" 1 339 "int8(int8 stream)" `445  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
v L "address" 1 352 "int16" `448 
f B "goto_address" 1 352 "void(int16 address)" `447 
v L "label" 1 353 "int16" `450 
f B "label_address" 1 353 "int16(int16 label)" `449  "INT"
c L "label_address" 1 3 4 "FUNCTION"
v L "interrupt" 1 360 "int32" `452 
f B "enable_interrupts" 1 360 "void(int32 interrupt)" `451 
v L "interrupt" 1 361 "int32" `454 
f B "disable_interrupts" 1 361 "void(int32 interrupt)" `453 
v L "interrupt" 1 362 "int32" `456 
f B "clear_interrupt" 1 362 "void(int32 interrupt)" `455 
v L "interrupt" 1 363 "int32" `458 
f B "interrupt_active" 1 363 "int8(int32 interrupt)" `457 
v L "interrupt" 1 364 "int32" `460 
f B "interrupt_enabled" 1 364 "int8(int32 interrupt)" `459 
v L "source" 1 365 "int8" `462 
v L "edge" 1 365 "int8" `463 
f B "ext_int_edge" 1 365 "void(int8 source,int8 edge)" `461 
v L "address" 1 366 "int16" `465 
f B "jump_to_isr" 1 366 "void(int16 address)" `464  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 368 "0x40"
d G "H_TO_L" 1 369 "0"
d G "GLOBAL" 1 371 "0x0B01"
D G "_STDINT" 2 19 ""
C L "jump_to_isr" 2 2 1 "FUNCTION"
T G "int8_t" 2 23 "sint8" `466 
T G "uint8_t" 2 24 "int8" `467 
T G "int16_t" 2 25 "sint16" `468 
T G "uint16_t" 2 26 "int16" `469 
T G "int32_t" 2 27 "sint32" `470 
T G "uint32_t" 2 28 "int32" `471 
D G "INT8_MAX" 2 37 " (128)"
D G "INT8_MIN" 2 38 " (-127)"
D G "UINT8_MAX" 2 39 " (255)"
D G "INT16_MAX" 2 41 " (32767)"
D G "INT16_MIN" 2 42 " (-32768)"
D G "UINT16_MAX" 2 43 " (65535)"
D G "INT32_MAX" 2 45 " (2147483647)"
D G "INT32_MIN" 2 46 " (-2147483648)"
D G "UINT32_MAX" 2 47 " (4294967295)"
C L "jump_to_isr" 2 2 1 "FUNCTION"
T G "int_least8_t" 2 61 "sint8" `472 
T G "uint_least8_t" 2 62 "int8" `473 
T G "int_least16_t" 2 63 "sint16" `474 
T G "uint_least16_t" 2 64 "int16" `475 
T G "int_least32_t" 2 65 "sint32" `476 
T G "uint_least32_t" 2 66 "int32" `477 
D G "INT_LEAST8_MAX" 2 75 " (128)"
D G "INT_LEAST8_MIN" 2 76 " (-127)"
D G "UINT_LEAST8_MAX" 2 77 " (255)"
D G "INT_LEAST16_MAX" 2 79 " (32767)"
D G "INT_LEAST16_MIN" 2 80 " (-32768)"
D G "UINT_LEAST16_MAX" 2 81 " (65535)"
D G "INT_LEAST32_MAX" 2 83 " (2147483647)"
D G "INT_LEAST32_MIN" 2 84 " (-2147483648)"
D G "UINT_LEAST32_MAX" 2 85 " (4294967295)"
C L "jump_to_isr" 2 2 1 "FUNCTION"
T G "int_fast8_t" 2 112 "sint8" `478 
T G "uint_fast8_t" 2 113 "int8" `479 
D G "INT_FAST8_MAX" 2 114 " (128)"
D G "INT_FAST8_MIN" 2 115 " (-127)"
D G "UINT_FAST8_MAX" 2 116 " (255)"
T G "int_fast16_t" 2 117 "sint16" `480 
T G "uint_fast16_t" 2 118 "int16" `481 
T G "int_fast32_t" 2 121 "sint32" `482 
T G "uint_fast32_t" 2 122 "int32" `483 
D G "INT_FAST16_MAX" 2 124 " (32767)"
D G "INT_FAST16_MIN" 2 125 " (-32768)"
D G "UINT_FAST16_MAX" 2 126 " (65535)"
D G "INT_FAST32_MAX" 2 128 " (2147483647)"
D G "INT_FAST32_MIN" 2 129 " (-2147483648)"
D G "UINT_FAST32_MAX" 2 130 " (4294967295)"
D G "LED" 0 7 "PIN_B1"
D G "LED_ON" 0 8 "output_high(LED)"
D G "LED_OFF" 0 9 "output_low(LED)"
D G "BUTTON_IS_PRESSED" 0 10 " (!input(pin_b3))"
D G "TEST" 0 11 "PIN_B2"
D G "RST" 0 12 "PIN_B0"
D G "TEST_H" 0 13 "output_high(TEST)"
D G "TEST_L" 0 14 "output_low(TEST)"
D G "RST_H" 0 15 "output_high(RST)"
D G "RST_L" 0 16 "output_low(RST)"
D G "DEBOUNCE_DELAY" 0 17 "delay_ms(50);"
F G "gpio_init" 0 20 "void()" `488 
F G "entry_seq" 0 28 "void()" `489 
F G "exit_seq" 0 43 "void()" `490 
F G "MAIN" 0 58 "void()" `491 
V L "in_bsl_mode" 0 59 "uint8_t" `492 
V L "flag" 0 59 "uint8_t" `493 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_b" 1 0
F B "input_b" 0 0
F B "set_tris_b" 1 0
F B "get_tris_b" 0 0
F B "input_change_b" 0 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_timer_0" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
