CCS PCM C Compiler, Version 5.051, 5967               02-ян-16 19:11

               Filename:   D:\Custom Computer Services\Projects\Start Button\CCS Project\outputs\main.lst

               ROM used:   481 words (23%)
                           Largest free fragment is 1567
               RAM used:   81 (36%) at main() level
                           81 (36%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0AA
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  BTFSS  0B.4
001B:  GOTO   01E
001C:  BTFSC  0B.1
001D:  GOTO   02F
001E:  MOVF   22,W
001F:  MOVWF  04
0020:  MOVF   23,W
0021:  MOVWF  77
0022:  MOVF   24,W
0023:  MOVWF  78
0024:  MOVF   25,W
0025:  MOVWF  79
0026:  MOVF   26,W
0027:  MOVWF  7A
0028:  MOVF   27,W
0029:  MOVWF  0A
002A:  SWAPF  21,W
002B:  MOVWF  03
002C:  SWAPF  7F,F
002D:  SWAPF  7F,W
002E:  RETFIE
.................... #import(file="outputs\main.o") 
.................... #import(file="outputs\start_button.o") 
.................... #include <16f628A.h> 
.................... //////////// Standard Header file for the PIC16F628A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F628A 
*
0034:  INCF   04,F
0035:  MOVF   00,W
0036:  MOVWF  0A
0037:  DECF   04,F
0038:  MOVF   00,W
0039:  MOVWF  02
003A:  RETURN
....................  
.................... #list 
....................  
.................... #fuses INTRC_IO, WDT, MCLR, NOPROTECT, BROWNOUT 
.................... #device *=16 
.................... #use delay(clock=4M) 
*
0089:  MOVLW  6A
008A:  MOVWF  04
008B:  BCF    03.7
008C:  MOVF   00,W
008D:  BTFSC  03.2
008E:  GOTO   09D
008F:  MOVLW  01
0090:  MOVWF  78
0091:  CLRF   77
0092:  DECFSZ 77,F
0093:  GOTO   092
0094:  DECFSZ 78,F
0095:  GOTO   091
0096:  MOVLW  4A
0097:  MOVWF  77
0098:  DECFSZ 77,F
0099:  GOTO   098
009A:  GOTO   09B
009B:  DECFSZ 00,F
009C:  GOTO   08F
.................... #USE RS232 (UART1, BAUD=9600, STREAM=DEBUG_STREAM, ERRORS) 
.................... #byte OPTION = 0x181 
.................... #bit TRMT = getenv("BIT:TRMT") 
....................  
.................... #define DEBUG  
....................  
.................... #include "start_button.h" 
.................... #IFNDEF _START_BUTTON_H_ 
.................... #DEFINE _START_BUTTON_H_ 
.................... //#include "start_button_conf.h" 
.................... #define DEBOUNCE_TIME         30             //milli secconds 
....................  
.................... /*Macros*/ 
.................... #define on(x)                 output_high(x) 
.................... #define off(x)                output_low(x) 
.................... #define BUTTON_PRESSED        (!input(BUTTON)) 
.................... #define BREAKS_PRESSED        (input(BREAKS)) 
.................... #define LAMP_ON               (input(CHARGE)) 
.................... #define MS_500                ((unsigned int16)1953) 
....................  
.................... #define WAITING               1 
.................... #define IDLE                  0 
....................  
.................... typedef int(*func_type)(void); 
....................  
.................... typedef struct process_data 
.................... { 
....................    unsigned char* name; 
....................    func_type func; 
....................    int8 called; 
....................    struct process_data* p_process; 
.................... }process_data_t; 
....................  
....................  
.................... struct button_stat 
....................    { 
....................       unsigned char perm; 
....................       unsigned char* p_perm; 
....................    }; 
....................     
.................... typedef struct timer { 
....................    unsigned int16 count; 
.................... }timer; 
....................  
....................  
....................   
....................  
....................  
.................... typedef struct processes 
.................... { 
....................    process_data_t* p_proc[5]; 
.................... }proc_queue; 
....................  
.................... extern int proc_number; 
.................... extern proc_queue proc_list; 
....................  
....................  
.................... #define THREAD(x)    void THREAD_##x(void) 
....................  
.................... #define NEW_PROC(x)  process_data_t proc_##x = {#x, &THREAD_##x, 0, 0} 
....................                        
.................... #define CALL_PROC(x) proc_##x.func() 
....................  
.................... #define PROC_INIT(x) proc_list.p_proc[proc_number++] = &proc_##x   
....................  
.................... #define PROC_POST(x) proc_##x.called = WAITING 
....................  
....................  
....................  
.................... /*Function definitions*/ 
.................... void StartButtonInit(void); 
.................... void StarterState_1(void); 
.................... void StarterState_2(void); 
.................... void StarterState_5(void); 
.................... unsigned char ButtonSignal(unsigned char* perm); 
.................... void ProcInit(void); 
.................... #ENDIF 
....................  
.................... #include "start_button_conf.h" 
.................... #IFNDEF _START_BUTTON_CONF_H_ 
.................... #DEFINE _START_BUTTON_CONF_H_ 
....................  
.................... /*input signals*/ 
.................... #define IMMO                   
.................... #define BUTTON                PIN_B0 
.................... #define BREAKS                PIN_A3 
.................... #define CHARGE                PIN_A2 
.................... #define SYS_CLK_OUTPUT        PIN_A6 
....................  
.................... /*output signals*/ 
.................... #define CONTACT_LED           PIN_B4 
.................... #define STARTER_LED           PIN_B5 
.................... #define IGN1                  PIN_A1 
.................... #define IGN2                  PIN_A0 
.................... #define ACC                   PIN_B6 
.................... #define STARTER               PIN_B7 
....................  
*
0107:  CLRF   61
0108:  CLRF   62
.................... #define T1SYNC                (1 << 2) 
.................... #define T1OSCEN               (1 << 3) 
.................... #define TMR1CS                (1 << 1) 
0109:  CLRF   2A
010A:  CLRF   2B
010B:  CLRF   2C
010C:  CLRF   2D
010D:  CLRF   2E
010E:  CLRF   2F
010F:  CLRF   30
0110:  CLRF   31
0111:  CLRF   32
0112:  CLRF   33
.................... #define TMR1ON                (1) 
....................  
....................  
.................... #ENDIF 
....................  
....................  
.................... void ChipInit(void); 
.................... void ButtonProcess(struct button_stat* p_butt); 
.................... void GoSleep(); 
....................  
.................... THREAD(WakeUpTask) 
.................... { 
....................    if(restart_cause() == WDT_FROM_SLEEP) 
*
0074:  MOVF   03,W
0075:  ANDLW  18
0076:  BSF    03.5
0077:  BTFSS  0E.1
0078:  BSF    0E.0
0079:  MOVWF  77
007A:  MOVF   0E,W
007B:  ANDLW  03
007C:  IORWF  77,W
007D:  BSF    0E.0
007E:  BSF    0E.1
007F:  BSF    03.3
0080:  BSF    03.4
0081:  SUBLW  03
0082:  BTFSS  03.2
0083:  GOTO   0A2
....................    { 
....................       output_high(STARTER_LED); 
0084:  BCF    06.5
0085:  BCF    03.5
0086:  BSF    06.5
....................       delay_ms(50); 
0087:  MOVLW  32
0088:  MOVWF  6A
....................       output_low(STARTER_LED); 
*
009D:  BSF    03.5
009E:  BCF    06.5
009F:  BCF    03.5
00A0:  BCF    06.5
00A1:  BSF    03.5
....................    } 
00A2:  BCF    03.5
00A3:  RETURN
.................... } 
....................  
.................... THREAD(ToggleStarterLed) 
.................... { 
....................       output_toggle(STARTER_LED); 
00A4:  BSF    03.5
00A5:  BCF    06.5
00A6:  MOVLW  20
00A7:  BCF    03.5
00A8:  XORWF  06,F
00A9:  RETURN
.................... } 
....................  
*
00BC:  MOVLW  54
00BD:  MOVWF  3B
00BE:  MOVLW  6F
00BF:  MOVWF  3C
00C0:  MOVLW  67
00C1:  MOVWF  3D
00C2:  MOVWF  3E
00C3:  MOVLW  6C
00C4:  MOVWF  3F
00C5:  MOVLW  65
00C6:  MOVWF  40
00C7:  MOVLW  53
00C8:  MOVWF  41
00C9:  MOVLW  74
00CA:  MOVWF  42
00CB:  MOVLW  61
00CC:  MOVWF  43
00CD:  MOVLW  72
00CE:  MOVWF  44
00CF:  MOVLW  74
00D0:  MOVWF  45
00D1:  MOVLW  65
00D2:  MOVWF  46
00D3:  MOVLW  72
00D4:  MOVWF  47
00D5:  MOVLW  4C
00D6:  MOVWF  48
00D7:  MOVLW  65
00D8:  MOVWF  49
00D9:  MOVLW  64
00DA:  MOVWF  4A
00DB:  CLRF   4B
00DC:  CLRF   35
00DD:  MOVLW  3B
00DE:  MOVWF  34
00DF:  MOVLW  00
00E0:  MOVWF  37
00E1:  MOVLW  A4
00E2:  MOVWF  36
00E3:  CLRF   38
00E4:  CLRF   39
00E5:  CLRF   3A
....................  
00E6:  MOVLW  57
00E7:  MOVWF  53
00E8:  MOVLW  61
00E9:  MOVWF  54
00EA:  MOVLW  6B
00EB:  MOVWF  55
00EC:  MOVLW  65
00ED:  MOVWF  56
00EE:  MOVLW  55
00EF:  MOVWF  57
00F0:  MOVLW  70
00F1:  MOVWF  58
00F2:  MOVLW  54
00F3:  MOVWF  59
00F4:  MOVLW  61
00F5:  MOVWF  5A
00F6:  MOVLW  73
00F7:  MOVWF  5B
00F8:  MOVLW  6B
00F9:  MOVWF  5C
00FA:  CLRF   5D
00FB:  CLRF   4D
00FC:  MOVLW  53
00FD:  MOVWF  4C
00FE:  MOVLW  00
00FF:  MOVWF  4F
0100:  MOVLW  74
0101:  MOVWF  4E
0102:  CLRF   50
0103:  CLRF   51
0104:  CLRF   52
.................... NEW_PROC(ToggleStarterLed); 
.................... NEW_PROC(WakeUpTask); 
....................  
.................... #INT_EXT 
.................... void ButtISR() 
.................... { 
....................    PROC_POST(ToggleStarterLed); 
*
002F:  MOVLW  01
0030:  MOVWF  38
0031:  BCF    0B.1
0032:  BCF    0A.3
0033:  GOTO   01E
.................... } 
....................  
.................... void main(void) 
*
00AA:  MOVF   03,W
00AB:  ANDLW  1F
00AC:  MOVWF  03
00AD:  BSF    03.5
00AE:  BSF    0E.3
00AF:  BCF    03.5
00B0:  CLRF   28
00B1:  MOVLW  19
00B2:  BSF    03.5
00B3:  MOVWF  19
00B4:  MOVLW  A6
00B5:  MOVWF  18
00B6:  MOVLW  90
00B7:  BCF    03.5
00B8:  MOVWF  18
00B9:  CLRF   5F
00BA:  CLRF   5E
00BB:  CLRF   60
*
0105:  CLRF   29
0106:  BCF    03.7
*
0113:  MOVLW  07
0114:  MOVWF  1F
0115:  BCF    03.7
.................... { 
.................... int i; 
....................  
.................... ChipInit(); 
0116:  GOTO   03B
.................... PROC_INIT(ToggleStarterLed); 
0117:  MOVF   29,W
0118:  INCF   29,F
0119:  MOVWF  77
011A:  BCF    03.0
011B:  RLF    77,F
011C:  MOVF   77,W
011D:  ADDLW  2A
011E:  MOVWF  04
011F:  BCF    03.7
0120:  INCF   04,F
0121:  CLRF   00
0122:  DECF   04,F
0123:  MOVLW  34
0124:  MOVWF  00
.................... PROC_INIT(WakeUpTask); 
0125:  MOVF   29,W
0126:  INCF   29,F
0127:  MOVWF  77
0128:  BCF    03.0
0129:  RLF    77,F
012A:  MOVF   77,W
012B:  ADDLW  2A
012C:  MOVWF  04
012D:  BCF    03.7
012E:  INCF   04,F
012F:  CLRF   00
0130:  DECF   04,F
0131:  MOVLW  4C
0132:  MOVWF  00
....................  
....................    while(TRUE) 
....................    { 
....................  
....................        
....................       for(i = 0; proc_list.p_proc[i] != 0; i++) 
0133:  CLRF   63
0134:  BCF    03.0
0135:  RLF    63,W
0136:  ADDLW  2A
0137:  MOVWF  04
0138:  BCF    03.7
0139:  INCF   04,F
013A:  MOVF   00,W
013B:  MOVWF  65
013C:  DECF   04,F
013D:  MOVF   00,W
013E:  MOVWF  64
013F:  MOVF   64,F
0140:  BTFSS  03.2
0141:  GOTO   145
0142:  MOVF   65,F
0143:  BTFSC  03.2
0144:  GOTO   1DB
....................       { 
....................          if(proc_list.p_proc[i] -> called == WAITING) 
0145:  BCF    03.0
0146:  RLF    63,W
0147:  ADDLW  2A
0148:  MOVWF  78
0149:  CLRF   7A
014A:  BTFSC  03.0
014B:  INCF   7A,F
014C:  MOVF   78,W
014D:  MOVWF  64
014E:  MOVF   7A,W
014F:  MOVWF  65
0150:  MOVF   64,W
0151:  MOVWF  04
0152:  BCF    03.7
0153:  BTFSC  65.0
0154:  BSF    03.7
0155:  INCF   04,F
0156:  MOVF   00,W
0157:  MOVWF  67
0158:  DECF   04,F
0159:  MOVF   00,W
015A:  MOVWF  66
015B:  MOVLW  04
015C:  ADDWF  66,W
015D:  MOVWF  04
015E:  BCF    03.7
015F:  BTFSC  67.0
0160:  BSF    03.7
0161:  DECFSZ 00,W
0162:  GOTO   1D9
....................          { 
....................             #IFDEF  DEBUG 
....................                fprintf(DEBUG_STREAM, "%s\n", proc_list.p_proc[i] -> name); 
0163:  BCF    03.0
0164:  RLF    63,W
0165:  ADDLW  2A
0166:  MOVWF  78
0167:  CLRF   7A
0168:  BTFSC  03.0
0169:  INCF   7A,F
016A:  MOVF   78,W
016B:  MOVWF  64
016C:  MOVF   7A,W
016D:  MOVWF  65
016E:  MOVF   78,W
016F:  MOVWF  04
0170:  BCF    03.7
0171:  BTFSC  7A.0
0172:  BSF    03.7
0173:  INCF   04,F
0174:  MOVF   00,W
0175:  MOVWF  67
0176:  DECF   04,F
0177:  MOVF   00,W
0178:  MOVWF  66
0179:  MOVWF  04
017A:  BCF    03.7
017B:  BTFSC  67.0
017C:  BSF    03.7
017D:  INCF   04,F
017E:  MOVF   00,W
017F:  MOVWF  69
0180:  DECF   04,F
0181:  MOVF   00,W
0182:  MOVWF  68
0183:  MOVWF  04
0184:  BCF    03.7
0185:  BTFSC  69.0
0186:  BSF    03.7
0187:  MOVLW  00
0188:  IORWF  00,W
0189:  BTFSC  03.2
018A:  GOTO   191
018B:  MOVF   00,W
018C:  BTFSS  0C.4
018D:  GOTO   18C
018E:  MOVWF  19
018F:  INCF   04,F
0190:  GOTO   187
0191:  MOVLW  0A
0192:  BTFSS  0C.4
0193:  GOTO   192
0194:  MOVWF  19
....................                while(!TRMT) 
0195:  BSF    03.5
0196:  BTFSS  18.1
0197:  GOTO   196
....................                   ; 
....................             #ENDIF 
....................             proc_list.p_proc[i]->func(); 
0198:  BCF    03.0
0199:  BCF    03.5
019A:  RLF    63,W
019B:  ADDLW  2A
019C:  MOVWF  78
019D:  CLRF   7A
019E:  BTFSC  03.0
019F:  INCF   7A,F
01A0:  MOVF   78,W
01A1:  MOVWF  64
01A2:  MOVF   7A,W
01A3:  MOVWF  65
01A4:  MOVF   78,W
01A5:  MOVWF  04
01A6:  BCF    03.7
01A7:  BTFSC  7A.0
01A8:  BSF    03.7
01A9:  INCF   04,F
01AA:  MOVF   00,W
01AB:  MOVWF  67
01AC:  DECF   04,F
01AD:  MOVF   00,W
01AE:  MOVWF  66
01AF:  MOVLW  02
01B0:  ADDWF  66,W
01B1:  MOVWF  78
01B2:  MOVF   67,W
01B3:  MOVWF  7A
01B4:  BTFSC  03.0
01B5:  INCF   7A,F
01B6:  MOVF   78,W
01B7:  MOVWF  68
01B8:  MOVF   7A,W
01B9:  MOVWF  69
01BA:  MOVF   78,W
01BB:  MOVWF  04
01BC:  BCF    03.7
01BD:  BTFSC  7A.0
01BE:  BSF    03.7
01BF:  CALL   034
....................             proc_list.p_proc[i]->called = IDLE; 
01C0:  BCF    03.0
01C1:  RLF    63,W
01C2:  ADDLW  2A
01C3:  MOVWF  78
01C4:  CLRF   7A
01C5:  BTFSC  03.0
01C6:  INCF   7A,F
01C7:  MOVF   78,W
01C8:  MOVWF  04
01C9:  BCF    03.7
01CA:  BTFSC  7A.0
01CB:  BSF    03.7
01CC:  INCF   04,F
01CD:  MOVF   00,W
01CE:  MOVWF  67
01CF:  DECF   04,F
01D0:  MOVF   00,W
01D1:  MOVWF  66
01D2:  MOVLW  04
01D3:  ADDWF  66,W
01D4:  MOVWF  04
01D5:  BCF    03.7
01D6:  BTFSC  67.0
01D7:  BSF    03.7
01D8:  CLRF   00
....................          } 
01D9:  INCF   63,F
01DA:  GOTO   134
....................       } 
....................     restart_wdt(); 
01DB:  CLRWDT
....................     sleep(); 
01DC:  SLEEP
....................      
....................     PROC_POST(WakeUpTask); 
01DD:  MOVLW  01
01DE:  MOVWF  50
01DF:  GOTO   133
....................    } 
.................... } 
.................... void ButtonProcess(struct button_stat* p_butt) 
01E0:  SLEEP
.................... { 
....................    unsigned int16 i; 
....................    static enum start_button_state{STATE_1, STATE_2, STATE_3, STATE_4}state = STATE_1; 
....................     
....................          switch(state) 
....................          { 
....................             case STATE_1: 
....................                if(ButtonSignal(p_butt->p_perm)) 
....................                   { 
....................                      state = STATE_2; 
....................                   } 
....................                break; 
....................             case STATE_2: 
....................                 StarterState_1(); 
....................                if(ButtonSignal(p_butt->p_perm)) 
....................                   { 
....................                      state = STATE_3; 
....................                   } 
....................                break; 
....................             case STATE_3: 
....................                StarterState_2(); 
....................                if(ButtonSignal(p_butt->p_perm)) 
....................                { 
....................                   if(BREAKS_PRESSED && LAMP_ON) 
....................                   { 
....................                         delay_ms(10); 
....................                         state = STATE_4; 
....................                         break; 
....................                   } 
....................                   else 
....................                   { 
....................                      StartButtonInit(); 
....................                      state= STATE_1; 
....................                      break; 
....................                   } 
....................                } 
....................                break; 
....................             case STATE_4: 
....................                StarterState_5(); 
....................                i = 0; 
....................                while(BUTTON_PRESSED) 
....................                { 
....................                   i++; 
....................                   if(i >= 400) 
....................                      i = 399; 
....................                   delay_ms(10); 
....................                } 
....................                for(; i < 400; i++) 
....................                { 
....................                   i++; 
....................                   delay_ms(10); 
....................                   if(!LAMP_ON) 
....................                   { 
....................                      StarterState_2(); //this line added at revision 1.0 The trasission must be instantaneous 
....................                      state = STATE_3; 
....................                      i = 0; 
....................                      break; 
....................                   } 
....................                } 
....................                StarterState_2(); //this line added at revision 1.0s //The trasission must be instantaneous 
....................                state = STATE_3; 
....................                break;    
....................          } 
....................          if(!BUTTON_PRESSED) 
....................          { 
....................             p_butt->perm = 1; 
....................          } 
.................... } 
.................... void ChipInit(void) 
.................... { 
....................    setup_oscillator(OSC_4MHZ); 
*
003B:  BSF    03.5
003C:  BSF    0E.3
....................    OPTION &= (~(1 << 7)); 
003D:  BSF    03.6
003E:  BCF    01.7
....................    StartButtonInit(); 
....................    SETUP_CCP1(CCP_OFF); 
*
0057:  MOVLW  F0
0058:  ANDWF  17,F
....................    ext_int_edge(0, H_TO_L); 
0059:  BSF    03.5
005A:  BCF    01.6
....................    ENABLE_INTERRUPTS(INT_EXT_H2L); 
005B:  BCF    03.5
005C:  BSF    0B.4
005D:  BSF    03.5
005E:  BCF    01.6
....................    ENABLE_INTERRUPTS(GLOBAL); 
005F:  MOVLW  C0
0060:  BCF    03.5
0061:  IORWF  0B,F
....................    setup_wdt(WDT_2304MS); 
0062:  MOVLW  0F
0063:  MOVWF  77
0064:  CLRF   01
0065:  MOVLW  81
0066:  MOVWF  04
0067:  BCF    03.7
0068:  MOVF   00,W
0069:  ANDLW  F0
006A:  IORLW  07
006B:  MOVWF  00
006C:  CLRWDT
006D:  MOVF   00,W
006E:  ANDLW  F7
006F:  BTFSC  77.3
0070:  ANDLW  F0
0071:  IORWF  77,W
0072:  MOVWF  00
0073:  GOTO   117 (RETURN)
....................    
.................... }   
....................  
.................... void GoSleep() 
.................... { 
....................    set_tris_a(0xFF);  
....................    set_tris_b(0xFF); 
....................    sleep(); 
.................... } 
....................  
....................  
.................... #include <16f628A.h> 
.................... //////////// Standard Header file for the PIC16F628A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F628A 
....................  
.................... #list 
....................  
.................... #include "start_button.h" 
.................... #IFNDEF _START_BUTTON_H_ 
.................... #DEFINE _START_BUTTON_H_ 
.................... //#include "start_button_conf.h" 
.................... #define DEBOUNCE_TIME         30             //milli secconds 
....................  
.................... /*Macros*/ 
.................... #define on(x)                 output_high(x) 
.................... #define off(x)                output_low(x) 
.................... #define BUTTON_PRESSED        (!input(BUTTON)) 
.................... #define BREAKS_PRESSED        (input(BREAKS)) 
.................... #define LAMP_ON               (input(CHARGE)) 
.................... #define MS_500                ((unsigned int16)1953) 
....................  
.................... #define WAITING               1 
.................... #define IDLE                  0 
....................  
.................... typedef int(*func_type)(void); 
....................  
.................... typedef struct process_data 
.................... { 
....................    unsigned char* name; 
....................    func_type func; 
....................    int8 called; 
....................    struct process_data* p_process; 
.................... }process_data_t; 
....................  
....................  
.................... struct button_stat 
....................    { 
....................       unsigned char perm; 
....................       unsigned char* p_perm; 
....................    }; 
....................     
.................... typedef struct timer { 
....................    unsigned int16 count; 
.................... }timer; 
....................  
....................  
....................   
....................  
....................  
.................... typedef struct processes 
.................... { 
....................    process_data_t* p_proc[5]; 
.................... }proc_queue; 
....................  
.................... extern int proc_number; 
.................... extern proc_queue proc_list; 
....................  
....................  
.................... #define THREAD(x)    void THREAD_##x(void) 
....................  
.................... #define NEW_PROC(x)  process_data_t proc_##x = {#x, &THREAD_##x, 0, 0} 
....................                        
.................... #define CALL_PROC(x) proc_##x.func() 
....................  
.................... #define PROC_INIT(x) proc_list.p_proc[proc_number++] = &proc_##x   
....................  
.................... #define PROC_POST(x) proc_##x.called = WAITING 
....................  
....................  
....................  
.................... /*Function definitions*/ 
.................... void StartButtonInit(void); 
.................... void StarterState_1(void); 
.................... void StarterState_2(void); 
.................... void StarterState_5(void); 
.................... unsigned char ButtonSignal(unsigned char* perm); 
.................... void ProcInit(void); 
.................... #ENDIF 
....................  
.................... #include "start_button_conf.h" 
.................... #IFNDEF _START_BUTTON_CONF_H_ 
.................... #DEFINE _START_BUTTON_CONF_H_ 
....................  
.................... /*input signals*/ 
.................... #define IMMO                   
.................... #define BUTTON                PIN_B0 
.................... #define BREAKS                PIN_A3 
.................... #define CHARGE                PIN_A2 
.................... #define SYS_CLK_OUTPUT        PIN_A6 
....................  
.................... /*output signals*/ 
.................... #define CONTACT_LED           PIN_B4 
.................... #define STARTER_LED           PIN_B5 
.................... #define IGN1                  PIN_A1 
.................... #define IGN2                  PIN_A0 
.................... #define ACC                   PIN_B6 
.................... #define STARTER               PIN_B7 
....................  
.................... #define T1SYNC                (1 << 2) 
.................... #define T1OSCEN               (1 << 3) 
.................... #define TMR1CS                (1 << 1) 
.................... #define TMR1ON                (1) 
....................  
....................  
.................... #ENDIF 
....................  
.................... #use delay(clock=4M) 
....................  
.................... static timer sys_counter; 
.................... int proc_number = 0; 
....................  
.................... proc_queue proc_list = {0,0,0,0,0}; 
....................  
.................... void SetSysTimer(unsigned int16 count) 
.................... { 
....................    sys_counter.count = count; 
.................... } 
....................  
.................... unsigned int16 GetSysTimer(void) 
.................... { 
....................    return sys_counter.count; 
.................... } 
.................... void StartButtonInit(void) 
.................... { 
....................    off(STARTER); 
*
003F:  BCF    03.6
0040:  BCF    06.7
0041:  BCF    03.5
0042:  BCF    06.7
....................    off(IGN1); 
0043:  BSF    03.5
0044:  BCF    05.1
0045:  BCF    03.5
0046:  BCF    05.1
....................    off(IGN2); 
0047:  BSF    03.5
0048:  BCF    05.0
0049:  BCF    03.5
004A:  BCF    05.0
....................    off(ACC); 
004B:  BSF    03.5
004C:  BCF    06.6
004D:  BCF    03.5
004E:  BCF    06.6
....................    off(CONTACT_LED); 
004F:  BSF    03.5
0050:  BCF    06.4
0051:  BCF    03.5
0052:  BCF    06.4
....................    off(STARTER_LED); 
0053:  BSF    03.5
0054:  BCF    06.5
0055:  BCF    03.5
0056:  BCF    06.5
.................... } 
....................  
.................... void StarterState_1(void) 
.................... { 
....................    on(ACC); 
....................    off(IGN1); 
....................    off(IGN2); 
....................    off(STARTER); 
.................... } 
....................  
.................... void StarterState_2(void) 
.................... { 
....................    on(ACC); 
....................    on(IGN1); 
....................    on(IGN2); 
....................    off(STARTER); 
.................... } 
....................  
.................... void StarterState_5(void) 
.................... { 
....................    on(ACC); 
....................    on(IGN1); 
....................    off(IGN2); 
....................    on(STARTER); 
.................... } 
....................  
.................... unsigned char ButtonSignal(unsigned char* perm) 
.................... { 
....................    if(BUTTON_PRESSED && *perm == 1) 
....................    { 
....................       delay_ms(DEBOUNCE_TIME); 
....................       if(BUTTON_PRESSED) 
....................       { 
....................          *perm = 0; 
....................          return 1; 
....................       } 
....................       else  
....................          return 0; 
....................    } 
....................    else 
....................       return 0; 
.................... } 
....................  
....................  
.................... void ProcInit(void) 
.................... { 
....................     
.................... } 
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 2173   NOWDT PUT RC MCLR BROWNOUT NOLVP NOCPD NOPROTECT
