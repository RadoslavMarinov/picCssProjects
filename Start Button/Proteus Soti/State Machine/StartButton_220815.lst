CCS PCM C Compiler, Version 5.025, 5967               23-рту-15 13:09

               Filename:   D:\Projects\Start Button\Proteus Soti\State Machine\StartButton_220815.lst

               ROM used:   316 words (15%)
                           Largest free fragment is 1732
               RAM used:   7 (3%) at main() level
                           10 (4%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   097
0003:  NOP
.................... #include <16f628A.h> 
.................... //////////// Standard Header file for the PIC16F628A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F628A 
*
0134:  BSF    0A.0
0135:  BCF    0A.1
0136:  BCF    0A.2
0137:  ADDWF  02,F
0138:  GOTO   0AC
0139:  GOTO   0BC
013A:  GOTO   0CC
013B:  GOTO   117
....................  
.................... #list 
....................  
.................... #fuses INTRC_IO, NOWDT, NOMCLR, NOPROTECT 
.................... #device *=16 
.................... #use delay(clock=4M) 
*
0033:  MOVLW  24
0034:  MOVWF  04
0035:  BCF    03.7
0036:  MOVF   00,W
0037:  BTFSC  03.2
0038:  GOTO   047
0039:  MOVLW  01
003A:  MOVWF  78
003B:  CLRF   77
003C:  DECFSZ 77,F
003D:  GOTO   03C
003E:  DECFSZ 78,F
003F:  GOTO   03B
0040:  MOVLW  4A
0041:  MOVWF  77
0042:  DECFSZ 77,F
0043:  GOTO   042
0044:  GOTO   045
0045:  DECFSZ 00,F
0046:  GOTO   039
0047:  RETURN
.................... #use rs232(baud=9600, rcv=PIN_B0) 
....................  
.................... #define CONTACT_LED           PIN_A7 
.................... #define STARTER_LED           PIN_A6 
....................  
.................... #define IMMO                  PIN_B0 
.................... #define BUTTON                PIN_B5 
....................  
.................... #define IGN1                  PIN_A1 
.................... #define IGN2                  PIN_A0 
.................... #define ACC                   PIN_B6 
.................... #define STARTER               PIN_B7 
....................  
.................... #define BREAKS                PIN_B3 
.................... #define DINAMO                PIN_B2 
.................... #define STARTER_ON_SECS(x)    (x*100)     //resolution 10ms      
....................  
.................... #byte OPTION = 0x181 
....................  
.................... //#define OPTION       (*((unsigned char *) 0x181)) 
....................  
.................... #define BUTTON_PRESSED        (!(input(BUTTON))) 
.................... #define IMMO_IN               (input(IMMO)) 
.................... #define BREAKS_ON             (input(BREAKS)) 
.................... #define DINAMO_LAMP_IS_OFF    (!input(DINAMO)) 
....................  
.................... #define AFTER_PRESS        45 
.................... #define DEBOUNCE_TIME      20 
.................... #define BEFORE_START_DELAY 20 
....................  
.................... void chip_init(void); 
.................... void starter_state_1(void); 
.................... void starter_state_2(void); 
.................... void starter_state_3(void); 
.................... void starter_state_2(void); 
.................... void starter_state_5(void); 
.................... unsigned char button_signal(void); 
....................  
.................... unsigned char button_permition_flag = 1; 
....................  
.................... void main(void) 
*
0097:  MOVF   03,W
0098:  ANDLW  1F
0099:  MOVWF  03
009A:  BSF    03.5
009B:  BSF    0E.3
009C:  BCF    05.0
009D:  BCF    03.5
009E:  BSF    05.0
009F:  MOVLW  01
00A0:  MOVWF  20
00A1:  MOVLW  07
00A2:  MOVWF  1F
00A3:  BCF    03.7
00A4:  CLRF   21
.................... { 
.................... enum {LOGIC_STATE_0, LOGIC_STATE_1, LOGIC_STATE_2, LOGIC_STATE_3, LOGIC_STATE_4, LOGIC_STATE_5}state_maschine = LOGIC_STATE_0; 
....................    chip_init(); 
00A5:  GOTO   004
....................    while(TRUE) 
....................    { 
....................       switch (state_maschine) 
00A6:  MOVF   21,W
00A7:  ADDLW  FC
00A8:  BTFSC  03.0
00A9:  GOTO   132
00AA:  ADDLW  04
00AB:  GOTO   134
....................       { 
....................  
....................          case LOGIC_STATE_0: 
....................             starter_state_3(); 
00AC:  GOTO   022
....................             if(button_signal()) 
00AD:  CALL   048
00AE:  MOVF   78,F
00AF:  BTFSC  03.2
00B0:  GOTO   0B4
....................             { 
....................                state_maschine = LOGIC_STATE_1; 
00B1:  MOVLW  01
00B2:  MOVWF  21
....................             } 
00B3:  GOTO   0BB
....................             else 
....................             { 
....................                if(!BUTTON_PRESSED) 
00B4:  BSF    03.5
00B5:  BSF    06.5
00B6:  BCF    03.5
00B7:  BTFSS  06.5
00B8:  GOTO   0BB
....................                   button_permition_flag = 1; 
00B9:  MOVLW  01
00BA:  MOVWF  20
....................             } 
....................             break; 
00BB:  GOTO   132
.................... ///////////////////////////////////////////////////////////////////////////////             
....................          case LOGIC_STATE_1: 
....................             starter_state_1(); 
00BC:  GOTO   064
....................             if(button_signal()) 
00BD:  CALL   048
00BE:  MOVF   78,F
00BF:  BTFSC  03.2
00C0:  GOTO   0C4
....................             { 
....................                state_maschine = LOGIC_STATE_2; 
00C1:  MOVLW  02
00C2:  MOVWF  21
....................             } 
00C3:  GOTO   0CB
....................             else 
....................             { 
....................                if(!BUTTON_PRESSED) 
00C4:  BSF    03.5
00C5:  BSF    06.5
00C6:  BCF    03.5
00C7:  BTFSS  06.5
00C8:  GOTO   0CB
....................                   button_permition_flag = 1; 
00C9:  MOVLW  01
00CA:  MOVWF  20
....................             } 
....................             break; 
00CB:  GOTO   132
....................        
.................... ///////////////////////////////////////////////////////////////////////////////            
....................          case LOGIC_STATE_2: 
....................             starter_state_2(); 
00CC:  CALL   075
....................             if(!BREAKS_ON && button_signal()) 
00CD:  BSF    03.5
00CE:  BSF    06.3
00CF:  BCF    03.5
00D0:  BTFSC  06.3
00D1:  GOTO   0D8
00D2:  CALL   048
00D3:  MOVF   78,F
00D4:  BTFSC  03.2
00D5:  GOTO   0D8
....................             { 
....................                state_maschine = LOGIC_STATE_0; 
00D6:  CLRF   21
....................             } 
00D7:  GOTO   116
....................             else if(BREAKS_ON && button_signal() && (!DINAMO_LAMP_IS_OFF)) 
00D8:  BSF    03.5
00D9:  BSF    06.3
00DA:  BCF    03.5
00DB:  BTFSS  06.3
00DC:  GOTO   10F
00DD:  CALL   048
00DE:  MOVF   78,F
00DF:  BTFSC  03.2
00E0:  GOTO   10F
00E1:  BSF    03.5
00E2:  BSF    06.2
00E3:  BCF    03.5
00E4:  BTFSS  06.2
00E5:  GOTO   10F
....................             { 
....................                unsigned int16 time = 0; 
00E6:  CLRF   23
00E7:  CLRF   22
....................                delay_ms(BEFORE_START_DELAY); 
00E8:  MOVLW  14
00E9:  MOVWF  24
00EA:  CALL   033
....................                starter_state_5();   //1 1 0 1 
00EB:  GOTO   086
....................                while(time < STARTER_ON_SECS(4)) 
00EC:  MOVF   23,W
00ED:  SUBLW  01
00EE:  BTFSS  03.0
00EF:  GOTO   102
00F0:  BTFSS  03.2
00F1:  GOTO   0F6
00F2:  MOVF   22,W
00F3:  SUBLW  8F
00F4:  BTFSS  03.0
00F5:  GOTO   102
....................                { 
....................                   time++; 
00F6:  INCF   22,F
00F7:  BTFSC  03.2
00F8:  INCF   23,F
....................                   delay_ms(10); 
00F9:  MOVLW  0A
00FA:  MOVWF  24
00FB:  CALL   033
....................                   if(DINAMO_LAMP_IS_OFF) 
00FC:  BSF    03.5
00FD:  BSF    06.2
00FE:  BCF    03.5
00FF:  BTFSS  06.2
....................                   { 
....................                      break; 
0100:  GOTO   102
....................                   }                  
0101:  GOTO   0EC
....................                } 
....................                while(BUTTON_PRESSED) 
0102:  BSF    03.5
0103:  BSF    06.5
0104:  BCF    03.5
0105:  BTFSS  06.5
0106:  GOTO   102
....................                   ; 
....................                if(DINAMO_LAMP_IS_OFF) 
0107:  BSF    03.5
0108:  BSF    06.2
0109:  BCF    03.5
010A:  BTFSC  06.2
010B:  GOTO   10E
....................                   state_maschine = LOGIC_STATE_3; 
010C:  MOVLW  03
010D:  MOVWF  21
....................             } 
010E:  GOTO   116
....................             else 
....................             { 
....................                if(!BUTTON_PRESSED) 
010F:  BSF    03.5
0110:  BSF    06.5
0111:  BCF    03.5
0112:  BTFSS  06.5
0113:  GOTO   116
....................                   button_permition_flag = 1; 
0114:  MOVLW  01
0115:  MOVWF  20
....................             } 
....................             break; 
0116:  GOTO   132
.................... ///////////////////////////////////////////////////////////////////////////////          
....................          case LOGIC_STATE_3: 
....................             starter_state_2();      //1 1 1 0 
0117:  CALL   075
....................             if(!DINAMO_LAMP_IS_OFF) 
0118:  BSF    03.5
0119:  BSF    06.2
011A:  BCF    03.5
011B:  BTFSS  06.2
011C:  GOTO   120
....................             { 
....................                state_maschine = LOGIC_STATE_2; 
011D:  MOVLW  02
011E:  MOVWF  21
....................                break; 
011F:  GOTO   132
....................             } 
....................             if(BREAKS_ON && button_signal()) 
0120:  BSF    03.5
0121:  BSF    06.3
0122:  BCF    03.5
0123:  BTFSS  06.3
0124:  GOTO   12B
0125:  CALL   048
0126:  MOVF   78,F
0127:  BTFSC  03.2
0128:  GOTO   12B
....................             { 
....................                state_maschine = LOGIC_STATE_0; 
0129:  CLRF   21
....................             } 
012A:  GOTO   132
....................             else 
....................             { 
....................                if(!BUTTON_PRESSED) 
012B:  BSF    03.5
012C:  BSF    06.5
012D:  BCF    03.5
012E:  BTFSS  06.5
012F:  GOTO   132
....................                   button_permition_flag = 1; 
0130:  MOVLW  01
0131:  MOVWF  20
....................             } 
....................             break; 
.................... /////////////////////////////////////////////////////////////////////////////// 
....................       } 
0132:  GOTO   0A6
....................    } 
.................... } 
....................  
0133:  SLEEP
....................  
....................  
.................... void chip_init(void) 
.................... { 
....................    output_low(STARTER); 
*
0004:  BSF    03.5
0005:  BCF    06.7
0006:  BCF    03.5
0007:  BCF    06.7
....................    output_low(IGN1); 
0008:  BSF    03.5
0009:  BCF    05.1
000A:  BCF    03.5
000B:  BCF    05.1
....................    output_low(IGN2); 
000C:  BSF    03.5
000D:  BCF    05.0
000E:  BCF    03.5
000F:  BCF    05.0
....................    output_low(ACC); 
0010:  BSF    03.5
0011:  BCF    06.6
0012:  BCF    03.5
0013:  BCF    06.6
....................    output_low(CONTACT_LED); 
0014:  BSF    03.5
0015:  BCF    05.7
0016:  BCF    03.5
0017:  BCF    05.7
....................    output_low(STARTER_LED); 
0018:  BSF    03.5
0019:  BCF    05.6
001A:  BCF    03.5
001B:  BCF    05.6
....................    OPTION &= (~(1 << 7)); 
001C:  BSF    03.5
001D:  BSF    03.6
001E:  BCF    01.7
001F:  BCF    03.5
0020:  BCF    03.6
0021:  GOTO   0A6 (RETURN)
.................... } 
....................  
.................... void starter_state_1(void) 
.................... { 
....................    output_high(ACC); 
*
0064:  BSF    03.5
0065:  BCF    06.6
0066:  BCF    03.5
0067:  BSF    06.6
....................    output_low(IGN1); 
0068:  BSF    03.5
0069:  BCF    05.1
006A:  BCF    03.5
006B:  BCF    05.1
....................    output_low(IGN2); 
006C:  BSF    03.5
006D:  BCF    05.0
006E:  BCF    03.5
006F:  BCF    05.0
....................    output_low(STARTER); 
0070:  BSF    03.5
0071:  BCF    06.7
0072:  BCF    03.5
0073:  BCF    06.7
0074:  GOTO   0BD (RETURN)
.................... } 
....................  
.................... void starter_state_2(void) 
.................... { 
....................    output_high(ACC); 
0075:  BSF    03.5
0076:  BCF    06.6
0077:  BCF    03.5
0078:  BSF    06.6
....................    output_high(IGN1); 
0079:  BSF    03.5
007A:  BCF    05.1
007B:  BCF    03.5
007C:  BSF    05.1
....................    output_high(IGN2); 
007D:  BSF    03.5
007E:  BCF    05.0
007F:  BCF    03.5
0080:  BSF    05.0
....................    output_low(STARTER); 
0081:  BSF    03.5
0082:  BCF    06.7
0083:  BCF    03.5
0084:  BCF    06.7
0085:  RETURN
.................... } 
....................  
.................... void starter_state_3(void) 
.................... { 
....................    output_low(ACC); 
*
0022:  BSF    03.5
0023:  BCF    06.6
0024:  BCF    03.5
0025:  BCF    06.6
....................    output_low(IGN1); 
0026:  BSF    03.5
0027:  BCF    05.1
0028:  BCF    03.5
0029:  BCF    05.1
....................    output_low(IGN2); 
002A:  BSF    03.5
002B:  BCF    05.0
002C:  BCF    03.5
002D:  BCF    05.0
....................    output_low(STARTER); 
002E:  BSF    03.5
002F:  BCF    06.7
0030:  BCF    03.5
0031:  BCF    06.7
0032:  GOTO   0AD (RETURN)
.................... } 
....................  
.................... void starter_state_5(void) 
.................... { 
....................    output_high(ACC); 
*
0086:  BSF    03.5
0087:  BCF    06.6
0088:  BCF    03.5
0089:  BSF    06.6
....................    output_high(IGN1); 
008A:  BSF    03.5
008B:  BCF    05.1
008C:  BCF    03.5
008D:  BSF    05.1
....................    output_low(IGN2); 
008E:  BSF    03.5
008F:  BCF    05.0
0090:  BCF    03.5
0091:  BCF    05.0
....................    output_high(STARTER); 
0092:  BSF    03.5
0093:  BCF    06.7
0094:  BCF    03.5
0095:  BSF    06.7
0096:  GOTO   0EC (RETURN)
.................... } 
....................  
.................... unsigned char button_signal(void) 
.................... { 
....................    if(BUTTON_PRESSED && button_permition_flag) 
*
0048:  BSF    03.5
0049:  BSF    06.5
004A:  BCF    03.5
004B:  BTFSC  06.5
004C:  GOTO   061
004D:  MOVF   20,F
004E:  BTFSC  03.2
004F:  GOTO   061
....................    { 
....................       delay_ms(DEBOUNCE_TIME); 
0050:  MOVLW  14
0051:  MOVWF  24
0052:  CALL   033
....................       if(BUTTON_PRESSED) 
0053:  BSF    03.5
0054:  BSF    06.5
0055:  BCF    03.5
0056:  BTFSC  06.5
0057:  GOTO   05D
....................       { 
....................          button_permition_flag = 0; 
0058:  CLRF   20
....................          return 1; 
0059:  MOVLW  01
005A:  MOVWF  78
005B:  GOTO   063
....................       } 
005C:  GOTO   060
....................       else  
....................          return 0; 
005D:  MOVLW  00
005E:  MOVWF  78
005F:  GOTO   063
....................    } 
0060:  GOTO   063
....................    else 
....................       return 0; 
0061:  MOVLW  00
0062:  MOVWF  78
0063:  RETURN
.................... } 

Configuration Fuses:
   Word  1: 3F50   NOWDT PUT INTRC_IO NOMCLR BROWNOUT NOLVP NOCPD NOPROTECT
