#include <stdint.h>
#include "start_button.h"
#include "start_button_conf.h"


static timer sys_counter = 0;
int proc_number = 0;
static button_stats_t button_stat;

proc_queue proc_list = {0,0,0,0,0};

void SetSysTimer(unsigned int16 count)
{
   sys_counter.count = count;
}

unsigned int16 GetSysTimer(void)
{
   return sys_counter.count;
}
void StartButtonInit(void)
{
   off(STARTER);
   off(IGN1);
   off(IGN2);
   off(ACC);
   off(CONTACT_LED);
   off(STARTER_LED);
}

void StarterState_1(void)
{
   on(ACC);
   off(IGN1);
   off(IGN2);
   off(STARTER);
}

void StarterState_2(void)
{
   on(ACC);
   on(IGN1);
   on(IGN2);
   off(STARTER);
}

void StarterState_5(void)
{
   on(ACC);
   on(IGN1);
   off(IGN2);
   on(STARTER);
}

unsigned char ButtonSignal(unsigned char* perm)
{
   if(BUTTON_PRESSED && *perm == 1)
   {
      delay_ms(DEBOUNCE_TIME);
      if(BUTTON_PRESSED)
      {
         *perm = 0;
         return 1;
      }
      else 
         return 0;
   }
   else
      return 0;
}

void ButtonProcess(void)
{
   static uint8_t func_called_first_time = TRUE;
   unsigned int16 i;
   static enum start_button_state{STATE_1, STATE_2, STATE_3, STATE_4}state = STATE_1;
   
   if(func_called_first_time)
   {
      SetSysTimer(0);
   }
   
         switch(state)
         {
            case STATE_1:
               if(ButtonSignal(button_stat.p_perm))
                  {
                     state = STATE_2;
                  }
               if(GetSysTimer() >= STANDBY_TIME)
               break;
            case STATE_2:
                StarterState_1();
               if(ButtonSignal(button_stat.p_perm))
                  {
                     state = STATE_3;
                  }
               break;
            case STATE_3:
               StarterState_2();
               if(ButtonSignal(button_stat.p_perm))
               {
                  if(BREAKS_PRESSED && LAMP_ON)
                  {
                        delay_ms(10);
                        state = STATE_4;
                        break;
                  }
                  else
                  {
                     StartButtonInit();
                     SetSysTimer(0);
                     state= STATE_1;
                     break;
                  }
               }
               break;
            case STATE_4:
               StarterState_5();
               i = 0;
               while(BUTTON_PRESSED)
               {
                  i++;
                  if(i >= 400)
                     i = 399;
                  delay_ms(10);
               }
               for(; i < 400; i++)
               {
                  i++;
                  delay_ms(10);
                  if(!LAMP_ON)
                  {
                     StarterState_2(); //this line added at revision 1.0 The trasission must be instantaneous
                     state = STATE_3;
                     i = 0;
                     break;
                  }
               }
               StarterState_2(); //this line added at revision 1.0s //The trasission must be instantaneous
               state = STATE_3;
               break;   
         }
         if(!BUTTON_PRESSED)
         {
            button_stat.perm = 1;
         }
         func_called_first_time = FALSE;
}



