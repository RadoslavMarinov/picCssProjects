CCS PCM C Compiler, Version 5.051, 5967               03-ян-16 17:37

               Filename:   D:\Custom Computer Services\Projects\Start Button\CCS\main.lst

               ROM used:   1117 words (55%)
                           Largest free fragment is 931
               RAM used:   110 (49%) at main() level
                           117 (52%) worst case
               Stack used: 5 locations (3 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2E1
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  BTFSS  0B.4
001B:  GOTO   01E
001C:  BTFSC  0B.1
001D:  GOTO   081
001E:  MOVLW  8C
001F:  MOVWF  04
0020:  BTFSS  00.1
0021:  GOTO   024
0022:  BTFSC  0C.1
0023:  GOTO   0BC
0024:  MOVF   22,W
0025:  MOVWF  04
0026:  MOVF   23,W
0027:  MOVWF  77
0028:  MOVF   24,W
0029:  MOVWF  78
002A:  MOVF   25,W
002B:  MOVWF  79
002C:  MOVF   26,W
002D:  MOVWF  7A
002E:  MOVF   27,W
002F:  MOVWF  0A
0030:  SWAPF  21,W
0031:  MOVWF  03
0032:  SWAPF  7F,F
0033:  SWAPF  7F,W
0034:  RETFIE
.................... #include <16f628A.h> 
.................... //////////// Standard Header file for the PIC16F628A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F628A 
0035:  BCF    0A.0
0036:  BCF    0A.1
0037:  BCF    0A.2
0038:  ADDWF  02,F
0039:  RETLW  4B
003A:  RETLW  65
003B:  RETLW  72
003C:  RETLW  6E
003D:  RETLW  65
003E:  RETLW  6C
003F:  RETLW  20
0040:  RETLW  70
0041:  RETLW  72
0042:  RETLW  6F
0043:  RETLW  62
0044:  RETLW  6C
0045:  RETLW  65
0046:  RETLW  6D
0047:  RETLW  20
0048:  RETLW  21
0049:  RETLW  21
004A:  RETLW  21
004B:  RETLW  00
004C:  BCF    0A.0
004D:  BCF    0A.1
004E:  BCF    0A.2
004F:  ADDWF  02,F
0050:  RETLW  68
0051:  RETLW  65
0052:  RETLW  61
0053:  RETLW  64
0054:  RETLW  20
0055:  RETLW  3D
0056:  RETLW  20
0057:  RETLW  25
0058:  RETLW  75
0059:  RETLW  0A
005A:  RETLW  00
005B:  BCF    0A.0
005C:  BCF    0A.1
005D:  BCF    0A.2
005E:  ADDWF  02,F
005F:  RETLW  74
0060:  RETLW  61
0061:  RETLW  69
0062:  RETLW  6C
0063:  RETLW  20
0064:  RETLW  3D
0065:  RETLW  20
0066:  RETLW  25
0067:  RETLW  75
0068:  RETLW  0A
0069:  RETLW  00
006A:  BSF    03.5
006B:  MOVF   3D,W
006C:  CLRF   78
006D:  SUBWF  3C,W
006E:  BTFSC  03.0
006F:  GOTO   073
0070:  MOVF   3C,W
0071:  MOVWF  77
0072:  GOTO   07F
0073:  CLRF   77
0074:  MOVLW  08
0075:  MOVWF  3E
0076:  RLF    3C,F
0077:  RLF    77,F
0078:  MOVF   3D,W
0079:  SUBWF  77,W
007A:  BTFSC  03.0
007B:  MOVWF  77
007C:  RLF    78,F
007D:  DECFSZ 3E,F
007E:  GOTO   076
007F:  BCF    03.5
0080:  RETURN
*
00CE:  INCF   04,F
00CF:  MOVF   00,W
00D0:  MOVWF  0A
00D1:  DECF   04,F
00D2:  MOVF   00,W
00D3:  MOVWF  02
00D4:  RETURN
*
00DB:  MOVF   78,W
00DC:  BTFSC  03.2
00DD:  GOTO   0E3
00DE:  MOVF   77,W
00DF:  MOVWF  00
00E0:  INCF   04,F
00E1:  DECFSZ 78,F
00E2:  GOTO   0DE
*
012A:  MOVF   78,W
012B:  CLRF   28
012C:  BTFSC  0B.7
012D:  BSF    28.7
012E:  BCF    0B.7
012F:  BSF    03.5
0130:  MOVF   31,W
0131:  MOVWF  3C
0132:  MOVLW  64
0133:  MOVWF  3D
0134:  BCF    03.5
0135:  CALL   06A
0136:  BTFSC  28.7
0137:  BSF    0B.7
0138:  MOVF   77,W
0139:  BSF    03.5
013A:  MOVWF  31
013B:  MOVF   78,W
013C:  MOVLW  30
013D:  BTFSS  03.2
013E:  GOTO   146
013F:  BTFSS  32.1
0140:  GOTO   150
0141:  BTFSC  32.3
0142:  GOTO   150
0143:  BTFSC  32.4
0144:  MOVLW  20
0145:  GOTO   149
0146:  BCF    32.3
0147:  BCF    32.4
0148:  BSF    32.0
0149:  ADDWF  78,F
014A:  MOVF   78,W
014B:  BCF    03.5
014C:  BTFSS  0C.4
014D:  GOTO   14C
014E:  MOVWF  19
014F:  BSF    03.5
0150:  BCF    03.5
0151:  CLRF   28
0152:  BTFSC  0B.7
0153:  BSF    28.7
0154:  BCF    0B.7
0155:  BSF    03.5
0156:  MOVF   31,W
0157:  MOVWF  3C
0158:  MOVLW  0A
0159:  MOVWF  3D
015A:  BCF    03.5
015B:  CALL   06A
015C:  BTFSC  28.7
015D:  BSF    0B.7
015E:  MOVF   77,W
015F:  BSF    03.5
0160:  MOVWF  31
0161:  MOVF   78,W
0162:  MOVLW  30
0163:  BTFSS  03.2
0164:  GOTO   16B
0165:  BTFSC  32.3
0166:  GOTO   172
0167:  BTFSS  32.0
0168:  GOTO   172
0169:  BTFSC  32.4
016A:  MOVLW  20
016B:  ADDWF  78,F
016C:  MOVF   78,W
016D:  BCF    03.5
016E:  BTFSS  0C.4
016F:  GOTO   16E
0170:  MOVWF  19
0171:  BSF    03.5
0172:  MOVLW  30
0173:  ADDWF  31,F
0174:  MOVF   31,W
0175:  BCF    03.5
0176:  BTFSS  0C.4
0177:  GOTO   176
0178:  MOVWF  19
0179:  RETURN
*
02B2:  BCF    0A.0
02B3:  BSF    0A.1
02B4:  BCF    0A.2
02B5:  ADDWF  02,F
02B6:  GOTO   1D8
02B7:  GOTO   20E
02B8:  GOTO   229
02B9:  GOTO   250
....................  
.................... #list 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (127) 
.................... #define INT8_MIN  (-128) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (127) 
.................... #define INT_LEAST8_MIN  (-128) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (127) 
.................... #define INT_FAST8_MIN  (-128) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #fuses INTRC_IO, WDT, MCLR, NOPROTECT, BROWNOUT 
.................... #device *=16 
.................... #use delay(clock=4M) 
*
0181:  MOVLW  B9
0182:  MOVWF  04
0183:  BCF    03.7
0184:  MOVF   00,W
0185:  BTFSC  03.2
0186:  GOTO   195
0187:  MOVLW  01
0188:  MOVWF  78
0189:  CLRF   77
018A:  DECFSZ 77,F
018B:  GOTO   18A
018C:  DECFSZ 78,F
018D:  GOTO   189
018E:  MOVLW  4A
018F:  MOVWF  77
0190:  DECFSZ 77,F
0191:  GOTO   190
0192:  GOTO   193
0193:  DECFSZ 00,F
0194:  GOTO   187
0195:  RETURN
.................... #USE RS232 (UART1, BAUD=9600, STREAM=DEBUG_STREAM, ERRORS) 
.................... #byte OPTION = 0x181 
.................... #bit TRMT = getenv("BIT:TRMT") 
....................  
.................... #define DEBUG  
....................  
.................... #include "start_button.h" 
.................... #IFNDEF _START_BUTTON_H_ 
.................... #DEFINE _START_BUTTON_H_ 
....................  
.................... #define DEBOUNCE_TIME         30             //milli secconds 
....................  
.................... /*Macros*/ 
.................... #define on(x)                 output_high(x) 
.................... #define off(x)                output_low(x) 
.................... #define BUTTON_PRESSED        (!input(BUTTON)) 
.................... #define BREAKS_PRESSED        (input(BREAKS)) 
.................... #define LAMP_ON               (input(CHARGE)) 
.................... #define MS_500                ((unsigned int16)1953) 
....................  
.................... typedef struct button_stat 
....................    { 
....................       unsigned char perm; 
....................       unsigned char* p_perm; 
....................    }button_stats_t; 
....................     
....................  
.................... void StartButtonInit(void); 
.................... void StarterState_1(void); 
.................... void StarterState_2(void); 
.................... void StarterState_5(void); 
.................... unsigned char ButtonSignal(void); 
.................... void ProcInit(void); 
.................... void ButtonProcess(void); 
.................... void GoSleep(); 
.................... #ENDIF 
....................  
.................... #include "start_button_conf.h" 
.................... #IFNDEF _START_BUTTON_CONF_H_ 
.................... #DEFINE _START_BUTTON_CONF_H_ 
....................  
.................... /*input signals*/ 
.................... #define IMMO                   
.................... #define BUTTON                PIN_B0 
.................... #define BREAKS                PIN_A3 
.................... #define CHARGE                PIN_A2 
.................... #define SYS_CLK_OUTPUT        PIN_A6 
....................  
.................... /*output signals*/ 
.................... #define CONTACT_LED           PIN_B4 
.................... #define STARTER_LED           PIN_B5 
.................... #define IGN1                  PIN_A1 
.................... #define IGN2                  PIN_A0 
.................... #define ACC                   PIN_B6 
.................... #define STARTER               PIN_B7 
....................  
.................... #define T1SYNC                (1 << 2) 
.................... #define T1OSCEN               (1 << 3) 
.................... #define TMR1CS                (1 << 1) 
.................... #define TMR1ON                (1) 
....................  
.................... #define STANDBY_TIME          60000       //~60sec 
....................  
.................... //Callbacks 
.................... #define BUTTON_FUNC()         ButtonProcess() 
....................  
.................... #ENDIF 
....................  
.................... #include "os.h" 
.................... #IFNDEF _OS_H_ 
.................... #DEFINE _OS_H_ 
....................  
....................  
....................  
.................... typedef struct timer { 
....................    unsigned int16 count; 
.................... }timer; 
....................  
.................... typedef int(*func_type)(void); 
....................  
.................... typedef struct process_data 
.................... { 
....................    unsigned char* name; 
....................    func_type func; 
.................... }process_data_t; 
....................  
.................... typedef struct processes 
.................... { 
....................    process_data_t* p_proc[5]; 
....................    uint8_t head; 
....................    uint8_t tail; 
....................    uint8_t proc_stack; 
.................... }proc_queue; 
....................  
....................  
....................  
.................... #define THREAD(x)    void THREAD_##x(void) 
....................  
.................... #define NEW_PROC(x)  process_data_t proc_##x = {#x, &THREAD_##x} 
....................                        
.................... #define CALL_PROC(x) proc_##x.func() 
....................  
.................... #define PROC_INIT(x) proc_list.p_proc[proc_number++] = &proc_##x   
....................  
.................... #define PROC_POST(x) do{\ 
....................                         proc_list.p_proc[proc_list.head] = &proc_##x;\ 
....................                         proc_list.head = ((++proc_list.head) % 5);\ 
....................                         proc_list.proc_stack++;\ 
....................                         }while(FALSE); 
....................  
....................  
.................... /*Function definitions*/ 
.................... void OsInit(void); 
.................... void SetSysTimer(unsigned int16 count); 
.................... unsigned int16 GetSysTimer(void); 
....................  
.................... extern proc_queue proc_list; 
....................  
.................... THREAD(SleepTask); 
....................  
.................... #ENDIF 
....................  
.................... #include "os.c" 
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (127) 
.................... #define INT8_MIN  (-128) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (127) 
.................... #define INT_LEAST8_MIN  (-128) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (127) 
.................... #define INT_FAST8_MIN  (-128) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #include "os.h" 
.................... #IFNDEF _OS_H_ 
.................... #DEFINE _OS_H_ 
....................  
....................  
....................  
.................... typedef struct timer { 
....................    unsigned int16 count; 
.................... }timer; 
....................  
.................... typedef int(*func_type)(void); 
....................  
.................... typedef struct process_data 
.................... { 
....................    unsigned char* name; 
....................    func_type func; 
.................... }process_data_t; 
....................  
.................... typedef struct processes 
.................... { 
....................    process_data_t* p_proc[5]; 
....................    uint8_t head; 
....................    uint8_t tail; 
....................    uint8_t proc_stack; 
.................... }proc_queue; 
....................  
....................  
....................  
.................... #define THREAD(x)    void THREAD_##x(void) 
....................  
.................... #define NEW_PROC(x)  process_data_t proc_##x = {#x, &THREAD_##x} 
....................                        
.................... #define CALL_PROC(x) proc_##x.func() 
....................  
.................... #define PROC_INIT(x) proc_list.p_proc[proc_number++] = &proc_##x   
....................  
.................... #define PROC_POST(x) do{\ 
....................                         proc_list.p_proc[proc_list.head] = &proc_##x;\ 
....................                         proc_list.head = ((++proc_list.head) % 5);\ 
....................                         proc_list.proc_stack++;\ 
....................                         }while(FALSE); 
....................  
....................  
.................... /*Function definitions*/ 
.................... void OsInit(void); 
.................... void SetSysTimer(unsigned int16 count); 
.................... unsigned int16 GetSysTimer(void); 
....................  
.................... extern proc_queue proc_list; 
....................  
.................... THREAD(SleepTask); 
....................  
.................... #ENDIF 
....................  
....................  
.................... static timer sys_counter = 0; 
*
02F8:  CLRF   37
02F9:  CLRF   38
.................... proc_queue proc_list; 
....................  
....................  
.................... void OsInit(void) 
.................... { 
....................    memset(&proc_list, 0, sizeof(proc_list)); 
*
00D5:  MOVLW  2A
00D6:  MOVWF  04
00D7:  BCF    03.7
00D8:  CLRF   77
00D9:  MOVLW  0D
00DA:  MOVWF  78
*
00E3:  GOTO   377 (RETURN)
.................... } 
.................... //Function definitions 
.................... void SetSysTimer(unsigned int16 count) 
.................... { 
....................    sys_counter.count = count; 
*
00B3:  BSF    03.5
00B4:  MOVF   3F,W
00B5:  BCF    03.5
00B6:  MOVWF  38
00B7:  BSF    03.5
00B8:  MOVF   3E,W
00B9:  BCF    03.5
00BA:  MOVWF  37
00BB:  RETURN
.................... } 
....................  
.................... unsigned int16 GetSysTimer(void) 
.................... { 
....................    return sys_counter.count; 
*
00AE:  MOVF   37,W
00AF:  MOVWF  78
00B0:  MOVF   38,W
00B1:  MOVWF  79
00B2:  RETURN
.................... } 
....................  
....................  
....................  
....................  
.................... void ChipInit(void); 
....................  
.................... NEW_PROC(SleepTask); 
*
02FA:  MOVLW  53
02FB:  MOVWF  3D
02FC:  MOVLW  6C
02FD:  MOVWF  3E
02FE:  MOVLW  65
02FF:  MOVWF  3F
0300:  MOVWF  40
0301:  MOVLW  70
0302:  MOVWF  41
0303:  MOVLW  54
0304:  MOVWF  42
0305:  MOVLW  61
0306:  MOVWF  43
0307:  MOVLW  73
0308:  MOVWF  44
0309:  MOVLW  6B
030A:  MOVWF  45
030B:  CLRF   46
030C:  CLRF   3A
030D:  MOVLW  3D
030E:  MOVWF  39
030F:  MOVLW  01
0310:  MOVWF  3C
0311:  MOVLW  7A
0312:  MOVWF  3B
.................... THREAD(SleepTask) 
.................... { 
....................    GoSleep(); 
*
017F:  BCF    03.5
0180:  RETURN
.................... } 
....................  
....................  
.................... THREAD(ButtonTask) 
.................... { 
....................    BUTTON_FUNC(); 
*
02BA:  GOTO   1C4
02BB:  RETURN
.................... } 
.................... NEW_PROC(ButtonTask); 
*
0313:  MOVLW  42
0314:  MOVWF  4B
0315:  MOVLW  75
0316:  MOVWF  4C
0317:  MOVLW  74
0318:  MOVWF  4D
0319:  MOVWF  4E
031A:  MOVLW  6F
031B:  MOVWF  4F
031C:  MOVLW  6E
031D:  MOVWF  50
031E:  MOVLW  54
031F:  MOVWF  51
0320:  MOVLW  61
0321:  MOVWF  52
0322:  MOVLW  73
0323:  MOVWF  53
0324:  MOVLW  6B
0325:  MOVWF  54
0326:  CLRF   55
0327:  CLRF   48
0328:  MOVLW  4B
0329:  MOVWF  47
032A:  MOVLW  02
032B:  MOVWF  4A
032C:  MOVLW  BA
032D:  MOVWF  49
....................  
.................... THREAD(WakeUpTask) 
.................... { 
....................    if(restart_cause() == WDT_FROM_SLEEP) 
*
02BC:  MOVF   03,W
02BD:  ANDLW  18
02BE:  BSF    03.5
02BF:  BTFSS  0E.1
02C0:  BSF    0E.0
02C1:  MOVWF  77
02C2:  MOVF   0E,W
02C3:  ANDLW  03
02C4:  IORWF  77,W
02C5:  BSF    0E.0
02C6:  BSF    0E.1
02C7:  BSF    03.3
02C8:  BSF    03.4
02C9:  SUBLW  03
02CA:  BTFSS  03.2
02CB:  GOTO   2D9
....................    { 
....................       output_high(STARTER_LED); 
02CC:  BCF    06.5
02CD:  BCF    03.5
02CE:  BSF    06.5
....................       delay_ms(50); 
02CF:  MOVLW  32
02D0:  BSF    03.5
02D1:  MOVWF  39
02D2:  BCF    03.5
02D3:  CALL   181
....................       output_low(STARTER_LED); 
02D4:  BSF    03.5
02D5:  BCF    06.5
02D6:  BCF    03.5
02D7:  BCF    06.5
02D8:  BSF    03.5
....................    } 
02D9:  BCF    03.5
02DA:  RETURN
.................... } 
.................... NEW_PROC(WakeUpTask); 
*
032E:  MOVLW  57
032F:  MOVWF  5A
0330:  MOVLW  61
0331:  MOVWF  5B
0332:  MOVLW  6B
0333:  MOVWF  5C
0334:  MOVLW  65
0335:  MOVWF  5D
0336:  MOVLW  55
0337:  MOVWF  5E
0338:  MOVLW  70
0339:  MOVWF  5F
033A:  MOVLW  54
033B:  MOVWF  60
033C:  MOVLW  61
033D:  MOVWF  61
033E:  MOVLW  73
033F:  MOVWF  62
0340:  MOVLW  6B
0341:  MOVWF  63
0342:  CLRF   64
0343:  CLRF   57
0344:  MOVLW  5A
0345:  MOVWF  56
0346:  MOVLW  02
0347:  MOVWF  59
0348:  MOVLW  BC
0349:  MOVWF  58
....................  
.................... THREAD(ToggleStarterLed) 
.................... { 
....................    output_toggle(STARTER_LED); 
*
02DB:  BSF    03.5
02DC:  BCF    06.5
02DD:  MOVLW  20
02DE:  BCF    03.5
02DF:  XORWF  06,F
02E0:  RETURN
.................... } 
.................... NEW_PROC(ToggleStarterLed); 
*
034A:  MOVLW  54
034B:  BSF    03.5
034C:  MOVWF  20
034D:  MOVLW  6F
034E:  MOVWF  21
034F:  MOVLW  67
0350:  MOVWF  22
0351:  MOVWF  23
0352:  MOVLW  6C
0353:  MOVWF  24
0354:  MOVLW  65
0355:  MOVWF  25
0356:  MOVLW  53
0357:  MOVWF  26
0358:  MOVLW  74
0359:  MOVWF  27
035A:  MOVLW  61
035B:  MOVWF  28
035C:  MOVLW  72
035D:  MOVWF  29
035E:  MOVLW  74
035F:  MOVWF  2A
0360:  MOVLW  65
0361:  MOVWF  2B
0362:  MOVLW  72
0363:  MOVWF  2C
0364:  MOVLW  4C
0365:  MOVWF  2D
0366:  MOVLW  65
0367:  MOVWF  2E
0368:  MOVLW  64
0369:  MOVWF  2F
036A:  CLRF   30
036B:  BCF    03.5
036C:  CLRF   66
036D:  MOVLW  A0
036E:  MOVWF  65
036F:  MOVLW  02
0370:  MOVWF  68
0371:  MOVLW  DB
0372:  MOVWF  67
....................  
.................... #include "start_button.c" 
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (127) 
.................... #define INT8_MIN  (-128) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (127) 
.................... #define INT_LEAST8_MIN  (-128) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (127) 
.................... #define INT_FAST8_MIN  (-128) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #include "start_button.h" 
.................... #IFNDEF _START_BUTTON_H_ 
.................... #DEFINE _START_BUTTON_H_ 
....................  
.................... #define DEBOUNCE_TIME         30             //milli secconds 
....................  
.................... /*Macros*/ 
.................... #define on(x)                 output_high(x) 
.................... #define off(x)                output_low(x) 
.................... #define BUTTON_PRESSED        (!input(BUTTON)) 
.................... #define BREAKS_PRESSED        (input(BREAKS)) 
.................... #define LAMP_ON               (input(CHARGE)) 
.................... #define MS_500                ((unsigned int16)1953) 
....................  
.................... typedef struct button_stat 
....................    { 
....................       unsigned char perm; 
....................       unsigned char* p_perm; 
....................    }button_stats_t; 
....................     
....................  
.................... void StartButtonInit(void); 
.................... void StarterState_1(void); 
.................... void StarterState_2(void); 
.................... void StarterState_5(void); 
.................... unsigned char ButtonSignal(void); 
.................... void ProcInit(void); 
.................... void ButtonProcess(void); 
.................... void GoSleep(); 
.................... #ENDIF 
....................  
.................... #include "start_button_conf.h" 
.................... #IFNDEF _START_BUTTON_CONF_H_ 
.................... #DEFINE _START_BUTTON_CONF_H_ 
....................  
.................... /*input signals*/ 
.................... #define IMMO                   
.................... #define BUTTON                PIN_B0 
.................... #define BREAKS                PIN_A3 
.................... #define CHARGE                PIN_A2 
.................... #define SYS_CLK_OUTPUT        PIN_A6 
....................  
.................... /*output signals*/ 
.................... #define CONTACT_LED           PIN_B4 
.................... #define STARTER_LED           PIN_B5 
.................... #define IGN1                  PIN_A1 
.................... #define IGN2                  PIN_A0 
.................... #define ACC                   PIN_B6 
.................... #define STARTER               PIN_B7 
....................  
.................... #define T1SYNC                (1 << 2) 
.................... #define T1OSCEN               (1 << 3) 
.................... #define TMR1CS                (1 << 1) 
.................... #define TMR1ON                (1) 
....................  
.................... #define STANDBY_TIME          60000       //~60sec 
....................  
.................... //Callbacks 
.................... #define BUTTON_FUNC()         ButtonProcess() 
....................  
.................... #ENDIF 
....................  
.................... #include "os.h" 
.................... #IFNDEF _OS_H_ 
.................... #DEFINE _OS_H_ 
....................  
....................  
....................  
.................... typedef struct timer { 
....................    unsigned int16 count; 
.................... }timer; 
....................  
.................... typedef int(*func_type)(void); 
....................  
.................... typedef struct process_data 
.................... { 
....................    unsigned char* name; 
....................    func_type func; 
.................... }process_data_t; 
....................  
.................... typedef struct processes 
.................... { 
....................    process_data_t* p_proc[5]; 
....................    uint8_t head; 
....................    uint8_t tail; 
....................    uint8_t proc_stack; 
.................... }proc_queue; 
....................  
....................  
....................  
.................... #define THREAD(x)    void THREAD_##x(void) 
....................  
.................... #define NEW_PROC(x)  process_data_t proc_##x = {#x, &THREAD_##x} 
....................                        
.................... #define CALL_PROC(x) proc_##x.func() 
....................  
.................... #define PROC_INIT(x) proc_list.p_proc[proc_number++] = &proc_##x   
....................  
.................... #define PROC_POST(x) do{\ 
....................                         proc_list.p_proc[proc_list.head] = &proc_##x;\ 
....................                         proc_list.head = ((++proc_list.head) % 5);\ 
....................                         proc_list.proc_stack++;\ 
....................                         }while(FALSE); 
....................  
....................  
.................... /*Function definitions*/ 
.................... void OsInit(void); 
.................... void SetSysTimer(unsigned int16 count); 
.................... unsigned int16 GetSysTimer(void); 
....................  
.................... extern proc_queue proc_list; 
....................  
.................... THREAD(SleepTask); 
....................  
.................... #ENDIF 
....................  
....................  
.................... static button_stats_t button_stat; 
0373:  CLRF   69
0374:  CLRF   6A
0375:  CLRF   6B
....................  
.................... void StartButtonInit(void) 
.................... { 
....................    off(STARTER); 
*
00E4:  BSF    03.5
00E5:  BCF    06.7
00E6:  BCF    03.5
00E7:  BCF    06.7
....................    off(IGN1); 
00E8:  BSF    03.5
00E9:  BCF    05.1
00EA:  BCF    03.5
00EB:  BCF    05.1
....................    off(IGN2); 
00EC:  BSF    03.5
00ED:  BCF    05.0
00EE:  BCF    03.5
00EF:  BCF    05.0
....................    off(ACC); 
00F0:  BSF    03.5
00F1:  BCF    06.6
00F2:  BCF    03.5
00F3:  BCF    06.6
....................    off(CONTACT_LED); 
00F4:  BSF    03.5
00F5:  BCF    06.4
00F6:  BCF    03.5
00F7:  BCF    06.4
....................    off(STARTER_LED); 
00F8:  BSF    03.5
00F9:  BCF    06.5
00FA:  BCF    03.5
00FB:  BCF    06.5
00FC:  RETURN
.................... } 
....................  
.................... void StarterState_1(void) 
.................... { 
....................    on(ACC); 
*
020E:  BSF    03.5
020F:  BCF    06.6
0210:  BCF    03.5
0211:  BSF    06.6
....................    off(IGN1); 
0212:  BSF    03.5
0213:  BCF    05.1
0214:  BCF    03.5
0215:  BCF    05.1
....................    off(IGN2); 
0216:  BSF    03.5
0217:  BCF    05.0
0218:  BCF    03.5
0219:  BCF    05.0
....................    off(STARTER); 
021A:  BSF    03.5
021B:  BCF    06.7
021C:  BCF    03.5
021D:  BCF    06.7
....................    on(STARTER_LED); 
021E:  BSF    03.5
021F:  BCF    06.5
0220:  BCF    03.5
0221:  BSF    06.5
.................... } 
....................  
.................... void StarterState_2(void) 
.................... { 
....................    on(ACC); 
*
01B3:  BSF    03.5
01B4:  BCF    06.6
01B5:  BCF    03.5
01B6:  BSF    06.6
....................    on(IGN1); 
01B7:  BSF    03.5
01B8:  BCF    05.1
01B9:  BCF    03.5
01BA:  BSF    05.1
....................    on(IGN2); 
01BB:  BSF    03.5
01BC:  BCF    05.0
01BD:  BCF    03.5
01BE:  BSF    05.0
....................    off(STARTER); 
01BF:  BSF    03.5
01C0:  BCF    06.7
01C1:  BCF    03.5
01C2:  BCF    06.7
01C3:  RETURN
.................... } 
....................  
.................... void StarterState_5(void) 
.................... { 
....................    on(ACC); 
*
0250:  BSF    03.5
0251:  BCF    06.6
0252:  BCF    03.5
0253:  BSF    06.6
....................    on(IGN1); 
0254:  BSF    03.5
0255:  BCF    05.1
0256:  BCF    03.5
0257:  BSF    05.1
....................    off(IGN2); 
0258:  BSF    03.5
0259:  BCF    05.0
025A:  BCF    03.5
025B:  BCF    05.0
....................    on(STARTER); 
025C:  BSF    03.5
025D:  BCF    06.7
025E:  BCF    03.5
025F:  BSF    06.7
.................... } 
....................  
.................... unsigned char ButtonSignal(void) 
.................... { 
....................    if(BUTTON_PRESSED && button_stat.perm == 1) 
*
0196:  BSF    03.5
0197:  BSF    06.0
0198:  BCF    03.5
0199:  BTFSC  06.0
019A:  GOTO   1B0
019B:  DECFSZ 69,W
019C:  GOTO   1B0
....................    { 
....................       delay_ms(DEBOUNCE_TIME); 
019D:  MOVLW  1E
019E:  BSF    03.5
019F:  MOVWF  39
01A0:  BCF    03.5
01A1:  CALL   181
....................       if(BUTTON_PRESSED) 
01A2:  BSF    03.5
01A3:  BSF    06.0
01A4:  BCF    03.5
01A5:  BTFSC  06.0
01A6:  GOTO   1AC
....................       { 
....................          button_stat.perm = 0; 
01A7:  CLRF   69
....................          return 1; 
01A8:  MOVLW  01
01A9:  MOVWF  78
01AA:  GOTO   1B2
....................       } 
01AB:  GOTO   1AF
....................       else  
....................          return 0; 
01AC:  MOVLW  00
01AD:  MOVWF  78
01AE:  GOTO   1B2
....................    } 
01AF:  GOTO   1B2
....................    else 
....................       return 0; 
01B0:  MOVLW  00
01B1:  MOVWF  78
01B2:  RETURN
.................... } 
....................  
.................... void ButtonProcess(void) 
.................... { 
....................    static uint8_t func_called_first_time = TRUE; 
....................    unsigned int16 i; 
....................    static enum start_button_state{STATE_1, STATE_2, STATE_3, STATE_4}state = STATE_1; 
....................     
....................    if(func_called_first_time) 
*
01C4:  MOVF   6C,F
01C5:  BTFSC  03.2
01C6:  GOTO   1D2
01C7:  CLRF   28
01C8:  BTFSC  0B.7
01C9:  BSF    28.7
01CA:  BCF    0B.7
....................    { 
....................       SetSysTimer(0); 
01CB:  BSF    03.5
01CC:  CLRF   3F
01CD:  CLRF   3E
01CE:  BCF    03.5
01CF:  CALL   0B3
01D0:  BTFSC  28.7
01D1:  BSF    0B.7
....................    } 
....................     
....................          switch(state) 
01D2:  MOVF   6D,W
01D3:  ADDLW  FC
01D4:  BTFSC  03.0
01D5:  GOTO   2A9
01D6:  ADDLW  04
01D7:  GOTO   2B2
....................          { 
....................             case STATE_1: 
....................                if(ButtonSignal()) 
01D8:  CALL   196
01D9:  MOVF   78,F
01DA:  BTFSC  03.2
01DB:  GOTO   1DE
....................                   { 
....................                      state = STATE_2; 
01DC:  MOVLW  01
01DD:  MOVWF  6D
....................                   } 
....................                if(GetSysTimer() >= STANDBY_TIME) 
01DE:  CALL   0AE
01DF:  MOVF   79,W
01E0:  BSF    03.5
01E1:  MOVWF  3A
01E2:  MOVF   78,W
01E3:  MOVWF  39
01E4:  MOVF   3A,W
01E5:  SUBLW  E9
01E6:  BTFSC  03.0
01E7:  GOTO   20C
01E8:  XORLW  FF
01E9:  BTFSS  03.2
01EA:  GOTO   1EF
01EB:  MOVF   39,W
01EC:  SUBLW  5F
01ED:  BTFSC  03.0
01EE:  GOTO   20C
....................                { 
....................                   PROC_POST(SleepTask); 
01EF:  BCF    03.0
01F0:  BCF    03.5
01F1:  RLF    34,W
01F2:  ADDLW  2A
01F3:  MOVWF  04
01F4:  BCF    03.7
01F5:  INCF   04,F
01F6:  CLRF   00
01F7:  DECF   04,F
01F8:  MOVLW  39
01F9:  MOVWF  00
01FA:  INCF   34,F
01FB:  CLRF   28
01FC:  BTFSC  0B.7
01FD:  BSF    28.7
01FE:  BCF    0B.7
01FF:  MOVF   34,W
0200:  BSF    03.5
0201:  MOVWF  3C
0202:  MOVLW  05
0203:  MOVWF  3D
0204:  BCF    03.5
0205:  CALL   06A
0206:  BTFSC  28.7
0207:  BSF    0B.7
0208:  MOVF   77,W
0209:  MOVWF  34
020A:  INCF   36,F
020B:  BSF    03.5
....................                } 
....................                break; 
020C:  BCF    03.5
020D:  GOTO   2A9
....................             case STATE_2: 
....................                 StarterState_1(); 
....................                if(ButtonSignal()) 
*
0222:  CALL   196
0223:  MOVF   78,F
0224:  BTFSC  03.2
0225:  GOTO   228
....................                   { 
....................                      state = STATE_3; 
0226:  MOVLW  02
0227:  MOVWF  6D
....................                   } 
....................                break; 
0228:  GOTO   2A9
....................             case STATE_3: 
....................                StarterState_2(); 
0229:  CALL   1B3
....................                if(ButtonSignal()) 
022A:  CALL   196
022B:  MOVF   78,F
022C:  BTFSC  03.2
022D:  GOTO   24F
....................                { 
....................                   if(BREAKS_PRESSED && LAMP_ON) 
022E:  BSF    03.5
022F:  BSF    05.3
0230:  BCF    03.5
0231:  BTFSS  05.3
0232:  GOTO   241
0233:  BSF    03.5
0234:  BSF    05.2
0235:  BCF    03.5
0236:  BTFSS  05.2
0237:  GOTO   241
....................                   { 
....................                         delay_ms(10); 
0238:  MOVLW  0A
0239:  BSF    03.5
023A:  MOVWF  39
023B:  BCF    03.5
023C:  CALL   181
....................                         state = STATE_4; 
023D:  MOVLW  03
023E:  MOVWF  6D
....................                         break; 
023F:  GOTO   2A9
....................                   } 
0240:  GOTO   24F
....................                   else 
....................                   { 
....................                      StartButtonInit(); 
0241:  CALL   0E4
0242:  CLRF   28
0243:  BTFSC  0B.7
0244:  BSF    28.7
0245:  BCF    0B.7
....................                      SetSysTimer(0); 
0246:  BSF    03.5
0247:  CLRF   3F
0248:  CLRF   3E
0249:  BCF    03.5
024A:  CALL   0B3
024B:  BTFSC  28.7
024C:  BSF    0B.7
....................                      state= STATE_1; 
024D:  CLRF   6D
....................                      break; 
024E:  GOTO   2A9
....................                   } 
....................                } 
....................                break; 
024F:  GOTO   2A9
....................             case STATE_4: 
....................                StarterState_5(); 
....................                i = 0; 
*
0260:  BSF    03.5
0261:  CLRF   38
0262:  CLRF   37
....................                while(BUTTON_PRESSED) 
0263:  BSF    06.0
0264:  BCF    03.5
0265:  BTFSC  06.0
0266:  GOTO   281
....................                { 
....................                   i++; 
0267:  BSF    03.5
0268:  INCF   37,F
0269:  BTFSC  03.2
026A:  INCF   38,F
....................                   if(i >= 400) 
026B:  MOVF   38,W
026C:  SUBLW  00
026D:  BTFSC  03.0
026E:  GOTO   27A
026F:  XORLW  FF
0270:  BTFSS  03.2
0271:  GOTO   276
0272:  MOVF   37,W
0273:  SUBLW  8F
0274:  BTFSC  03.0
0275:  GOTO   27A
....................                      i = 399; 
0276:  MOVLW  01
0277:  MOVWF  38
0278:  MOVLW  8F
0279:  MOVWF  37
....................                   delay_ms(10); 
027A:  MOVLW  0A
027B:  MOVWF  39
027C:  BCF    03.5
027D:  CALL   181
027E:  BSF    03.5
027F:  GOTO   263
0280:  BCF    03.5
....................                } 
....................                for(; i < 400; i++) 
0281:  BSF    03.5
0282:  MOVF   38,W
0283:  SUBLW  01
0284:  BTFSS  03.0
0285:  GOTO   2A5
0286:  BTFSS  03.2
0287:  GOTO   28C
0288:  MOVF   37,W
0289:  SUBLW  8F
028A:  BTFSS  03.0
028B:  GOTO   2A5
....................                { 
....................                   i++; 
028C:  INCF   37,F
028D:  BTFSC  03.2
028E:  INCF   38,F
....................                   delay_ms(10); 
028F:  MOVLW  0A
0290:  MOVWF  39
0291:  BCF    03.5
0292:  CALL   181
....................                   if(!LAMP_ON) 
0293:  BSF    03.5
0294:  BSF    05.2
0295:  BCF    03.5
0296:  BTFSC  05.2
0297:  GOTO   2A0
....................                   { 
....................                      StarterState_2(); //this line added at revision 1.0 The trasission must be instantaneous 
0298:  CALL   1B3
....................                      state = STATE_3; 
0299:  MOVLW  02
029A:  MOVWF  6D
....................                      i = 0; 
029B:  BSF    03.5
029C:  CLRF   38
029D:  CLRF   37
....................                      break; 
029E:  GOTO   2A5
029F:  BCF    03.5
....................                   } 
02A0:  BSF    03.5
02A1:  INCF   37,F
02A2:  BTFSC  03.2
02A3:  INCF   38,F
02A4:  GOTO   282
....................                } 
....................                StarterState_2(); //this line added at revision 1.0s //The trasission must be instantaneous 
02A5:  BCF    03.5
02A6:  CALL   1B3
....................                state = STATE_3; 
02A7:  MOVLW  02
02A8:  MOVWF  6D
....................                break;    
....................          } 
....................          if(!BUTTON_PRESSED) 
02A9:  BSF    03.5
02AA:  BSF    06.0
02AB:  BCF    03.5
02AC:  BTFSS  06.0
02AD:  GOTO   2B0
....................          { 
....................             button_stat.perm = 1; 
02AE:  MOVLW  01
02AF:  MOVWF  69
....................          } 
....................          func_called_first_time = FALSE; 
02B0:  CLRF   6C
02B1:  GOTO   2BB (RETURN)
.................... } 
....................  
.................... void GoSleep() 
.................... { 
....................    set_tris_a(0xFF);  
*
017A:  MOVLW  FF
017B:  BSF    03.5
017C:  MOVWF  05
....................    set_tris_b(0xFF); 
017D:  MOVWF  06
....................    sleep(); 
017E:  SLEEP
.................... } 
....................  
....................  
.................... #INT_EXT 
.................... void ButtISR(void) 
.................... { 
....................    PROC_POST(ToggleStarterLed); 
*
0081:  BCF    03.0
0082:  RLF    34,W
0083:  ADDLW  2A
0084:  MOVWF  04
0085:  BCF    03.7
0086:  INCF   04,F
0087:  CLRF   00
0088:  DECF   04,F
0089:  MOVLW  65
008A:  MOVWF  00
008B:  INCF   34,F
008C:  MOVF   34,W
008D:  BSF    03.5
008E:  MOVWF  3C
008F:  MOVLW  05
0090:  MOVWF  3D
0091:  BCF    03.5
0092:  CALL   06A
0093:  MOVF   77,W
0094:  MOVWF  34
0095:  INCF   36,F
....................    PROC_POST(WakeUpTask); 
0096:  BCF    03.0
0097:  RLF    34,W
0098:  ADDLW  2A
0099:  MOVWF  04
009A:  BCF    03.7
009B:  INCF   04,F
009C:  CLRF   00
009D:  DECF   04,F
009E:  MOVLW  56
009F:  MOVWF  00
00A0:  INCF   34,F
00A1:  MOVF   34,W
00A2:  BSF    03.5
00A3:  MOVWF  3C
00A4:  MOVLW  05
00A5:  MOVWF  3D
00A6:  BCF    03.5
00A7:  CALL   06A
00A8:  MOVF   77,W
00A9:  MOVWF  34
00AA:  INCF   36,F
.................... } 
....................  
00AB:  BCF    0B.1
00AC:  BCF    0A.3
00AD:  GOTO   024
.................... #INT_TIMER2 
.................... void Tmr2Isr(void) 
.................... { 
....................    SetSysTimer(++GetSysTimer()); 
*
00BC:  CALL   0AE
00BD:  INCF   78,F
00BE:  BTFSC  03.2
00BF:  INCF   79,F
00C0:  MOVF   79,W
00C1:  BSF    03.5
00C2:  MOVWF  3D
00C3:  MOVF   78,W
00C4:  MOVWF  3C
00C5:  MOVF   3D,W
00C6:  MOVWF  3F
00C7:  MOVF   3C,W
00C8:  MOVWF  3E
00C9:  BCF    03.5
00CA:  CALL   0B3
00CB:  BCF    0C.1
00CC:  BCF    0A.3
00CD:  GOTO   024
.................... } 
....................  
.................... void main(void) 
*
02E1:  MOVF   03,W
02E2:  ANDLW  1F
02E3:  MOVWF  03
02E4:  BSF    03.5
02E5:  BSF    0E.3
02E6:  BCF    03.5
02E7:  CLRF   29
02E8:  MOVLW  19
02E9:  BSF    03.5
02EA:  MOVWF  19
02EB:  MOVLW  A6
02EC:  MOVWF  18
02ED:  MOVLW  90
02EE:  BCF    03.5
02EF:  MOVWF  18
02F0:  MOVLW  01
02F1:  MOVWF  6C
02F2:  CLRF   6D
02F3:  CLRF   6F
02F4:  CLRF   6E
02F5:  MOVLW  07
02F6:  MOVWF  1F
02F7:  BCF    03.7
.................... { 
....................  
.................... OsInit(); 
*
0376:  GOTO   0D5
.................... ChipInit(); 
0377:  GOTO   0FD
....................  
.................... //PROC_POST(ButtonTask); 
....................    while(TRUE) 
....................    {   
....................       while(proc_list.p_proc[proc_list.tail] != 0) 
0378:  BCF    03.0
0379:  RLF    35,W
037A:  ADDLW  2A
037B:  MOVWF  04
037C:  BCF    03.7
037D:  INCF   04,F
037E:  MOVF   00,W
037F:  BSF    03.5
0380:  MOVWF  32
0381:  DECF   04,F
0382:  MOVF   00,W
0383:  MOVWF  31
0384:  MOVF   31,F
0385:  BTFSS  03.2
0386:  GOTO   38A
0387:  MOVF   32,F
0388:  BTFSC  03.2
0389:  GOTO   459
....................       { 
....................             #IFDEF  DEBUG 
....................                if(proc_list.proc_stack <= 0) 
038A:  BCF    03.5
038B:  MOVF   36,F
038C:  BTFSS  03.2
038D:  GOTO   3A0
....................                   fprintf(DEBUG_STREAM, "Kernel problem !!!"); 
038E:  BSF    03.5
038F:  CLRF   31
0390:  MOVF   31,W
0391:  BCF    03.5
0392:  CALL   035
0393:  BSF    03.5
0394:  INCF   31,F
0395:  MOVWF  77
0396:  BCF    03.5
0397:  BTFSS  0C.4
0398:  GOTO   397
0399:  MOVWF  19
039A:  MOVLW  12
039B:  BSF    03.5
039C:  SUBWF  31,W
039D:  BTFSS  03.2
039E:  GOTO   390
039F:  BCF    03.5
....................                fprintf(DEBUG_STREAM, "%s\n", proc_list.p_proc[proc_list.tail] -> name); 
03A0:  BCF    03.0
03A1:  RLF    35,W
03A2:  ADDLW  2A
03A3:  MOVWF  78
03A4:  CLRF   7A
03A5:  BTFSC  03.0
03A6:  INCF   7A,F
03A7:  MOVF   78,W
03A8:  BSF    03.5
03A9:  MOVWF  31
03AA:  MOVF   7A,W
03AB:  MOVWF  32
03AC:  MOVF   31,W
03AD:  MOVWF  04
03AE:  BCF    03.7
03AF:  BTFSC  32.0
03B0:  BSF    03.7
03B1:  INCF   04,F
03B2:  MOVF   00,W
03B3:  MOVWF  34
03B4:  DECF   04,F
03B5:  MOVF   00,W
03B6:  MOVWF  33
03B7:  MOVWF  04
03B8:  BCF    03.7
03B9:  BTFSC  34.0
03BA:  BSF    03.7
03BB:  INCF   04,F
03BC:  MOVF   00,W
03BD:  MOVWF  36
03BE:  DECF   04,F
03BF:  MOVF   00,W
03C0:  MOVWF  35
03C1:  MOVWF  04
03C2:  BCF    03.7
03C3:  BTFSC  36.0
03C4:  BSF    03.7
03C5:  MOVLW  00
03C6:  IORWF  00,W
03C7:  BTFSC  03.2
03C8:  GOTO   3D1
03C9:  MOVF   00,W
03CA:  BCF    03.5
03CB:  BTFSS  0C.4
03CC:  GOTO   3CB
03CD:  MOVWF  19
03CE:  INCF   04,F
03CF:  BSF    03.5
03D0:  GOTO   3C5
03D1:  MOVLW  0A
03D2:  BCF    03.5
03D3:  BTFSS  0C.4
03D4:  GOTO   3D3
03D5:  MOVWF  19
....................                fprintf(DEBUG_STREAM, "head = %u\n", (uint8_t)proc_list.head); 
03D6:  BSF    03.5
03D7:  CLRF   31
03D8:  MOVF   31,W
03D9:  BCF    03.5
03DA:  CALL   04C
03DB:  BSF    03.5
03DC:  INCF   31,F
03DD:  MOVWF  77
03DE:  BCF    03.5
03DF:  BTFSS  0C.4
03E0:  GOTO   3DF
03E1:  MOVWF  19
03E2:  MOVLW  07
03E3:  BSF    03.5
03E4:  SUBWF  31,W
03E5:  BTFSS  03.2
03E6:  GOTO   3D8
03E7:  BCF    03.5
03E8:  MOVF   34,W
03E9:  BSF    03.5
03EA:  MOVWF  31
03EB:  MOVLW  1B
03EC:  MOVWF  32
03ED:  BCF    03.5
03EE:  CALL   12A
03EF:  MOVLW  0A
03F0:  BTFSS  0C.4
03F1:  GOTO   3F0
03F2:  MOVWF  19
....................                fprintf(DEBUG_STREAM, "tail = %u\n", (uint8_t)proc_list.tail); 
03F3:  BSF    03.5
03F4:  CLRF   31
03F5:  MOVF   31,W
03F6:  BCF    03.5
03F7:  CALL   05B
03F8:  BSF    03.5
03F9:  INCF   31,F
03FA:  MOVWF  77
03FB:  BCF    03.5
03FC:  BTFSS  0C.4
03FD:  GOTO   3FC
03FE:  MOVWF  19
03FF:  MOVLW  07
0400:  BSF    03.5
0401:  SUBWF  31,W
0402:  BTFSS  03.2
0403:  GOTO   3F5
0404:  BCF    03.5
0405:  MOVF   35,W
0406:  BSF    03.5
0407:  MOVWF  31
0408:  MOVLW  1B
0409:  MOVWF  32
040A:  BCF    03.5
040B:  CALL   12A
040C:  MOVLW  0A
040D:  BTFSS  0C.4
040E:  GOTO   40D
040F:  MOVWF  19
....................                while(!TRMT) 
0410:  BSF    03.5
0411:  BTFSS  18.1
0412:  GOTO   411
....................                   ; 
....................             #ENDIF 
....................             proc_list.p_proc[proc_list.tail]->func(); 
0413:  BCF    03.0
0414:  BCF    03.5
0415:  RLF    35,W
0416:  ADDLW  2A
0417:  MOVWF  78
0418:  CLRF   7A
0419:  BTFSC  03.0
041A:  INCF   7A,F
041B:  MOVF   78,W
041C:  BSF    03.5
041D:  MOVWF  31
041E:  MOVF   7A,W
041F:  MOVWF  32
0420:  MOVF   31,W
0421:  MOVWF  04
0422:  BCF    03.7
0423:  BTFSC  32.0
0424:  BSF    03.7
0425:  INCF   04,F
0426:  MOVF   00,W
0427:  MOVWF  34
0428:  DECF   04,F
0429:  MOVF   00,W
042A:  MOVWF  33
042B:  MOVLW  02
042C:  ADDWF  33,W
042D:  MOVWF  78
042E:  MOVF   34,W
042F:  MOVWF  7A
0430:  BTFSC  03.0
0431:  INCF   7A,F
0432:  MOVF   78,W
0433:  MOVWF  35
0434:  MOVF   7A,W
0435:  MOVWF  36
0436:  MOVF   35,W
0437:  MOVWF  04
0438:  BCF    03.7
0439:  BTFSC  36.0
043A:  BSF    03.7
043B:  BCF    03.5
043C:  CALL   0CE
....................             proc_list.proc_stack--; 
043D:  DECF   36,F
....................             proc_list.p_proc[proc_list.tail] = 0; 
043E:  BCF    03.0
043F:  RLF    35,W
0440:  ADDLW  2A
0441:  MOVWF  04
0442:  BCF    03.7
0443:  INCF   04,F
0444:  CLRF   00
0445:  DECF   04,F
0446:  CLRF   00
....................             proc_list.tail = (++proc_list.tail % 5); 
0447:  INCF   35,F
0448:  CLRF   28
0449:  BTFSC  0B.7
044A:  BSF    28.7
044B:  BCF    0B.7
044C:  MOVF   35,W
044D:  BSF    03.5
044E:  MOVWF  3C
044F:  MOVLW  05
0450:  MOVWF  3D
0451:  BCF    03.5
0452:  CALL   06A
0453:  BTFSC  28.7
0454:  BSF    0B.7
0455:  MOVF   77,W
0456:  MOVWF  35
0457:  GOTO   378
0458:  BSF    03.5
....................       } 
....................     restart_wdt(); 
0459:  CLRWDT
045A:  BCF    03.5
045B:  GOTO   378
....................     //PROC_POST(WakeUpTask); 
....................    } 
.................... } 
....................  
045C:  SLEEP
.................... void ChipInit(void) 
.................... { 
....................    setup_oscillator(OSC_4MHZ); 
*
00FD:  BSF    03.5
00FE:  BSF    0E.3
....................    OPTION &= (~(1 << 7)); 
00FF:  BSF    03.6
0100:  BCF    01.7
....................    StartButtonInit(); 
0101:  BCF    03.5
0102:  BCF    03.6
0103:  CALL   0E4
....................    SETUP_CCP1(CCP_OFF); 
0104:  MOVLW  F0
0105:  ANDWF  17,F
....................    ext_int_edge(0, H_TO_L); 
0106:  BSF    03.5
0107:  BCF    01.6
....................    setup_timer_2(T2_DIV_BY_1, 255, 4); 
0108:  MOVLW  18
0109:  MOVWF  78
010A:  IORLW  04
010B:  BCF    03.5
010C:  MOVWF  12
010D:  MOVLW  FF
010E:  BSF    03.5
010F:  MOVWF  12
....................    ENABLE_INTERRUPTS(INT_EXT_H2L); 
0110:  BCF    03.5
0111:  BSF    0B.4
0112:  BSF    03.5
0113:  BCF    01.6
....................    ENABLE_INTERRUPTS(INT_TIMER2); 
0114:  BSF    0C.1
....................    ENABLE_INTERRUPTS(GLOBAL); 
0115:  MOVLW  C0
0116:  BCF    03.5
0117:  IORWF  0B,F
....................    setup_wdt(WDT_2304MS); 
0118:  MOVLW  0F
0119:  MOVWF  77
011A:  CLRF   01
011B:  MOVLW  81
011C:  MOVWF  04
011D:  BCF    03.7
011E:  MOVF   00,W
011F:  ANDLW  F0
0120:  IORLW  07
0121:  MOVWF  00
0122:  CLRWDT
0123:  MOVF   00,W
0124:  ANDLW  F7
0125:  BTFSC  77.3
0126:  ANDLW  F0
0127:  IORWF  77,W
0128:  MOVWF  00
0129:  GOTO   378 (RETURN)
.................... }   
....................  
....................  

Configuration Fuses:
   Word  1: 2174   WDT PUT INTRC_IO MCLR BROWNOUT NOLVP NOCPD NOPROTECT
