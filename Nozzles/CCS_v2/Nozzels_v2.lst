CCS PCM C Compiler, Version 5.025, 5967               28-септ-14 17:22

               Filename:   D:\Projects\Nozzles\CCS_v2\Nozzels_v2.lst

               ROM used:   1559 words (38%)
                           Largest free fragment is 2048
               RAM used:   24 (9%) at main() level
                           75 (29%) worst case
               Stack used: 7 locations (5 in main + 2 for interrupts)
               Stack size: 16

*
0000:  MOVLP  00
0001:  GOTO   5EA
0002:  NOP
*
0004:  CLRF   03
0005:  MOVLP  00
0006:  MOVLB  00
0007:  MOVF   77,W
0008:  MOVWF  20
0009:  MOVF   78,W
000A:  MOVWF  21
000B:  MOVF   79,W
000C:  MOVWF  22
000D:  MOVF   7A,W
000E:  MOVWF  23
000F:  MOVLB  03
0010:  MOVF   11,W
0011:  MOVLB  00
0012:  MOVWF  24
0013:  MOVLB  03
0014:  MOVF   12,W
0015:  MOVLB  00
0016:  MOVWF  25
0017:  MOVLB  03
0018:  MOVF   13,W
0019:  MOVLB  00
001A:  MOVWF  26
001B:  MOVLB  03
001C:  MOVF   14,W
001D:  MOVLB  00
001E:  MOVWF  27
001F:  CLRF   05
0020:  MOVLW  91
0021:  MOVWF  04
0022:  BTFSS  00.0
0023:  GOTO   026
0024:  BTFSC  11.0
0025:  GOTO   043
0026:  BTFSS  0B.3
0027:  GOTO   02A
0028:  BTFSC  0B.0
0029:  GOTO   045
002A:  MOVF   20,W
002B:  MOVWF  77
002C:  MOVF   21,W
002D:  MOVWF  78
002E:  MOVF   22,W
002F:  MOVWF  79
0030:  MOVF   23,W
0031:  MOVWF  7A
0032:  MOVF   24,W
0033:  MOVLB  03
0034:  MOVWF  11
0035:  MOVLB  00
0036:  MOVF   25,W
0037:  MOVLB  03
0038:  MOVWF  12
0039:  MOVLB  00
003A:  MOVF   26,W
003B:  MOVLB  03
003C:  MOVWF  13
003D:  MOVLB  00
003E:  MOVF   27,W
003F:  MOVLB  03
0040:  MOVWF  14
0041:  RETFIE
0042:  MOVLB  00
0043:  MOVLP  00
0044:  GOTO   0AC
0045:  MOVLP  00
0046:  GOTO   137
.................... #include <16F1508.H>  
.................... //////////// Standard Header file for the PIC16F1508 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F1508 
0047:  RETLW  48
0048:  RETLW  65
0049:  RETLW  6C
004A:  RETLW  6C
004B:  RETLW  6F
004C:  RETLW  20
004D:  RETLW  52
004E:  RETLW  69
004F:  RETLW  6B
0050:  RETLW  6F
0051:  RETLW  2E
0052:  RETLW  2E
0053:  RETLW  2E
0054:  RETLW  00
*
005F:  BTFSC  03.1
0060:  GOTO   065
0061:  MOVLW  20
0062:  MOVWF  05
0063:  MOVLW  37
0064:  MOVWF  04
0065:  CLRF   77
0066:  CLRF   78
0067:  CLRF   79
0068:  CLRF   7A
0069:  CLRF   57
006A:  CLRF   58
006B:  CLRF   59
006C:  CLRF   5A
006D:  MOVF   55,W
006E:  IORWF  54,W
006F:  IORWF  53,W
0070:  IORWF  52,W
0071:  BTFSC  03.2
0072:  GOTO   0A3
0073:  MOVLW  20
0074:  MOVWF  5B
0075:  BCF    03.0
0076:  RLF    4E,F
0077:  RLF    4F,F
0078:  RLF    50,F
0079:  RLF    51,F
007A:  RLF    57,F
007B:  RLF    58,F
007C:  RLF    59,F
007D:  RLF    5A,F
007E:  MOVF   55,W
007F:  SUBWF  5A,W
0080:  BTFSS  03.2
0081:  GOTO   08C
0082:  MOVF   54,W
0083:  SUBWF  59,W
0084:  BTFSS  03.2
0085:  GOTO   08C
0086:  MOVF   53,W
0087:  SUBWF  58,W
0088:  BTFSS  03.2
0089:  GOTO   08C
008A:  MOVF   52,W
008B:  SUBWF  57,W
008C:  BTFSS  03.0
008D:  GOTO   09D
008E:  MOVF   52,W
008F:  SUBWF  57,F
0090:  MOVF   53,W
0091:  BTFSS  03.0
0092:  INCFSZ 53,W
0093:  SUBWF  58,F
0094:  MOVF   54,W
0095:  BTFSS  03.0
0096:  INCFSZ 54,W
0097:  SUBWF  59,F
0098:  MOVF   55,W
0099:  BTFSS  03.0
009A:  INCFSZ 55,W
009B:  SUBWF  5A,F
009C:  BSF    03.0
009D:  RLF    77,F
009E:  RLF    78,F
009F:  RLF    79,F
00A0:  RLF    7A,F
00A1:  DECFSZ 5B,F
00A2:  GOTO   075
00A3:  MOVF   57,W
00A4:  MOVWF  00
00A5:  MOVF   58,W
00A6:  MOVWI  W,[FSR0+01]
00A7:  MOVF   59,W
00A8:  MOVWI  W,[FSR0+02]
00A9:  MOVF   5A,W
00AA:  MOVWI  W,[FSR0+03]
00AB:  RETURN
*
022B:  DATA 8C,24
022C:  DATA EE,34
022D:  DATA 74,17
022E:  DATA 2E,17
022F:  DATA 00,00
0230:  DATA 0C,29
0231:  DATA D0,26
0232:  DATA BD,12
0233:  DATA EC,3A
0234:  DATA 00,00
0235:  DATA 8C,26
0236:  DATA 61,3C
0237:  DATA 20,39
0238:  DATA F0,36
0239:  DATA 20,39
023A:  DATA E5,30
023B:  DATA 63,34
023C:  DATA 65,32
023D:  DATA 00,01
023E:  DATA 8C,26
023F:  DATA 69,37
0240:  DATA 20,39
0241:  DATA F0,36
0242:  DATA 20,39
0243:  DATA E5,30
0244:  DATA 63,34
0245:  DATA 65,32
0246:  DATA 00,01
*
038F:  MOVF   0B,W
0390:  BCF    0B.7
0391:  MOVLB  03
0392:  BSF    15.7
0393:  BSF    15.0
0394:  NOP
0395:  NOP
0396:  BTFSC  09.7
0397:  BSF    0B.7
0398:  MOVF   13,W
0399:  ANDLW  7F
039A:  BTFSC  03.2
039B:  GOTO   3D7
039C:  MOVLB  00
039D:  MOVWF  34
039E:  MOVLB  03
039F:  MOVF   11,W
03A0:  MOVLB  00
03A1:  MOVWF  35
03A2:  MOVLB  03
03A3:  MOVF   12,W
03A4:  MOVLB  00
03A5:  MOVWF  36
03A6:  MOVF   34,W
03A7:  MOVWF  3F
03A8:  CALL   342
03A9:  MOVF   35,W
03AA:  MOVLB  03
03AB:  MOVWF  11
03AC:  MOVLB  00
03AD:  MOVF   36,W
03AE:  MOVLB  03
03AF:  MOVWF  12
03B0:  MOVF   0B,W
03B1:  BCF    0B.7
03B2:  BSF    15.7
03B3:  BSF    15.0
03B4:  NOP
03B5:  NOP
03B6:  BTFSC  09.7
03B7:  BSF    0B.7
03B8:  RLF    13,W
03B9:  RLF    14,W
03BA:  ANDLW  7F
03BB:  BTFSC  03.2
03BC:  GOTO   3D7
03BD:  MOVLB  00
03BE:  MOVWF  34
03BF:  MOVLB  03
03C0:  MOVF   11,W
03C1:  MOVLB  00
03C2:  MOVWF  35
03C3:  MOVLB  03
03C4:  MOVF   12,W
03C5:  MOVLB  00
03C6:  MOVWF  36
03C7:  MOVF   34,W
03C8:  MOVWF  3F
03C9:  CALL   342
03CA:  MOVF   35,W
03CB:  MOVLB  03
03CC:  MOVWF  11
03CD:  MOVLB  00
03CE:  MOVF   36,W
03CF:  MOVLB  03
03D0:  MOVWF  12
03D1:  INCF   11,F
03D2:  BTFSC  03.2
03D3:  INCF   12,F
03D4:  MOVLB  00
03D5:  GOTO   38F
03D6:  MOVLB  03
03D7:  MOVLB  00
03D8:  RETURN
*
04AC:  MOVF   0B,W
04AD:  BCF    0B.7
04AE:  MOVLB  03
04AF:  BSF    15.7
04B0:  BSF    15.0
04B1:  NOP
04B2:  NOP
04B3:  BTFSC  09.7
04B4:  BSF    0B.7
04B5:  BTFSC  03.0
04B6:  GOTO   4DD
04B7:  MOVF   13,W
04B8:  ANDLW  7F
04B9:  MOVLB  00
04BA:  MOVWF  34
04BB:  MOVLB  03
04BC:  MOVF   11,W
04BD:  MOVLB  00
04BE:  MOVWF  35
04BF:  MOVLB  03
04C0:  MOVF   12,W
04C1:  MOVLB  00
04C2:  MOVWF  36
04C3:  MOVF   34,W
04C4:  MOVWF  3F
04C5:  CALL   342
04C6:  MOVF   35,W
04C7:  MOVLB  03
04C8:  MOVWF  11
04C9:  MOVLB  00
04CA:  MOVF   36,W
04CB:  MOVLB  03
04CC:  MOVWF  12
04CD:  MOVF   0B,W
04CE:  BCF    0B.7
04CF:  BSF    15.7
04D0:  BSF    15.0
04D1:  NOP
04D2:  NOP
04D3:  BTFSC  09.7
04D4:  BSF    0B.7
04D5:  MOVLB  00
04D6:  DECFSZ 33,F
04D7:  GOTO   4D9
04D8:  GOTO   4DB
04D9:  MOVLB  03
04DA:  GOTO   4DD
04DB:  GOTO   4FB
04DC:  MOVLB  03
04DD:  RLF    13,W
04DE:  RLF    14,W
04DF:  ANDLW  7F
04E0:  MOVLB  00
04E1:  MOVWF  34
04E2:  MOVLB  03
04E3:  MOVF   11,W
04E4:  MOVLB  00
04E5:  MOVWF  35
04E6:  MOVLB  03
04E7:  MOVF   12,W
04E8:  MOVLB  00
04E9:  MOVWF  36
04EA:  MOVF   34,W
04EB:  MOVWF  3F
04EC:  CALL   342
04ED:  MOVF   35,W
04EE:  MOVLB  03
04EF:  MOVWF  11
04F0:  MOVLB  00
04F1:  MOVF   36,W
04F2:  MOVLB  03
04F3:  MOVWF  12
04F4:  INCF   11,F
04F5:  BTFSC  03.2
04F6:  INCF   12,F
04F7:  BCF    03.0
04F8:  MOVLB  00
04F9:  DECFSZ 33,F
04FA:  GOTO   4AC
*
0501:  MOVF   05,W
0502:  MOVWF  3E
0503:  MOVF   04,W
0504:  MOVWF  3D
0505:  SWAPF  34,W
0506:  IORLW  F0
0507:  MOVWF  39
0508:  ADDWF  39,F
0509:  ADDLW  E2
050A:  MOVWF  3A
050B:  ADDLW  32
050C:  MOVWF  3C
050D:  MOVF   34,W
050E:  ANDLW  0F
050F:  ADDWF  3A,F
0510:  ADDWF  3A,F
0511:  ADDWF  3C,F
0512:  ADDLW  E9
0513:  MOVWF  3B
0514:  ADDWF  3B,F
0515:  ADDWF  3B,F
0516:  SWAPF  33,W
0517:  ANDLW  0F
0518:  ADDWF  3B,F
0519:  ADDWF  3C,F
051A:  RLF    3B,F
051B:  RLF    3C,F
051C:  COMF   3C,F
051D:  RLF    3C,F
051E:  MOVF   33,W
051F:  ANDLW  0F
0520:  ADDWF  3C,F
0521:  RLF    39,F
0522:  MOVLW  07
0523:  MOVWF  38
0524:  MOVLW  0A
0525:  ADDWF  3C,F
0526:  DECF   3B,F
0527:  BTFSS  03.0
0528:  GOTO   525
0529:  ADDWF  3B,F
052A:  DECF   3A,F
052B:  BTFSS  03.0
052C:  GOTO   529
052D:  ADDWF  3A,F
052E:  DECF   39,F
052F:  BTFSS  03.0
0530:  GOTO   52D
0531:  ADDWF  39,F
0532:  DECF   38,F
0533:  BTFSS  03.0
0534:  GOTO   531
0535:  MOVLW  20
0536:  MOVWF  05
0537:  MOVLW  18
0538:  MOVWF  04
0539:  MOVLW  07
053A:  ANDWF  3D,W
053B:  BCF    3D.6
053C:  ADDWF  04,F
053D:  MOVLW  00
053E:  ADDWFC 05,F
053F:  MOVF   04,W
0540:  SUBLW  1C
0541:  BTFSS  03.2
0542:  GOTO   547
0543:  MOVF   05,W
0544:  SUBLW  20
0545:  BTFSC  03.2
0546:  BSF    3D.6
0547:  MOVF   00,W
0548:  MOVWF  77
0549:  BTFSS  03.2
054A:  GOTO   553
054B:  BTFSC  3D.6
054C:  GOTO   553
054D:  BTFSC  3D.4
054E:  GOTO   562
054F:  BTFSC  3D.3
0550:  GOTO   553
0551:  MOVLW  20
0552:  GOTO   556
0553:  BSF    3D.3
0554:  BCF    3D.4
0555:  MOVLW  30
0556:  ADDWF  77,F
0557:  MOVF   05,W
0558:  MOVWF  34
0559:  MOVF   04,W
055A:  MOVWF  33
055B:  MOVF   77,W
055C:  MOVWF  3F
055D:  CALL   342
055E:  MOVF   34,W
055F:  MOVWF  05
0560:  MOVF   33,W
0561:  MOVWF  04
0562:  ADDFSR 01,FSR0
0563:  BTFSS  3D.6
0564:  GOTO   53F
*
057E:  MOVF   00,F
057F:  BTFSC  03.2
0580:  GOTO   58E
0581:  MOVF   05,W
0582:  MOVWF  35
0583:  MOVF   04,W
0584:  MOVWF  34
0585:  MOVF   00,W
0586:  MOVWF  3F
0587:  CALL   342
0588:  MOVF   35,W
0589:  MOVWF  05
058A:  MOVF   34,W
058B:  MOVWF  04
058C:  ADDFSR 01,FSR0
058D:  GOTO   57E
....................  
.................... #list 
....................  
.................... #fuses INTRC_IO, NOWDT, NOPROTECT, BROWNOUT, PUT, NOLVP  
.................... #use delay(clock = 16MHZ) 
*
0247:  MOVLW  20
0248:  MOVWF  05
0249:  MOVWF  04
024A:  MOVF   00,W
024B:  BTFSC  03.2
024C:  GOTO   25B
024D:  MOVLW  05
024E:  MOVWF  78
024F:  CLRF   77
0250:  DECFSZ 77,F
0251:  GOTO   250
0252:  DECFSZ 78,F
0253:  GOTO   24F
0254:  MOVLW  2E
0255:  MOVWF  77
0256:  DECFSZ 77,F
0257:  GOTO   256
0258:  GOTO   259
0259:  DECFSZ 00,F
025A:  GOTO   24D
025B:  RETURN
*
0591:  MOVLW  03
0592:  SUBWF  37,F
0593:  BTFSS  03.0
0594:  GOTO   5A0
0595:  MOVLW  20
0596:  MOVWF  05
0597:  MOVLW  17
0598:  MOVWF  04
0599:  MOVF   00,W
059A:  BTFSC  03.2
059B:  GOTO   5A0
059C:  GOTO   59E
059D:  NOP
059E:  DECFSZ 00,F
059F:  GOTO   59D
05A0:  RETURN
....................  
.................... //TRANZISTORS ASSIGNEMT 
.................... #define T1              PIN_C7 
.................... #define T2              PIN_B7 
.................... #define T_ON(x)         output_high(x) 
.................... #define T_OFF(x)        output_low(x) 
.................... //LED ASSIGNEMT 
.................... #define RED_LED         PIN_C4  
.................... #define GREEN_LED       PIN_C3 
.................... #define LED_ON(x)       output_low(x) 
.................... #define LED_OFF(x)      output_high(x) 
.................... //BUTT ASSIGNEMT 
.................... #define UP_BUTT         input(PIN_A5) 
.................... #define DOWN_BUTT       input(PIN_A4) 
.................... #define BUTT_PRESSED(x) (!(x))  
.................... //relay activate output  
.................... #define RELAY_ON()      output_high(PIN_C6) 
.................... #define RELAY_OFF()     output_low(PIN_C6) 
.................... //Limits assignment 
.................... #define MAX_RPM         8000 
.................... #define MIN_RPM         800 
.................... #define RPM_STEP        100 
.................... #define MAX_TIME_ON     10000 
.................... //LCD ASSIGNEMT 
.................... #define LCD_EXTENDED_NEWLINE 
.................... #define LCD_ENABLE_PIN  PIN_C2                                
.................... #define LCD_RS_PIN      PIN_C0                                  
.................... #define LCD_RW_PIN      PIN_C1                                     
.................... #define LCD_DATA4       PIN_B4 
.................... #define LCD_DATA5       PIN_B5                                    
.................... #define LCD_DATA6       PIN_B6                               
.................... #define LCD_DATA7       PIN_A2  
.................... #include  <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
02D0:  BSF    0D.4
....................    output_float(LCD_DATA5); 
02D1:  BSF    0D.5
....................    output_float(LCD_DATA6); 
02D2:  BSF    0D.6
....................    output_float(LCD_DATA7); 
02D3:  BSF    0C.2
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
02D4:  MOVLB  02
02D5:  BSF    0E.1
02D6:  MOVLB  01
02D7:  BCF    0E.1
....................    delay_cycles(1); 
02D8:  NOP
....................    lcd_output_enable(1); 
02D9:  MOVLB  02
02DA:  BSF    0E.2
02DB:  MOVLB  01
02DC:  BCF    0E.2
....................    delay_cycles(1); 
02DD:  NOP
....................    high = lcd_read_nibble(); 
02DE:  MOVLB  00
02DF:  CALL   297
02E0:  MOVF   78,W
02E1:  MOVWF  48
....................        
....................    lcd_output_enable(0); 
02E2:  MOVLB  02
02E3:  BCF    0E.2
02E4:  MOVLB  01
02E5:  BCF    0E.2
....................    delay_cycles(1); 
02E6:  NOP
....................    lcd_output_enable(1); 
02E7:  MOVLB  02
02E8:  BSF    0E.2
02E9:  MOVLB  01
02EA:  BCF    0E.2
....................    delay_us(1); 
02EB:  GOTO   2EC
02EC:  GOTO   2ED
....................    low = lcd_read_nibble(); 
02ED:  MOVLB  00
02EE:  CALL   297
02EF:  MOVF   78,W
02F0:  MOVWF  47
....................        
....................    lcd_output_enable(0); 
02F1:  MOVLB  02
02F2:  BCF    0E.2
02F3:  MOVLB  01
02F4:  BCF    0E.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
02F5:  BCF    0D.4
....................    output_drive(LCD_DATA5); 
02F6:  BCF    0D.5
....................    output_drive(LCD_DATA6); 
02F7:  BCF    0D.6
....................    output_drive(LCD_DATA7); 
02F8:  BCF    0C.2
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
02F9:  MOVLB  00
02FA:  SWAPF  48,W
02FB:  MOVWF  77
02FC:  MOVLW  F0
02FD:  ANDWF  77,F
02FE:  MOVF   77,W
02FF:  IORWF  47,W
0300:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0297:  CLRF   49
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0298:  MOVLB  01
0299:  BSF    0D.4
029A:  MOVLW  00
029B:  MOVLB  00
029C:  BTFSC  0D.4
029D:  MOVLW  01
029E:  IORWF  49,F
....................    n |= input(LCD_DATA5) << 1; 
029F:  MOVLB  01
02A0:  BSF    0D.5
02A1:  MOVLW  00
02A2:  MOVLB  00
02A3:  BTFSC  0D.5
02A4:  MOVLW  01
02A5:  MOVWF  77
02A6:  BCF    03.0
02A7:  RLF    77,F
02A8:  MOVF   77,W
02A9:  IORWF  49,F
....................    n |= input(LCD_DATA6) << 2; 
02AA:  MOVLB  01
02AB:  BSF    0D.6
02AC:  MOVLW  00
02AD:  MOVLB  00
02AE:  BTFSC  0D.6
02AF:  MOVLW  01
02B0:  MOVWF  77
02B1:  RLF    77,F
02B2:  RLF    77,F
02B3:  MOVLW  FC
02B4:  ANDWF  77,F
02B5:  MOVF   77,W
02B6:  IORWF  49,F
....................    n |= input(LCD_DATA7) << 3; 
02B7:  MOVLB  01
02B8:  BSF    0C.2
02B9:  MOVLW  00
02BA:  MOVLB  00
02BB:  BTFSC  0C.2
02BC:  MOVLW  01
02BD:  MOVWF  77
02BE:  RLF    77,F
02BF:  RLF    77,F
02C0:  RLF    77,F
02C1:  MOVLW  F8
02C2:  ANDWF  77,F
02C3:  MOVF   77,W
02C4:  IORWF  49,F
....................     
....................    return(n); 
02C5:  MOVF   49,W
02C6:  MOVWF  78
....................   #else 
02C7:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
025C:  BTFSC  48.0
025D:  GOTO   262
025E:  MOVLB  02
025F:  BCF    0D.4
0260:  GOTO   264
0261:  MOVLB  00
0262:  MOVLB  02
0263:  BSF    0D.4
0264:  MOVLB  01
0265:  BCF    0D.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0266:  MOVLB  00
0267:  BTFSC  48.1
0268:  GOTO   26D
0269:  MOVLB  02
026A:  BCF    0D.5
026B:  GOTO   26F
026C:  MOVLB  00
026D:  MOVLB  02
026E:  BSF    0D.5
026F:  MOVLB  01
0270:  BCF    0D.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0271:  MOVLB  00
0272:  BTFSC  48.2
0273:  GOTO   278
0274:  MOVLB  02
0275:  BCF    0D.6
0276:  GOTO   27A
0277:  MOVLB  00
0278:  MOVLB  02
0279:  BSF    0D.6
027A:  MOVLB  01
027B:  BCF    0D.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
027C:  MOVLB  00
027D:  BTFSC  48.3
027E:  GOTO   283
027F:  MOVLB  02
0280:  BCF    0C.2
0281:  GOTO   285
0282:  MOVLB  00
0283:  MOVLB  02
0284:  BSF    0C.2
0285:  MOVLB  01
0286:  BCF    0C.2
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0287:  NOP
....................    lcd_output_enable(1); 
0288:  MOVLB  02
0289:  BSF    0E.2
028A:  MOVLB  01
028B:  BCF    0E.2
....................    delay_us(2); 
028C:  MOVLW  02
028D:  MOVWF  77
028E:  DECFSZ 77,F
028F:  GOTO   28E
0290:  NOP
....................    lcd_output_enable(0); 
0291:  MOVLB  02
0292:  BCF    0E.2
0293:  MOVLB  01
0294:  BCF    0E.2
0295:  MOVLB  00
0296:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
02C8:  MOVLB  01
02C9:  BCF    0E.2
....................    lcd_rs_tris(); 
02CA:  BCF    0E.0
....................    lcd_rw_tris(); 
02CB:  BCF    0E.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
02CC:  MOVLB  02
02CD:  BCF    0E.0
02CE:  MOVLB  01
02CF:  BCF    0E.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0301:  MOVF   78,W
0302:  MOVWF  47
0303:  BTFSS  47.7
0304:  GOTO   307
0305:  MOVLB  01
0306:  GOTO   2D0
....................    lcd_output_rs(address); 
0307:  MOVF   45,F
0308:  BTFSS  03.2
0309:  GOTO   30E
030A:  MOVLB  02
030B:  BCF    0E.0
030C:  GOTO   310
030D:  MOVLB  00
030E:  MOVLB  02
030F:  BSF    0E.0
0310:  MOVLB  01
0311:  BCF    0E.0
....................    delay_cycles(1); 
0312:  NOP
....................    lcd_output_rw(0); 
0313:  MOVLB  02
0314:  BCF    0E.1
0315:  MOVLB  01
0316:  BCF    0E.1
....................    delay_cycles(1); 
0317:  NOP
....................    lcd_output_enable(0); 
0318:  MOVLB  02
0319:  BCF    0E.2
031A:  MOVLB  01
031B:  BCF    0E.2
....................    lcd_send_nibble(n >> 4); 
031C:  MOVLB  00
031D:  SWAPF  46,W
031E:  MOVWF  47
031F:  MOVLW  0F
0320:  ANDWF  47,F
0321:  MOVF   47,W
0322:  MOVWF  48
0323:  CALL   25C
....................    lcd_send_nibble(n & 0xf); 
0324:  MOVF   46,W
0325:  ANDLW  0F
0326:  MOVWF  47
0327:  MOVWF  48
0328:  CALL   25C
0329:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
*
0409:  MOVLW  28
040A:  MOVLB  00
040B:  MOVWF  34
040C:  MOVLW  0C
040D:  MOVWF  35
040E:  MOVLW  01
040F:  MOVWF  36
0410:  MOVLW  06
0411:  MOVWF  37
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0412:  MOVLB  02
0413:  BCF    0E.2
0414:  MOVLB  01
0415:  BCF    0E.2
....................    lcd_output_rs(0); 
0416:  MOVLB  02
0417:  BCF    0E.0
0418:  MOVLB  01
0419:  BCF    0E.0
....................    lcd_output_rw(0); 
041A:  MOVLB  02
041B:  BCF    0E.1
041C:  MOVLB  01
041D:  BCF    0E.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
041E:  BCF    0D.4
....................    output_drive(LCD_DATA5); 
041F:  BCF    0D.5
....................    output_drive(LCD_DATA6); 
0420:  BCF    0D.6
....................    output_drive(LCD_DATA7); 
0421:  BCF    0C.2
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0422:  BCF    0E.2
....................    lcd_rs_tris(); 
0423:  BCF    0E.0
....................    lcd_rw_tris(); 
0424:  BCF    0E.1
....................  #endif 
....................      
....................    delay_ms(15); 
0425:  MOVLW  0F
0426:  MOVLB  00
0427:  MOVWF  40
0428:  CALL   247
....................    for(i=1;i<=3;++i) 
0429:  MOVLW  01
042A:  MOVWF  33
042B:  MOVF   33,W
042C:  SUBLW  03
042D:  BTFSS  03.0
042E:  GOTO   437
....................    { 
....................        lcd_send_nibble(3); 
042F:  MOVLW  03
0430:  MOVWF  48
0431:  CALL   25C
....................        delay_ms(5); 
0432:  MOVLW  05
0433:  MOVWF  40
0434:  CALL   247
0435:  INCF   33,F
0436:  GOTO   42B
....................    } 
....................     
....................    lcd_send_nibble(2); 
0437:  MOVLW  02
0438:  MOVWF  48
0439:  CALL   25C
....................    delay_ms(5); 
043A:  MOVLW  05
043B:  MOVWF  40
043C:  CALL   247
....................    for(i=0;i<=3;++i) 
043D:  CLRF   33
043E:  MOVF   33,W
043F:  SUBLW  03
0440:  BTFSS  03.0
0441:  GOTO   451
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0442:  MOVLW  14
0443:  ADDWF  33,W
0444:  MOVWF  04
0445:  MOVLW  20
0446:  MOVWF  05
0447:  BTFSC  03.0
0448:  INCF   05,F
0449:  MOVF   00,W
044A:  MOVWF  38
044B:  CLRF   45
044C:  MOVF   38,W
044D:  MOVWF  46
044E:  CALL   2C8
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
044F:  INCF   33,F
0450:  GOTO   43E
....................    g_LcdX = 0; 
0451:  CLRF   29
....................    g_LcdY = 0; 
0452:  CLRF   2A
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
032A:  DECFSZ 42,W
032B:  GOTO   32D
032C:  GOTO   330
....................       address=LCD_LINE_TWO; 
032D:  MOVLW  40
032E:  MOVWF  43
032F:  GOTO   331
....................    else 
....................       address=0; 
0330:  CLRF   43
....................       
....................    address+=x-1; 
0331:  MOVLW  01
0332:  SUBWF  41,W
0333:  ADDWF  43,F
....................    lcd_send_byte(0,0x80|address); 
0334:  MOVF   43,W
0335:  IORLW  80
0336:  MOVWF  44
0337:  CLRF   45
0338:  MOVF   44,W
0339:  MOVWF  46
033A:  CALL   2C8
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
033B:  MOVLW  01
033C:  SUBWF  41,W
033D:  MOVWF  29
....................    g_LcdY = y - 1; 
033E:  MOVLW  01
033F:  SUBWF  42,W
0340:  MOVWF  2A
....................   #endif 
0341:  RETURN
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0342:  MOVF   3F,W
0343:  XORLW  07
0344:  BTFSC  03.2
0345:  GOTO   353
0346:  XORLW  0B
0347:  BTFSC  03.2
0348:  GOTO   358
0349:  XORLW  01
034A:  BTFSC  03.2
034B:  GOTO   362
034C:  XORLW  07
034D:  BTFSC  03.2
034E:  GOTO   36B
034F:  XORLW  02
0350:  BTFSC  03.2
0351:  GOTO   37F
0352:  GOTO   384
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0353:  MOVLW  01
0354:  MOVWF  41
0355:  MOVWF  42
0356:  CALL   32A
0357:  GOTO   38E
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0358:  CLRF   45
0359:  MOVLW  01
035A:  MOVWF  46
035B:  CALL   2C8
....................                      delay_ms(2); 
035C:  MOVLW  02
035D:  MOVWF  40
035E:  CALL   247
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
035F:  CLRF   29
....................                      g_LcdY = 0; 
0360:  CLRF   2A
....................                     #endif 
....................                      break; 
0361:  GOTO   38E
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
0362:  MOVLW  01
0363:  ADDWF  2A,W
0364:  MOVWF  40
0365:  MOVLW  01
0366:  MOVWF  41
0367:  MOVF   40,W
0368:  MOVWF  42
0369:  CALL   32A
036A:  GOTO   38E
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
036B:  MOVF   29,W
036C:  INCF   29,F
036D:  SUBLW  13
036E:  BTFSS  03.0
036F:  GOTO   376
....................          { 
....................             lcd_send_byte(1, ' '); 
0370:  MOVLW  01
0371:  MOVWF  45
0372:  MOVLW  20
0373:  MOVWF  46
0374:  CALL   2C8
0375:  GOTO   36B
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
0376:  MOVLW  02
0377:  ADDWF  2A,W
0378:  MOVWF  40
0379:  MOVLW  01
037A:  MOVWF  41
037B:  MOVF   40,W
037C:  MOVWF  42
037D:  CALL   32A
....................          break; 
037E:  GOTO   38E
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
037F:  CLRF   45
0380:  MOVLW  10
0381:  MOVWF  46
0382:  CALL   2C8
0383:  GOTO   38E
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
0384:  MOVF   29,W
0385:  SUBLW  13
0386:  BTFSS  03.0
0387:  GOTO   38E
....................          { 
....................             lcd_send_byte(1, c); 
0388:  MOVLW  01
0389:  MOVWF  45
038A:  MOVF   3F,W
038B:  MOVWF  46
038C:  CALL   2C8
....................             g_LcdX++; 
038D:  INCF   29,F
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
....................      #endif 
....................    } 
038E:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... unsigned short int mode = 0; 
.................... unsigned long int rpm = 800; 
.................... unsigned long int time_on, time_off; 
.................... enum lcd_message {LOGO = 1, MAX_RPM_REACHED, MIN_RPM_REACHED, PRINT_RPM} message = LOGO; 
.................... const char logo_str[] = "Hello Riko..."; 
....................  
.................... void chip_init(void); 
.................... void nozzle_off(void); 
.................... void nozzle_task(void); 
.................... void lcd_task(void); 
....................  
.................... #INT_TIMER1 
.................... void timer0_isr (void) 
.................... { 
....................    static unsigned short int increase = 1; 
....................    nozzle_off(); 
*
00AC:  CALL   055
....................    if ((increase) && (rpm < 8000)) 
00AD:  BTFSS  2B.1
00AE:  GOTO   0BE
00AF:  MOVF   2D,W
00B0:  SUBLW  1F
00B1:  BTFSS  03.0
00B2:  GOTO   0BE
00B3:  BTFSS  03.2
00B4:  GOTO   0B9
00B5:  MOVF   2C,W
00B6:  SUBLW  3F
00B7:  BTFSS  03.0
00B8:  GOTO   0BE
....................    { 
....................       rpm += 100;   
00B9:  MOVLW  64
00BA:  ADDWF  2C,F
00BB:  MOVLW  00
00BC:  ADDWFC 2D,F
....................    } 
00BD:  GOTO   0BF
....................    else 
....................    { 
....................    increase = 0; 
00BE:  BCF    2B.1
....................    } 
....................    if ((!increase) && (rpm > 800)) 
00BF:  BTFSC  2B.1
00C0:  GOTO   0D1
00C1:  MOVF   2D,W
00C2:  SUBLW  02
00C3:  BTFSC  03.0
00C4:  GOTO   0D1
00C5:  XORLW  FF
00C6:  BTFSS  03.2
00C7:  GOTO   0CC
00C8:  MOVF   2C,W
00C9:  SUBLW  20
00CA:  BTFSC  03.0
00CB:  GOTO   0D1
....................    { 
....................       rpm -= 100; 
00CC:  MOVLW  64
00CD:  SUBWF  2C,F
00CE:  MOVLW  00
00CF:  SUBWFC 2D,F
....................    } 
00D0:  GOTO   0D2
....................    else 
....................    { 
....................       increase = 1; 
00D1:  BSF    2B.1
....................    } 
....................  
....................    if (rpm) 
00D2:  MOVF   2C,W
00D3:  IORWF  2D,W
00D4:  BTFSC  03.2
00D5:  GOTO   134
....................       if (rpm < 3000) 
00D6:  MOVF   2D,W
00D7:  SUBLW  0B
00D8:  BTFSS  03.0
00D9:  GOTO   10C
00DA:  BTFSS  03.2
00DB:  GOTO   0E0
00DC:  MOVF   2C,W
00DD:  SUBLW  B7
00DE:  BTFSS  03.0
00DF:  GOTO   10C
....................       { 
....................          time_on = MAX_TIME_ON; 
00E0:  MOVLW  27
00E1:  MOVWF  2F
00E2:  MOVLW  10
00E3:  MOVWF  2E
....................          time_off = (unsigned long int)((unsigned int32)(60000000 / rpm) - time_on); 
00E4:  BCF    03.1
00E5:  MOVLW  03
00E6:  MOVWF  51
00E7:  MOVLW  93
00E8:  MOVWF  50
00E9:  MOVLW  87
00EA:  MOVWF  4F
00EB:  CLRF   4E
00EC:  CLRF   55
00ED:  CLRF   54
00EE:  MOVF   2D,W
00EF:  MOVWF  53
00F0:  MOVF   2C,W
00F1:  MOVWF  52
00F2:  CALL   05F
00F3:  MOVF   7A,W
00F4:  MOVWF  53
00F5:  MOVF   79,W
00F6:  MOVWF  52
00F7:  MOVF   78,W
00F8:  MOVWF  51
00F9:  MOVF   77,W
00FA:  MOVWF  50
00FB:  MOVF   2E,W
00FC:  SUBWF  77,W
00FD:  MOVWF  77
00FE:  MOVF   2F,W
00FF:  SUBWFC 78,W
0100:  MOVWF  78
0101:  MOVLW  00
0102:  SUBWFC 79,W
0103:  MOVWF  79
0104:  MOVLW  00
0105:  SUBWFC 7A,W
0106:  MOVWF  7A
0107:  MOVF   78,W
0108:  MOVWF  31
0109:  MOVF   77,W
010A:  MOVWF  30
....................       } 
010B:  GOTO   134
....................       else 
....................       { 
....................          time_off = (unsigned int16)((unsigned int32)(60000000 / rpm) / 2); 
010C:  BCF    03.1
010D:  MOVLW  03
010E:  MOVWF  51
010F:  MOVLW  93
0110:  MOVWF  50
0111:  MOVLW  87
0112:  MOVWF  4F
0113:  CLRF   4E
0114:  CLRF   55
0115:  CLRF   54
0116:  MOVF   2D,W
0117:  MOVWF  53
0118:  MOVF   2C,W
0119:  MOVWF  52
011A:  CALL   05F
011B:  MOVF   7A,W
011C:  MOVWF  53
011D:  MOVF   79,W
011E:  MOVWF  52
011F:  MOVF   78,W
0120:  MOVWF  51
0121:  MOVF   77,W
0122:  MOVWF  50
0123:  BCF    03.0
0124:  RRF    7A,W
0125:  MOVWF  7A
0126:  RRF    79,W
0127:  MOVWF  79
0128:  RRF    78,W
0129:  MOVWF  78
012A:  RRF    77,W
012B:  MOVWF  77
012C:  MOVF   78,W
012D:  MOVWF  31
012E:  MOVF   77,W
012F:  MOVWF  30
....................          time_on = time_off; 
0130:  MOVF   31,W
0131:  MOVWF  2F
0132:  MOVF   30,W
0133:  MOVWF  2E
....................       } 
.................... } 
....................  
0134:  BCF    11.0
0135:  MOVLP  00
0136:  GOTO   02A
.................... #INT_RA 
.................... void int_handler(void) 
.................... { 
....................    if (butt_pressed(UP_BUTT)) 
0137:  MOVLB  01
0138:  BSF    0C.5
0139:  MOVLB  00
013A:  BTFSC  0C.5
013B:  GOTO   1AD
....................    { 
....................       if (rpm < 7000) 
013C:  MOVF   2D,W
013D:  SUBLW  1B
013E:  BTFSS  03.0
013F:  GOTO   1AB
0140:  BTFSS  03.2
0141:  GOTO   146
0142:  MOVF   2C,W
0143:  SUBLW  57
0144:  BTFSS  03.0
0145:  GOTO   1AB
....................       { 
....................          rpm += 100; 
0146:  MOVLW  64
0147:  ADDWF  2C,F
0148:  MOVLW  00
0149:  ADDWFC 2D,F
....................          message = PRINT_RPM; 
014A:  MOVLW  04
014B:  MOVWF  32
....................          if (rpm < 3000) 
014C:  MOVF   2D,W
014D:  SUBLW  0B
014E:  BTFSS  03.0
014F:  GOTO   182
0150:  BTFSS  03.2
0151:  GOTO   156
0152:  MOVF   2C,W
0153:  SUBLW  B7
0154:  BTFSS  03.0
0155:  GOTO   182
....................          { 
....................             time_on = MAX_TIME_ON; 
0156:  MOVLW  27
0157:  MOVWF  2F
0158:  MOVLW  10
0159:  MOVWF  2E
....................             time_off = (unsigned long int)((unsigned int32)(60000000 / rpm) - time_on); 
015A:  BCF    03.1
015B:  MOVLW  03
015C:  MOVWF  51
015D:  MOVLW  93
015E:  MOVWF  50
015F:  MOVLW  87
0160:  MOVWF  4F
0161:  CLRF   4E
0162:  CLRF   55
0163:  CLRF   54
0164:  MOVF   2D,W
0165:  MOVWF  53
0166:  MOVF   2C,W
0167:  MOVWF  52
0168:  CALL   05F
0169:  MOVF   7A,W
016A:  MOVWF  53
016B:  MOVF   79,W
016C:  MOVWF  52
016D:  MOVF   78,W
016E:  MOVWF  51
016F:  MOVF   77,W
0170:  MOVWF  50
0171:  MOVF   2E,W
0172:  SUBWF  77,W
0173:  MOVWF  77
0174:  MOVF   2F,W
0175:  SUBWFC 78,W
0176:  MOVWF  78
0177:  MOVLW  00
0178:  SUBWFC 79,W
0179:  MOVWF  79
017A:  MOVLW  00
017B:  SUBWFC 7A,W
017C:  MOVWF  7A
017D:  MOVF   78,W
017E:  MOVWF  31
017F:  MOVF   77,W
0180:  MOVWF  30
....................          } 
0181:  GOTO   1AA
....................          else 
....................          { 
....................             time_off = (unsigned int16)((unsigned int32)(60000000 / rpm) / 2); 
0182:  BCF    03.1
0183:  MOVLW  03
0184:  MOVWF  51
0185:  MOVLW  93
0186:  MOVWF  50
0187:  MOVLW  87
0188:  MOVWF  4F
0189:  CLRF   4E
018A:  CLRF   55
018B:  CLRF   54
018C:  MOVF   2D,W
018D:  MOVWF  53
018E:  MOVF   2C,W
018F:  MOVWF  52
0190:  CALL   05F
0191:  MOVF   7A,W
0192:  MOVWF  53
0193:  MOVF   79,W
0194:  MOVWF  52
0195:  MOVF   78,W
0196:  MOVWF  51
0197:  MOVF   77,W
0198:  MOVWF  50
0199:  BCF    03.0
019A:  RRF    7A,W
019B:  MOVWF  7A
019C:  RRF    79,W
019D:  MOVWF  79
019E:  RRF    78,W
019F:  MOVWF  78
01A0:  RRF    77,W
01A1:  MOVWF  77
01A2:  MOVF   78,W
01A3:  MOVWF  31
01A4:  MOVF   77,W
01A5:  MOVWF  30
....................             time_on = time_off; 
01A6:  MOVF   31,W
01A7:  MOVWF  2F
01A8:  MOVF   30,W
01A9:  MOVWF  2E
....................          } 
....................       } 
01AA:  GOTO   1AD
....................       else 
....................       { 
....................          message = MAX_RPM_REACHED; 
01AB:  MOVLW  02
01AC:  MOVWF  32
....................       } 
....................    } 
....................    if (butt_pressed(DOWN_BUTT)) 
01AD:  MOVLB  01
01AE:  BSF    0C.4
01AF:  MOVLB  00
01B0:  BTFSC  0C.4
01B1:  GOTO   224
....................    { 
....................       if (rpm > 800) 
01B2:  MOVF   2D,W
01B3:  SUBLW  02
01B4:  BTFSC  03.0
01B5:  GOTO   222
01B6:  XORLW  FF
01B7:  BTFSS  03.2
01B8:  GOTO   1BD
01B9:  MOVF   2C,W
01BA:  SUBLW  20
01BB:  BTFSC  03.0
01BC:  GOTO   222
....................       { 
....................          rpm -= 100; 
01BD:  MOVLW  64
01BE:  SUBWF  2C,F
01BF:  MOVLW  00
01C0:  SUBWFC 2D,F
....................          message = PRINT_RPM; 
01C1:  MOVLW  04
01C2:  MOVWF  32
....................          if (rpm < 3000) 
01C3:  MOVF   2D,W
01C4:  SUBLW  0B
01C5:  BTFSS  03.0
01C6:  GOTO   1F9
01C7:  BTFSS  03.2
01C8:  GOTO   1CD
01C9:  MOVF   2C,W
01CA:  SUBLW  B7
01CB:  BTFSS  03.0
01CC:  GOTO   1F9
....................          { 
....................             time_on = MAX_TIME_ON; 
01CD:  MOVLW  27
01CE:  MOVWF  2F
01CF:  MOVLW  10
01D0:  MOVWF  2E
....................             time_off = (unsigned long int)((unsigned int32)(60000000 / rpm) - time_on); 
01D1:  BCF    03.1
01D2:  MOVLW  03
01D3:  MOVWF  51
01D4:  MOVLW  93
01D5:  MOVWF  50
01D6:  MOVLW  87
01D7:  MOVWF  4F
01D8:  CLRF   4E
01D9:  CLRF   55
01DA:  CLRF   54
01DB:  MOVF   2D,W
01DC:  MOVWF  53
01DD:  MOVF   2C,W
01DE:  MOVWF  52
01DF:  CALL   05F
01E0:  MOVF   7A,W
01E1:  MOVWF  53
01E2:  MOVF   79,W
01E3:  MOVWF  52
01E4:  MOVF   78,W
01E5:  MOVWF  51
01E6:  MOVF   77,W
01E7:  MOVWF  50
01E8:  MOVF   2E,W
01E9:  SUBWF  77,W
01EA:  MOVWF  77
01EB:  MOVF   2F,W
01EC:  SUBWFC 78,W
01ED:  MOVWF  78
01EE:  MOVLW  00
01EF:  SUBWFC 79,W
01F0:  MOVWF  79
01F1:  MOVLW  00
01F2:  SUBWFC 7A,W
01F3:  MOVWF  7A
01F4:  MOVF   78,W
01F5:  MOVWF  31
01F6:  MOVF   77,W
01F7:  MOVWF  30
....................          } 
01F8:  GOTO   221
....................          else 
....................          { 
....................             time_off = (unsigned int16)((unsigned int32)(60000000 / rpm) / 2); 
01F9:  BCF    03.1
01FA:  MOVLW  03
01FB:  MOVWF  51
01FC:  MOVLW  93
01FD:  MOVWF  50
01FE:  MOVLW  87
01FF:  MOVWF  4F
0200:  CLRF   4E
0201:  CLRF   55
0202:  CLRF   54
0203:  MOVF   2D,W
0204:  MOVWF  53
0205:  MOVF   2C,W
0206:  MOVWF  52
0207:  CALL   05F
0208:  MOVF   7A,W
0209:  MOVWF  53
020A:  MOVF   79,W
020B:  MOVWF  52
020C:  MOVF   78,W
020D:  MOVWF  51
020E:  MOVF   77,W
020F:  MOVWF  50
0210:  BCF    03.0
0211:  RRF    7A,W
0212:  MOVWF  7A
0213:  RRF    79,W
0214:  MOVWF  79
0215:  RRF    78,W
0216:  MOVWF  78
0217:  RRF    77,W
0218:  MOVWF  77
0219:  MOVF   78,W
021A:  MOVWF  31
021B:  MOVF   77,W
021C:  MOVWF  30
....................             time_on = time_off; 
021D:  MOVF   31,W
021E:  MOVWF  2F
021F:  MOVF   30,W
0220:  MOVWF  2E
....................          } 
....................       } 
0221:  GOTO   224
....................       else 
....................       { 
....................          message = MIN_RPM_REACHED; 
0222:  MOVLW  03
0223:  MOVWF  32
....................       } 
....................    } 
.................... clear_interrupt(INT_RA5_H2L); 
0224:  MOVLB  07
0225:  BCF    13.5
.................... clear_interrupt(INT_RA4_H2L); 
0226:  BCF    13.4
0227:  BCF    0B.0
0228:  MOVLP  00
0229:  MOVLB  00
022A:  GOTO   02A
.................... } 
....................  
.................... //interrupt shall be cleared befor enableing  
....................  
....................  
.................... void main(void) 
*
05EA:  MOVLW  7A
05EB:  MOVLB  01
05EC:  MOVWF  19
05ED:  MOVLB  00
05EE:  BCF    2B.0
05EF:  MOVLW  03
05F0:  MOVWF  2D
05F1:  MOVLW  20
05F2:  MOVWF  2C
05F3:  MOVLW  01
05F4:  MOVWF  32
05F5:  BSF    2B.1
05F6:  MOVLB  03
05F7:  CLRF   0C
05F8:  CLRF   0D
05F9:  CLRF   0E
05FA:  MOVLB  02
05FB:  CLRF   12
05FC:  CLRF   11
05FD:  CLRF   14
05FE:  CLRF   13
.................... { 
.................... chip_init(); 
05FF:  MOVLB  00
0600:  GOTO   3D9
....................    while (!mode) 
0601:  BTFSC  2B.0
0602:  GOTO   613
....................    { 
....................       if (message) 
0603:  MOVF   32,F
0604:  BTFSC  03.2
0605:  GOTO   611
....................       { 
....................          LED_ON(GREEN_LED); 
0606:  MOVLB  01
0607:  BCF    0E.3
0608:  MOVLB  02
0609:  BCF    0E.3
....................          lcd_task(); 
060A:  MOVLB  00
060B:  GOTO   494
....................          LED_OFF(GREEN_LED); 
060C:  MOVLB  01
060D:  BCF    0E.3
060E:  MOVLB  02
060F:  BSF    0E.3
0610:  MOVLB  00
....................       } 
....................       nozzle_task(); 
0611:  CALL   5A1
0612:  GOTO   601
....................    } 
....................    while (mode) 
0613:  BTFSS  2B.0
0614:  GOTO   617
....................    { 
....................       nozzle_task(); 
0615:  CALL   5A1
0616:  GOTO   613
....................    } 
.................... } 
....................  
0617:  SLEEP
.................... void chip_init(void) 
.................... { 
....................    relay_off(); 
*
03D9:  MOVLB  01
03DA:  BCF    0E.6
03DB:  MOVLB  02
03DC:  BCF    0E.6
....................    nozzle_off(); 
03DD:  MOVLB  00
03DE:  CALL   055
....................    led_off(GREEN_LED); 
03DF:  MOVLB  01
03E0:  BCF    0E.3
03E1:  MOVLB  02
03E2:  BSF    0E.3
....................    led_off(RED_LED); 
03E3:  MOVLB  01
03E4:  BCF    0E.4
03E5:  MOVLB  02
03E6:  BSF    0E.4
....................    SETUP_SPI(SPI_DISABLED); 
03E7:  BCF    1D.4
03E8:  MOVLB  04
03E9:  CLRF   15
....................    setup_comparator(NC_NC_NC_NC); 
03EA:  MOVLB  02
03EB:  CLRF   12
03EC:  CLRF   11
03ED:  CLRF   14
03EE:  CLRF   13
....................    setup_vref(VREF_OFF); 
03EF:  CLRF   17
....................    SETUP_DAC(DAC_OFF); 
03F0:  CLRF   18
....................    setup_cwg(0,0,0,0);                 //CWG - Disabled 
03F1:  MOVLB  0D
03F2:  BCF    13.7
....................    setup_nco(0,0);                     //NCO - Disabled 
03F3:  MOVLB  09
03F4:  BCF    1E.7
....................    SETUP_ADC(ADC_OFF); 
03F5:  MOVLB  01
03F6:  BCF    1D.0
....................    setup_adc_ports(NO_ANALOGS); 
03F7:  BCF    1E.0
03F8:  BCF    1E.1
03F9:  MOVLW  00
03FA:  MOVLB  03
03FB:  MOVWF  0C
03FC:  MOVWF  0E
03FD:  MOVWF  0D
....................    set_tris_a(0x03<<4); 
03FE:  MOVLW  30
03FF:  TRIS   5
....................    ENABLE_INTERRUPTS(INT_RA5_H2L); 
0400:  BSF    0B.3
0401:  MOVLB  07
0402:  BSF    12.5
0403:  BCF    11.5
....................    ENABLE_INTERRUPTS(INT_RA4_H2L); 
0404:  BSF    0B.3
0405:  BSF    12.4
0406:  BCF    11.4
....................    ENABLE_INTERRUPTS(GLOBAL); 
0407:  MOVLW  C0
0408:  IORWF  0B,F
....................    lcd_init(); 
....................    printf(lcd_putc, "\fInit..."); 
*
0453:  MOVLW  2B
0454:  MOVLB  03
0455:  MOVWF  11
0456:  MOVLW  02
0457:  MOVWF  12
0458:  MOVLB  00
0459:  CALL   38F
....................    delay_ms(1500); 
045A:  MOVLW  06
045B:  MOVWF  33
045C:  MOVLW  FA
045D:  MOVWF  40
045E:  CALL   247
045F:  DECFSZ 33,F
0460:  GOTO   45C
....................    if (butt_pressed(DOWN_BUTT)) 
0461:  MOVLB  01
0462:  BSF    0C.4
0463:  MOVLB  00
0464:  BTFSC  0C.4
0465:  GOTO   48D
....................    { 
....................       LED_ON(RED_LED); 
0466:  MOVLB  01
0467:  BCF    0E.4
0468:  MOVLB  02
0469:  BCF    0E.4
....................       delay_ms(3000); 
046A:  MOVLW  0C
046B:  MOVLB  00
046C:  MOVWF  33
046D:  MOVLW  FA
046E:  MOVWF  40
046F:  CALL   247
0470:  DECFSZ 33,F
0471:  GOTO   46D
....................       if (butt_pressed(down_butt)) 
0472:  MOVLB  01
0473:  BSF    0C.4
0474:  MOVLB  00
0475:  BTFSC  0C.4
0476:  GOTO   48D
....................       { 
....................          LED_OFF(RED_LED); 
0477:  MOVLB  01
0478:  BCF    0E.4
0479:  MOVLB  02
047A:  BSF    0E.4
....................          DISABLE_INTERRUPTS (INT_RA5_H2L); 
047B:  MOVLB  07
047C:  BCF    12.5
....................          DISABLE_INTERRUPTS (INT_RA5_H2L); 
047D:  BCF    12.5
....................          SETUP_TIMER_1(T1_INTERNAL|T1_DIV_BY_4); 
047E:  MOVLB  02
047F:  BCF    1D.3
0480:  MOVLW  27
0481:  MOVLB  00
0482:  MOVWF  18
0483:  CLRF   19
....................          set_timer1(0); 
0484:  CLRF   16
0485:  CLRF   17
0486:  CLRF   16
....................          ENABLE_INTERRUPTS (INT_TIMER1); 
0487:  MOVLB  01
0488:  BSF    11.0
....................          clear_interrupt(INT_TIMER1); 
0489:  MOVF   07,W
048A:  MOVLB  00
048B:  BCF    11.0
....................          mode = 1; 
048C:  BSF    2B.0
....................       } 
....................    } 
....................    relay_on(); 
048D:  MOVLB  01
048E:  BCF    0E.6
048F:  MOVLB  02
0490:  BSF    0E.6
0491:  MOVLP  00
0492:  MOVLB  00
0493:  GOTO   601 (RETURN)
....................     
.................... } 
....................  
.................... void nozzle_off(void) 
.................... { 
....................    T_OFF(T1);    
*
0055:  MOVLB  01
0056:  BCF    0E.7
0057:  MOVLB  02
0058:  BCF    0E.7
....................    T_OFF(T2);  
0059:  MOVLB  01
005A:  BCF    0D.7
005B:  MOVLB  02
005C:  BCF    0D.7
005D:  MOVLB  00
005E:  RETURN
.................... } 
....................  
.................... void nozzle_task(void) 
.................... { 
....................    T_ON(T1); 
*
05A1:  MOVLB  01
05A2:  BCF    0E.7
05A3:  MOVLB  02
05A4:  BSF    0E.7
....................    delay_us(time_on); 
05A5:  MOVLB  00
05A6:  MOVF   2F,W
05A7:  MOVWF  34
05A8:  INCF   34,F
05A9:  DECF   34,F
05AA:  BTFSC  03.2
05AB:  GOTO   5B0
05AC:  MOVLW  FF
05AD:  MOVWF  37
05AE:  CALL   591
05AF:  GOTO   5A9
05B0:  MOVF   2E,W
05B1:  MOVWF  37
05B2:  CALL   591
....................    T_OFF(T1); 
05B3:  MOVLB  01
05B4:  BCF    0E.7
05B5:  MOVLB  02
05B6:  BCF    0E.7
....................    T_ON(T2); 
05B7:  MOVLB  01
05B8:  BCF    0D.7
05B9:  MOVLB  02
05BA:  BSF    0D.7
....................    delay_us(time_on); 
05BB:  MOVLB  00
05BC:  MOVF   2F,W
05BD:  MOVWF  34
05BE:  INCF   34,F
05BF:  DECF   34,F
05C0:  BTFSC  03.2
05C1:  GOTO   5C6
05C2:  MOVLW  FF
05C3:  MOVWF  37
05C4:  CALL   591
05C5:  GOTO   5BF
05C6:  MOVF   2E,W
05C7:  MOVWF  37
05C8:  CALL   591
....................    T_OFF(T2); 
05C9:  MOVLB  01
05CA:  BCF    0D.7
05CB:  MOVLB  02
05CC:  BCF    0D.7
....................    if (time_on != time_off) 
05CD:  MOVLB  00
05CE:  MOVF   30,W
05CF:  SUBWF  2E,W
05D0:  BTFSS  03.2
05D1:  GOTO   5D6
05D2:  MOVF   31,W
05D3:  SUBWF  2F,W
05D4:  BTFSC  03.2
05D5:  GOTO   5E9
....................    { 
....................       delay_us(time_off - time_on);  
05D6:  MOVF   2E,W
05D7:  SUBWF  30,W
05D8:  MOVWF  34
05D9:  MOVF   2F,W
05DA:  SUBWFC 31,W
05DB:  MOVWF  35
05DC:  MOVF   35,W
05DD:  MOVWF  36
05DE:  INCF   36,F
05DF:  DECF   36,F
05E0:  BTFSC  03.2
05E1:  GOTO   5E6
05E2:  MOVLW  FF
05E3:  MOVWF  37
05E4:  CALL   591
05E5:  GOTO   5DF
05E6:  MOVF   34,W
05E7:  MOVWF  37
05E8:  CALL   591
....................    } 
05E9:  RETURN
.................... } 
....................  
.................... void lcd_task(void) 
.................... { 
.................... nozzle_off(); 
*
0494:  CALL   055
....................    switch (message) 
0495:  MOVF   32,W
0496:  XORLW  04
0497:  BTFSC  03.2
0498:  GOTO   4A3
0499:  XORLW  06
049A:  BTFSC  03.2
049B:  GOTO   566
049C:  XORLW  01
049D:  BTFSC  03.2
049E:  GOTO   56E
049F:  XORLW  02
04A0:  BTFSC  03.2
04A1:  GOTO   576
04A2:  GOTO   58E
....................    { 
....................       case PRINT_RPM:  
....................          printf (lcd_putc,"\fRPM=%lu", rpm); 
04A3:  MOVLW  30
04A4:  MOVLB  03
04A5:  MOVWF  11
04A6:  MOVLW  02
04A7:  MOVWF  12
04A8:  BCF    03.0
04A9:  MOVLW  05
04AA:  MOVLB  00
04AB:  MOVWF  33
*
04FB:  MOVLW  10
04FC:  MOVWF  04
04FD:  MOVF   2D,W
04FE:  MOVWF  34
04FF:  MOVF   2C,W
0500:  MOVWF  33
....................          break; 
*
0565:  GOTO   58E
....................       case MAX_RPM_REACHED: 
....................          printf (lcd_putc,"\fMax rpm reached"); 
0566:  MOVLW  35
0567:  MOVLB  03
0568:  MOVWF  11
0569:  MOVLW  02
056A:  MOVWF  12
056B:  MOVLB  00
056C:  CALL   38F
....................          break; 
056D:  GOTO   58E
....................       case MIN_RPM_REACHED: 
....................          printf (lcd_putc,"\fMin rpm reached"); 
056E:  MOVLW  3E
056F:  MOVLB  03
0570:  MOVWF  11
0571:  MOVLW  02
0572:  MOVWF  12
0573:  MOVLB  00
0574:  CALL   38F
....................          break; 
0575:  GOTO   58E
....................       case LOGO: 
....................          printf (lcd_putc,"\f%s", logo_str); 
0576:  MOVLW  0C
0577:  MOVWF  3F
0578:  CALL   342
0579:  MOVLW  47
057A:  CLRF   05
057B:  MOVWF  04
057C:  MOVLW  80
057D:  MOVWF  05
....................          break; 
....................        default: ; 
....................    } 
....................    message = 0; 
*
058E:  CLRF   32
058F:  MOVLP  00
0590:  GOTO   60C (RETURN)
.................... } 
....................  
....................  

Configuration Fuses:
   Word  1: 3FC4   INTRC_IO NOWDT PUT MCLR NOPROTECT BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1FFF   NOWRT STVREN BORV19 NOLPBOR NODEBUG NOLVP
