D G "__PCM__" 0 242 ""5.025""
D G "__DEVICE__" 0 242 "1508"
D G "__DATE__" 0 242 ""28-септ-14""
D G "__TIME__" 0 242 ""17:22:38"" "Standard Header file for the PIC16F1508 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
v L "value" 1 38 "int8" `54 
f B "set_tris_a" 1 38 "void(int8 value)" `53 
v L "value" 1 39 "int8" `56 
f B "set_tris_b" 1 39 "void(int8 value)" `55 
v L "value" 1 40 "int8" `58 
f B "set_tris_c" 1 40 "void(int8 value)" `57 
f B "get_tris_a" 1 41 "int8()" `59 
f B "get_tris_b" 1 42 "int8()" `60 
f B "get_tris_c" 1 43 "int8()" `61 
v L "value" 1 44 "int8" `63 
f B "output_a" 1 44 "void(int8 value)" `62 
v L "value" 1 45 "int8" `65 
f B "output_b" 1 45 "void(int8 value)" `64 
v L "value" 1 46 "int8" `67 
f B "output_c" 1 46 "void(int8 value)" `66 
f B "input_a" 1 47 "int8()" `68 
f B "input_b" 1 48 "int8()" `69 
f B "input_c" 1 49 "int8()" `70 
f B "input_change_a" 1 50 "int8()" `71 
f B "input_change_b" 1 51 "int8()" `72 
f B "input_change_c" 1 52 "int8()" `73 
v L "pin" 1 53 "int16" `75 
f B "input" 1 53 "int8(int16 pin)" `74 
v L "pin" 1 54 "int16" `77 
f B "input_state" 1 54 "int8(int16 pin)" `76 
v L "pin" 1 55 "int16" `79 
f B "output_low" 1 55 "void(int16 pin)" `78 
v L "pin" 1 56 "int16" `81 
f B "output_high" 1 56 "void(int16 pin)" `80 
v L "pin" 1 57 "int16" `83 
f B "output_toggle" 1 57 "void(int16 pin)" `82 
v L "pin" 1 58 "int16" `85 
v L "level" 1 58 "int8" `86 
f B "output_bit" 1 58 "void(int16 pin,int8 level)" `84 
v L "pin" 1 59 "int16" `88 
f B "output_float" 1 59 "void(int16 pin)" `87 
v L "pin" 1 60 "int16" `90 
f B "output_drive" 1 60 "void(int16 pin)" `89  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 64 "96"
d G "PIN_A1" 1 65 "97"
d G "PIN_A2" 1 66 "98"
d G "PIN_A3" 1 67 "99"
d G "PIN_A4" 1 68 "100"
d G "PIN_A5" 1 69 "101"
d G "PIN_B4" 1 71 "108"
d G "PIN_B5" 1 72 "109"
d G "PIN_B6" 1 73 "110"
d G "PIN_B7" 1 74 "111"
d G "PIN_C0" 1 76 "112"
d G "PIN_C1" 1 77 "113"
d G "PIN_C2" 1 78 "114"
d G "PIN_C3" 1 79 "115"
d G "PIN_C4" 1 80 "116"
d G "PIN_C5" 1 81 "117"
d G "PIN_C6" 1 82 "118"
d G "PIN_C7" 1 83 "119"
d G "FALSE" 1 86 "0"
d G "TRUE" 1 87 "1"
d G "BYTE" 1 89 "int8"
d G "BOOLEAN" 1 90 "int1"
d G "getc" 1 92 "getch"
d G "fgetc" 1 93 "getch"
d G "getchar" 1 94 "getch"
d G "putc" 1 95 "putchar"
d G "fputc" 1 96 "putchar"
d G "fgets" 1 97 "gets"
d G "fputs" 1 98 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f B "restart_cause" 1 103 "int8()" `91 
f B "reset_cpu" 1 104 "void()" `92 
f B "sleep" 1 105 "void()" `93  "Constants returned from RESTART_CAUSE() are:"
d G "NORMAL_POWER_UP" 1 107 "0x3C"
d G "BROWNOUT_RESTART" 1 108 "0x3E"
d G "MCLR_FROM_SLEEP" 1 109 "0x27"
d G "WDT_TIMEOUT" 1 110 "0x1F"
d G "WDT_FROM_SLEEP" 1 111 "0x0F"
d G "INTERRUPT_FROM_SLEEP" 1 112 "0x2F"
d G "MCLR_FROM_RUN" 1 113 "0x37"
d G "RESET_INSTRUCTION" 1 114 "0x3B"
d G "STACK_OVERFLOW" 1 115 "0xBF"
d G "STACK_UNDERFLOW" 1 116 "0x7F"
c L "sleep" 1 3 5 "FUNCTION"
v L "mode" 1 123 "int8" `95 
f B "setup_timer_0" 1 123 "void(int8 mode)" `94 
v L "value" 1 124 "int8" `97 
f B "set_timer0" 1 124 "void(int8 value)" `96 
f B "get_timer0" 1 125 "int8()" `98 
v L "mode" 1 126 "int8" `100 
v L "prescaler" 1 126 "int8" `101 
f B "setup_counters" 1 126 "void(int8 mode,int8 prescaler)" `99 
v L "value" 1 127 "int8" `103 
f B "set_rtcc" 1 127 "void(int8 value)" `102 
f B "get_rtcc" 1 128 "int8()" `104  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 130 "0"
d G "T0_EXT_L_TO_H" 1 131 "32"
d G "T0_EXT_H_TO_L" 1 132 "48"
d G "T0_DIV_1" 1 134 "8"
d G "T0_DIV_2" 1 135 "0"
d G "T0_DIV_4" 1 136 "1"
d G "T0_DIV_8" 1 137 "2"
d G "T0_DIV_16" 1 138 "3"
d G "T0_DIV_32" 1 139 "4"
d G "T0_DIV_64" 1 140 "5"
d G "T0_DIV_128" 1 141 "6"
d G "T0_DIV_256" 1 142 "7"
d G "T0_8_BIT" 1 145 "0"
d G "RTCC_INTERNAL" 1 147 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 148 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 149 "48"
d G "RTCC_DIV_1" 1 150 "8"
d G "RTCC_DIV_2" 1 151 "0"
d G "RTCC_DIV_4" 1 152 "1"
d G "RTCC_DIV_8" 1 153 "2"
d G "RTCC_DIV_16" 1 154 "3"
d G "RTCC_DIV_32" 1 155 "4"
d G "RTCC_DIV_64" 1 156 "5"
d G "RTCC_DIV_128" 1 157 "6"
d G "RTCC_DIV_256" 1 158 "7"
d G "RTCC_8_BIT" 1 159 "0"
c L "get_rtcc" 1 3 7 "FUNCTION"
v L "mode" 1 169 "int16" `106 
f B "setup_wdt" 1 169 "void(int16 mode)" `105 
f B "restart_wdt" 1 170 "void()" `107  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 172 "0x1000"
d G "WDT_OFF" 1 173 "0x2000"
d G "WDT_1MS" 1 175 "0x100"
d G "WDT_2MS" 1 176 "0x101"
d G "WDT_4MS" 1 177 "0x102"
d G "WDT_8MS" 1 178 "0x103"
d G "WDT_16MS" 1 179 "0x104"
d G "WDT_32MS" 1 180 "0x105"
d G "WDT_64MS" 1 181 "0x106"
d G "WDT_128MS" 1 182 "0x107"
d G "WDT_256MS" 1 183 "0x108"
d G "WDT_512MS" 1 184 "0x109"
d G "WDT_1S" 1 185 "0x10A"
d G "WDT_2S" 1 186 "0x10B"
d G "WDT_4S" 1 187 "0x10C"
d G "WDT_8S" 1 188 "0x10D"
d G "WDT_16S" 1 189 "0x10E"
d G "WDT_32S" 1 190 "0x10F"
d G "WDT_64S" 1 191 "0x110"
d G "WDT_128S" 1 192 "0x111"
d G "WDT_256S" 1 193 "0x112"
c L "restart_wdt" 1 3 3 "FUNCTION"
v L "mode" 1 198 "int16" `109 
f B "setup_timer_1" 1 198 "void(int16 mode)" `108 
f B "get_timer1" 1 199 "int16()" `110 
v L "value" 1 200 "int16" `112 
f B "set_timer1" 1 200 "void(int16 value)" `111  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 203 "0"
d G "T1_INTERNAL" 1 204 "0x07"
d G "T1_EXTERNAL" 1 205 "0x87"
d G "T1_EXTERNAL_SYNC" 1 206 "0x83"
d G "T1_FOSC" 1 207 "0x47"
d G "T1_ENABLE_SOSC" 1 209 "0x08"
d G "T1_DIV_BY_1" 1 211 "0"
d G "T1_DIV_BY_2" 1 212 "0x10"
d G "T1_DIV_BY_4" 1 213 "0x20"
d G "T1_DIV_BY_8" 1 214 "0x30"
d G "T1_GATE" 1 216 "0x8000"
d G "T1_GATE_INVERTED" 1 217 "0xC000"
d G "T1_GATE_TOGGLE" 1 218 "0xA000"
d G "T1_GATE_SINGLE" 1 219 "0x9000"
d G "T1_GATE_TIMER2" 1 220 "0x8100"
d G "T1_GATE_COMP1" 1 221 "0x8200"
d G "T1_GATE_COMP2" 1 222 "0x8300"
d G "T1_GATE_A4" 1 224 "0"
d G "T1_GATE_A3" 1 225 "0x10000"
c L "set_timer1" 1 3 3 "FUNCTION"
v L "mode" 1 230 "int8" `114 
v L "period" 1 230 "int8" `115 
v L "postscale" 1 230 "int8" `116 
f B "setup_timer_2" 1 230 "void(int8 mode,int8 period,int8 postscale)" `113 
f B "get_timer2" 1 231 "int8()" `117 
v L "value" 1 232 "int8" `119 
f B "set_timer2" 1 232 "void(int8 value)" `118  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 234 "0"
d G "T2_DIV_BY_1" 1 235 "4"
d G "T2_DIV_BY_4" 1 236 "5"
d G "T2_DIV_BY_16" 1 237 "6"
d G "T2_DIV_BY_64" 1 238 "7"
c L "set_timer2" 1 3 3 "FUNCTION"
v L "mode" 1 243 "int32" `121 
f B "setup_spi" 1 243 "void(int32 mode)" `120 
v L "value" 1 244 "int8" `123 
f B "spi_write" 1 244 "void(int8 value)" `122 
f B "spi_read" 1 245 "int8()" `124 
v L "value" 1 246 "int8" `126 
f G "spi_read" 1 246 "int8(int8 value)" `125 
f B "spi_data_in" 1 247 "int8()" `127  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 249 "0x00"
d G "SPI_MASTER" 1 250 "0x20"
d G "SPI_SLAVE" 1 251 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 252 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 253 "0x00"
d G "SPI_CLK_DIV_4" 1 254 "0x00"
d G "SPI_CLK_DIV_16" 1 255 "0x01"
d G "SPI_CLK_DIV_64" 1 256 "0x02"
d G "SPI_CLK_T2" 1 257 "0x03"
d G "SPI_SS_DISABLED" 1 258 "0x01"
d G "SPI_SS_C6" 1 260 "0x00000"
d G "SPI_SS_A3" 1 261 "0x10000"
d G "SPI_XMIT_L_TO_H" 1 263 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 264 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 266 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 267 "0x8000"
d G "SPI_L_TO_H" 1 270 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 271 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 3 2 "FUNCTION"
v L "baud" 1 275 "int32" `129 
f B "setup_uart" 1 275 "void(int32 baud)" `128 
v L "baud" 1 276 "int32" `131 
v L "stream" 1 276 "int8" `132 
f B "setup_uart" 1 276 "void(int32 baud,int8 stream)" `130 
v L "baud" 1 277 "int32" `134 
v L "stream" 1 277 "int8" `135 
v L "clock" 1 277 "int32" `136 
f B "setup_uart" 1 277 "void(int32 baud,int8 stream,int32 clock)" `133 
v L "baud" 1 278 "int32" `138 
f B "set_uart_speed" 1 278 "void(int32 baud)" `137 
v L "baud" 1 279 "int32" `140 
v L "stream" 1 279 "int8" `141 
f G "set_uart_speed" 1 279 "void(int32 baud,int8 stream)" `139 
v L "baud" 1 280 "int32" `143 
v L "stream" 1 280 "int8" `144 
v L "clock" 1 280 "int32" `145 
f G "set_uart_speed" 1 280 "void(int32 baud,int8 stream,int32 clock)" `142  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 284 "2"
d G "UART_DATA" 1 285 "4"
d G "UART_AUTODETECT" 1 286 "8"
d G "UART_AUTODETECT_NOWAIT" 1 287 "9"
d G "UART_WAKEUP_ON_RDA" 1 288 "10"
d G "UART_SEND_BREAK" 1 289 "13"
c L "set_uart_speed" 1 3 3 "FUNCTION"
v L "mode" 1 293 "int32" `147 
f B "setup_comparator" 1 293 "void(int32 mode)" `146  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 296 "0x00"
d G "CP1_A1_A0" 1 299 "0x8000"
d G "CP1_C1_A0" 1 300 "0x8001"
d G "CP1_C2_A0" 1 301 "0x8002"
d G "CP1_C3_A0" 1 302 "0x8003"
d G "CP1_FVR_A0" 1 303 "0x8004"
d G "CP1_A1_DAC" 1 304 "0x8010"
d G "CP1_C1_DAC" 1 305 "0x8011"
d G "CP1_C2_DAC" 1 306 "0x8012"
d G "CP1_C3_DAC" 1 307 "0x8013"
d G "CP1_FVR_DAC" 1 308 "0x8014"
d G "CP1_A1_FVR" 1 309 "0x8020"
d G "CP1_C1_FVR" 1 310 "0x8021"
d G "CP1_C2_FVR" 1 311 "0x8022"
d G "CP1_C3_FVR" 1 312 "0x8023"
d G "CP1_FVR_FVR" 1 313 "0x8024"
d G "CP1_A1_VSS" 1 314 "0x8030"
d G "CP1_C1_VSS" 1 315 "0x8031"
d G "CP1_C2_VSS" 1 316 "0x8032"
d G "CP1_C3_VSS" 1 317 "0x8033"
d G "CP1_FVR_VSS" 1 318 "0x8034"
d G "CP1_INT_L2H" 1 320 "0x0080"
d G "CP1_INT_H2L" 1 321 "0x0040"
d G "CP1_OUT_ON_A2" 1 322 "0x2000"
d G "CP1_INVERT" 1 323 "0x1000"
d G "CP1_FAST" 1 324 "0x0400"
d G "CP1_HYST" 1 325 "0x0200"
d G "CP1_SYNC" 1 326 "0x0100"
d G "CP2_A1_C0" 1 329 "0x80000000"
d G "CP2_C1_C0" 1 330 "0x80010000"
d G "CP2_C2_C0" 1 331 "0x80020000"
d G "CP2_C3_C0" 1 332 "0x80030000"
d G "CP2_FVR_C0" 1 333 "0x80040000"
d G "CP2_A1_DAC" 1 334 "0x80100000"
d G "CP2_C1_DAC" 1 335 "0x80110000"
d G "CP2_C2_DAC" 1 336 "0x80120000"
d G "CP2_C3_DAC" 1 337 "0x80130000"
d G "CP2_FVR_DAC" 1 338 "0x80140000"
d G "CP2_A1_FVR" 1 339 "0x80200000"
d G "CP2_C1_FVR" 1 340 "0x80210000"
d G "CP2_C2_FVR" 1 341 "0x80220000"
d G "CP2_C3_FVR" 1 342 "0x80230000"
d G "CP2_FVR_FVR" 1 343 "0x80240000"
d G "CP2_A1_VSS" 1 344 "0x80300000"
d G "CP2_C1_VSS" 1 345 "0x80310000"
d G "CP2_C2_VSS" 1 346 "0x80320000"
d G "CP2_C3_VSS" 1 347 "0x80330000"
d G "CP2_FVR_VSS" 1 348 "0x80340000"
d G "CP2_INT_L2H" 1 350 "0x00800000"
d G "CP2_INT_H2L" 1 351 "0x00400000"
d G "CP2_OUT_ON_C4" 1 352 "0x20000000"
d G "CP2_INVERT" 1 353 "0x10000000"
d G "CP2_FAST" 1 354 "0x04000000"
d G "CP2_HYST" 1 355 "0x02000000"
d G "CP2_SYNC" 1 356 "0x01000000"
c L "setup_comparator" 1 3 2 "FUNCTION"
v L "mode" 1 363 "int8" `151 
f B "setup_vref" 1 363 "void(int8 mode)" `150  "Constants used in setup_vref() are:"
d G "VREF_OFF" 1 365 "0"
d G "VREF_ON" 1 366 "0x80"
d G "VREF_ADC_OFF" 1 368 "0"
d G "VREF_ADC_1v024" 1 369 "0x01"
d G "VREF_ADC_2v048" 1 370 "0x02"
d G "VREF_ADC_4v096" 1 371 "0x03"
d G "VREF_COMP_DAC_OFF" 1 373 "0"
d G "VREF_COMP_DAC_1v024" 1 374 "0x04"
d G "VREF_COMP_DAC_2v048" 1 375 "0x08"
d G "VREF_COMP_DAC_4v096" 1 376 "0x0C"
d G "TEMPERATURE_INDICATOR_DISABLED" 1 378 "0"
d G "TEMPERATURE_INDICATOR_ENABLED" 1 379 "0x20"
d G "TEMPERATURE_RANGE_LOW" 1 380 "0"
d G "TEMPERATURE_RANGE_HIGH" 1 381 "0x10"
c L "setup_vref" 1 3 3 "FUNCTION"
v L "mode" 1 386 "int8" `153 
f B "setup_dac" 1 386 "void(int8 mode)" `152 
v L "value" 1 387 "int8" `155 
f B "dac_write" 1 387 "void(int8 value)" `154  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 1 389 "0"
d G "DAC_VSS_VDD" 1 390 "0x80"
d G "DAC_VSS_VREF" 1 391 "0x84"
d G "DAC_OUTPUT1" 1 393 "0x20" "DAC voltage level outputted on DACOUT1 pin"
d G "DAC_OUTPUT2" 1 394 "0x10" "DAC voltage level outputted on DACOUT2 pin"
c L "dac_write" 1 3 3 "FUNCTION"
v L "mode" 1 399 "int32" `157 
v L "shutdown" 1 399 "int16" `158 
v L "dt_rising" 1 399 "int8" `159 
v L "dt_falling" 1 399 "int8" `160 
f B "setup_cwg" 1 399 "void(int32 mode,int16 shutdown,int8 dt_rising,int8 dt_falling)" `156 
f B "cwg_restart" 1 400 "void()" `161 
f B "cwg_status" 1 401 "int8()" `162  "Constants used in SETUP_CWG() first param are:"
d G "CWG_ENABLED" 1 403 "0x0080"
d G "CWG_DISABLED" 1 404 "0"
d G "CWG_OUTPUT_A" 1 405 "0x0020"
d G "CWG_OUTPUT_B" 1 406 "0x0040"
d G "CWG_A_INVERTED" 1 407 "0x0008"
d G "CWG_B_INVERTED" 1 408 "0x0010"
d G "CWG_CLOCK_HFINTOSC" 1 409 "0x0001"
d G "CWG_CLOCK_FOSC" 1 410 "0x0000"
d G "CWG_INPUT_C1OUT" 1 411 "0x0100"
d G "CWG_INPUT_PWM1" 1 412 "0x0200"
d G "CWG_INPUT_PWM2" 1 413 "0x0300"
d G "CWG_INPUT_PWM3" 1 414 "0x0400"
d G "CWG_INPUT_PWM4" 1 415 "0x0500"
d G "CWG_INPUT_NCO1OUT" 1 416 "0x0600"
d G "CWG_INPUT_LC1OUT" 1 417 "0x0700"
d G "CWG_NO_AUTO_SHUTDOWN" 1 421 "0"
d G "CWG_SHUTDOWN_ON_CLC2" 1 422 "0x0001"
d G "CWG_SHUTDOWN_ON_FLT" 1 423 "0x0002"
d G "CWG_SHUTDOWN_ON_COMP1" 1 424 "0x0004"
d G "CWG_AUTO_RESTART" 1 425 "0x0040"
d G "CWG_SHUTDOWN_A_INACTIVE_STATE" 1 427 "0"
d G "CWG_SHUTDOWN_A_TRISTATE" 1 428 "0x1000"
d G "CWG_SHUTDOWN_A_LOW" 1 429 "0x2000"
d G "CWG_SHUTDOWN_A_HIGH" 1 430 "0x3000"
d G "CWG_SHUTDOWN_B_INACTIVE_STATE" 1 432 "0"
d G "CWG_SHUTDOWN_B_TRISTATE" 1 433 "0x4000"
d G "CWG_SHUTDOWN_B_LOW" 1 434 "0x8000"
d G "CWG_SHUTDOWN_B_HIGH" 1 435 "0xC000"
d G "CWG_AUTO_SHUTDOWN" 1 438 "0x80"
c L "cwg_status" 1 3 5 "FUNCTION"
v L "mode" 1 445 "int32" `164 
v L "inc_value" 1 445 "int16" `165 
f B "setup_nco" 1 445 "void(int32 mode,int16 inc_value)" `163 
v L "value" 1 446 "int16" `167 
f B "set_nco_inc_value" 1 446 "void(int16 value)" `166 
v L "value" 1 447 "int16" `169 
f B "set_nco_accumulator" 1 447 "void(int16 value)" `168 
f B "get_nco_accumulator" 1 448 "int16()" `170 
f B "get_nco_inc_value" 1 449 "int16()" `171  "Constants used in SETUP_NCO() first param are:"
d G "NCO_ENABLED" 1 451 "0x0080"
d G "NCO_DISABLED" 1 452 "0"
d G "NCO_OUTPUT" 1 453 "0x0040"
d G "NCO_ACTIVE_HIGH" 1 454 "0x0010"
d G "NCO_ADCIVE_LOW" 1 455 "0"
d G "NCO_PULSE_FREQ_MODE" 1 456 "0x0001"
d G "NCO_FIXED_DUTY_MODE" 1 457 "0"
d G "NCO_CLOCK_NCO1CLK" 1 459 "0x0300"
d G "NCO_CLOCK_LC1OUT" 1 460 "0x0200"
d G "NCO_CLOCK_FOSC" 1 461 "0x0100"
d G "NCO_CLOCK_HFINOSC" 1 462 "0"
d G "NCO_PULSE_WIDTH_1" 1 464 "0"
d G "NCO_PULSE_WIDTH_2" 1 465 "0x2000"
d G "NCO_PULSE_WIDTH_4" 1 466 "0x4000"
d G "NCO_PULSE_WIDTH_8" 1 467 "0x6000"
d G "NCO_PULSE_WIDTH_16" 1 468 "0x8000"
d G "NCO_PULSE_WIDTH_32" 1 469 "0xA000"
d G "NCO_PULSE_WIDTH_64" 1 470 "0xC000"
d G "NCO_PULSE_WIDTH_128" 1 471 "0xE000"
d G "NCO_NCO1_C6" 1 473 "0x10000"
d G "NCO_NCO1_C1" 1 474 "0"
c L "get_nco_inc_value" 1 3 4 "FUNCTION"
v L "mode" 1 482 "int32" `174 
f B "setup_clc1" 1 482 "void(int32 mode)" `173 
v L "mode" 1 483 "int32" `176 
f B "setup_clc2" 1 483 "void(int32 mode)" `175 
v L "mode" 1 484 "int32" `178 
f B "setup_clc3" 1 484 "void(int32 mode)" `177 
v L "mode" 1 485 "int32" `180 
f B "setup_clc4" 1 485 "void(int32 mode)" `179 
v L "input" 1 486 "int8" `182 
v L "selection" 1 486 "int8" `183 
f B "clc1_setup_input" 1 486 "void(int8 input,int8 selection)" `181 
v L "input" 1 487 "int8" `185 
v L "selection" 1 487 "int8" `186 
f B "clc2_setup_input" 1 487 "void(int8 input,int8 selection)" `184 
v L "input" 1 488 "int8" `188 
v L "selection" 1 488 "int8" `189 
f B "clc3_setup_input" 1 488 "void(int8 input,int8 selection)" `187 
v L "input" 1 489 "int8" `191 
v L "selection" 1 489 "int8" `192 
f B "clc4_setup_input" 1 489 "void(int8 input,int8 selection)" `190 
v L "gate" 1 490 "int8" `194 
v L "mode" 1 490 "int16" `195 
f B "clc1_setup_gate" 1 490 "void(int8 gate,int16 mode)" `193 
v L "gate" 1 491 "int8" `197 
v L "mode" 1 491 "int16" `198 
f B "clc2_setup_gate" 1 491 "void(int8 gate,int16 mode)" `196 
v L "gate" 1 492 "int8" `200 
v L "mode" 1 492 "int16" `201 
f B "clc3_setup_gate" 1 492 "void(int8 gate,int16 mode)" `199 
v L "gate" 1 493 "int8" `203 
v L "mode" 1 493 "int16" `204 
f B "clc4_setup_gate" 1 493 "void(int8 gate,int16 mode)" `202  "Constants used in SETUP_CLCx() are:"
d G "CLC_ENABLED" 1 495 "0x080"
d G "CLC_DISABLED" 1 496 "0"
d G "CLC_OUTPUT" 1 497 "0x040"
d G "CLC_INT_L_TO_H" 1 498 "0x010"
d G "CLC_INT_H_TO_L" 1 499 "0x008"
d G "CLC_OUTPUT_INVERTED" 1 500 "0x100"
d G "CLC_MODE_AND_OR" 1 502 "0x000"
d G "CLC_MODE_OR_XOR" 1 503 "0x001"
d G "CLC_MODE_AND" 1 504 "0x002"
d G "CLC_MODE_SR_LATCH" 1 505 "0x003"
d G "CLC_MODE_1_INPUT_D_FLIP_FLOP" 1 506 "0x004"
d G "CLC_MODE_2_INPUT_D_FLIP_FLOP" 1 507 "0x005"
d G "CLC_MODE_JK_FLIP_FLOP" 1 508 "0x006"
d G "CLC_MODE_1_INPUT_TRANSPARENT_LATCH" 1 509 "0x007"
d G "CLC_CLC1_C5" 1 511 "0x10000"
d G "CLC_CLC1_A2" 1 512 "0"
d G "CLC_INPUT_0" 1 515 "0"
d G "CLC_INPUT_1" 1 516 "0x01"
d G "CLC_INPUT_2" 1 517 "0x02"
d G "CLC_INPUT_3" 1 518 "0x03"
d G "CLC_INPUT_4" 1 519 "0x04"
d G "CLC_INPUT_5" 1 520 "0x05"
d G "CLC_INPUT_6" 1 521 "0x06"
d G "CLC_INPUT_7" 1 522 "0x07"
d G "CLC_GATE_AND" 1 525 "0x155"
d G "CLC_GATE_NAND" 1 526 "0x055"
d G "CLC_GATE_NOR" 1 527 "0x1AA"
d G "CLC_GATE_OR" 1 528 "0x0AA"
d G "CLC_GATE_CLEAR" 1 529 "0"
d G "CLC_GATE_SET" 1 530 "0x100"
c L "clc4_setup_gate" 1 3 2 "FUNCTION"
v L "mode" 1 540 "int8" `210 
f B "setup_oscillator" 1 540 "void(int8 mode)" `209  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 543 "0"
d G "OSC_31250" 1 544 " (2*8)"
d G "OSC_62KHZ" 1 545 " (4*8)"
d G "OSC_125KHZ" 1 546 " (5*8)"
d G "OSC_250KHZ" 1 547 " (6*8)"
d G "OSC_500KHZ" 1 548 " (7*8)"
d G "OSC_1MHZ" 1 549 " (11*8)"
d G "OSC_2MHZ" 1 550 " (12*8)"
d G "OSC_4MHZ" 1 551 " (13*8)"
d G "OSC_8MHZ" 1 552 " (14*8)"
d G "OSC_16MHZ" 1 553 " (15*8)"
d G "OSC_SOSC" 1 555 "1"
d G "OSC_INTRC" 1 556 "2"
d G "OSC_NORMAL" 1 557 "0"
c L "setup_oscillator" 1 3 3 "FUNCTION"
v L "mode" 1 562 "int8" `212 
f B "setup_pwm1" 1 562 "void(int8 mode)" `211 
v L "value" 1 563 "int16" `214 
f B "set_pwm1_duty" 1 563 "void(int16 value)" `213 
v L "mode" 1 564 "int8" `216 
f B "setup_pwm2" 1 564 "void(int8 mode)" `215 
v L "value" 1 565 "int16" `218 
f B "set_pwm2_duty" 1 565 "void(int16 value)" `217 
v L "mode" 1 566 "int8" `220 
f B "setup_pwm3" 1 566 "void(int8 mode)" `219 
v L "value" 1 567 "int16" `222 
f B "set_pwm3_duty" 1 567 "void(int16 value)" `221 
v L "mode" 1 568 "int8" `224 
f B "setup_pwm4" 1 568 "void(int8 mode)" `223 
v L "value" 1 569 "int16" `226 
f B "set_pwm4_duty" 1 569 "void(int16 value)" `225  "Constants used for SETUP_PWMx() are:"
d G "PWM_ENABLED" 1 571 "0x80"
d G "PWM_DISABLED" 1 572 "0"
d G "PWM_OUTPUT" 1 573 "0x40"
d G "PWM_ACTIVE_LOW" 1 574 "0x10"
d G "PWM_ACTIVE_HIGH" 1 575 "0"
c L "set_pwm4_duty" 1 3 4 "FUNCTION"
v L "mode" 1 588 "int16" `232 
f B "setup_adc" 1 588 "void(int16 mode)" `231 
f B "read_adc" 1 589 "int8()" `233 
v L "mode" 1 590 "int8" `235 
f G "read_adc" 1 590 "int8(int8 mode)" `234 
f G "read_adc" 1 591 "int16()" `236 
v L "mode" 1 592 "int8" `238 
f G "read_adc" 1 592 "int16(int8 mode)" `237 
f B "adc_done" 1 593 "int8()" `239  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 595 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 596 "0x100"
d G "ADC_CLOCK_DIV_4" 1 597 "0x40"
d G "ADC_CLOCK_DIV_8" 1 598 "0x10"
d G "ADC_CLOCK_DIV_32" 1 599 "0x20"
d G "ADC_CLOCK_DIV_16" 1 600 "0x50"
d G "ADC_CLOCK_DIV_64" 1 601 "0x60"
d G "ADC_CLOCK_INTERNAL" 1 602 "0x30" "Internal 2-6us"
c L "adc_done" 1 3 1 "FUNCTION"
v L "pins" 1 605 "int32" `241 
f B "setup_adc_ports" 1 605 "void(int32 pins)" `240 
v L "pins" 1 606 "int32" `243 
v L "reference" 1 606 "int32" `244 
f B "setup_adc_ports" 1 606 "void(int32 pins,int32 reference)" `242 
v L "channel" 1 607 "int8" `246 
f B "set_adc_channel" 1 607 "void(int8 channel)" `245  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 1 611 "0x00010000" "| A0"
d G "sAN1" 1 612 "0x00020000" "| A1"
d G "sAN2" 1 613 "0x00040000" "| A2"
d G "sAN3" 1 614 "0x00100000" "| A4"
d G "sAN4" 1 615 "0x00000100" "| C0"
d G "sAN5" 1 616 "0x00000200" "| C1"
d G "sAN6" 1 617 "0x00000400" "| C2"
d G "sAN7" 1 618 "0x00000800" "| C3"
d G "sAN8" 1 619 "0x00004000" "| C6"
d G "sAN9" 1 620 "0x00008000" "| C7"
d G "sAN10" 1 621 "0x00000010" "| B4"
d G "sAN11" 1 622 "0x00000020" "| B5"
d G "NO_ANALOGS" 1 623 "0" "None"
d G "ALL_ANALOG" 1 624 "0x0017CF30" "A0 A1 A2 A4 C0 C1 C2 C3 C6 C7 B4 B5"
d G "VSS_VDD" 1 627 "0x00000000" "| Range 0-Vdd"
d G "VSS_VREF" 1 628 "0x02000000" "| Range 0-VrefH"
d G "TEMPERATURE_INDICATOR" 1 632 "0x1D"
d G "DAC_CHANNEL" 1 633 "0x1E"
d G "FVR_CHANNEL" 1 634 "0x1F"
d G "ADC_START_AND_READ" 1 637 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 638 "1"
d G "ADC_READ_ONLY" 1 639 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
v L "x" 1 645 "sint8" `248 
f B "abs" 1 645 "sint8(sint8 x)" `247 
v L "x" 1 646 "sint16" `250 
f B "abs" 1 646 "sint16(sint16 x)" `249 
v L "x" 1 647 "sint32" `252 
f G "abs" 1 647 "sint32(sint32 x)" `251 
v L "x" 1 648 "float" `254 
f G "abs" 1 648 "float(float x)" `253 
v L "??65535" 1 649 "int8" `256 
v L "??65535" 1 649 "int8" `257 
f B "_mul" 1 649 "int16(int8 ,int8 )" `255 
v L "??65535" 1 650 "sint8" `256 
v L "??65535" 1 650 "sint8" `260 
f G "_mul" 1 650 "sint16(sint8 ,sint8 )" `258 
v L "??65535" 1 651 "int16" `256 
v L "??65535" 1 651 "int16" `263 
f G "_mul" 1 651 "int32(int16 ,int16 )" `261 
v L "??65535" 1 652 "sint16" `256 
v L "??65535" 1 652 "sint16" `266 
f G "_mul" 1 652 "sint32(sint16 ,sint16 )" `264  "Memory Manipulation Prototypes:"
v L "bank" 1 655 "int8" `268 
v L "offset" 1 655 "int8" `269 
f B "read_bank" 1 655 "int8(int8 bank,int8 offset)" `267 
v L "bank" 1 656 "int8" `271 
v L "offset" 1 656 "int8" `272 
v L "value" 1 656 "int8" `273 
f B "write_bank" 1 656 "void(int8 bank,int8 offset,int8 value)" `270 
v L "dest" 1 657 "*int8" `275 
v L "src" 1 657 "*int8" `276 
f B "strcpy" 1 657 "void(*int8 dest,*int8 src)" `274 
v L "dest" 1 658 "*int8" `278 
v L "src" 1 658 "*int8" `279 
f B "strcopy" 1 658 "void(*int8 dest,*int8 src)" `277 
v L "destination" 1 659 "*int8" `281 
v L "value" 1 659 "int8" `282 
v L "num" 1 659 "int16" `283 
f B "memset" 1 659 "void(*int8 destination,int8 value,int16 num)" `280 
v L "destination" 1 660 "*int8" `285 
v L "source" 1 660 "*int8" `286 
v L "num" 1 660 "int16" `287 
f B "memcpy" 1 660 "void(*int8 destination,*int8 source,int16 num)" `284  "String Prototypes:"
v L "cvalue" 1 663 "int8" `289 
f B "toupper" 1 663 "int8(int8 cvalue)" `288 
v L "cvalue" 1 664 "int8" `291 
f B "tolower" 1 664 "int8(int8 cvalue)" `290 
v L "string" 1 665 "*int8" `293 
v L "cstring" 1 665 "*int8" `294 
f B "sprintf" 1 665 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `292  "Data Manipulators Prototypes:"
v L "address" 1 668 "*int8" `297 
v L "bytes" 1 668 "int8" `298 
v L "value" 1 668 "int8" `299 
f B "shift_left" 1 668 "int8(*int8 address,int8 bytes,int8 value)" `296 
v L "address" 1 669 "*int8" `301 
v L "bytes" 1 669 "int8" `302 
v L "value" 1 669 "int8" `303 
f B "shift_right" 1 669 "int8(*int8 address,int8 bytes,int8 value)" `300 
v L "address" 1 670 "*int8" `305 
v L "bytes" 1 670 "int8" `306 
f B "rotate_left" 1 670 "void(*int8 address,int8 bytes)" `304 
v L "address" 1 671 "*int8" `308 
v L "bytes" 1 671 "int8" `309 
f B "rotate_right" 1 671 "void(*int8 address,int8 bytes)" `307 
v L "value" 1 672 "int8" `311 
f B "swap" 1 672 "void(int8 value)" `310 
v L "var" 1 673 "int16" `313 
v L "offset" 1 673 "int8" `314 
f B "make8" 1 673 "int8(int16 var,int8 offset)" `312 
v L "var" 1 674 "int32" `313 
v L "offset" 1 674 "int8" `317 
f G "make8" 1 674 "int8(int32 var,int8 offset)" `315 
v L "varhigh" 1 675 "int8" `319 
v L "varlow" 1 675 "int8" `320 
f B "make16" 1 675 "int16(int8 varhigh,int8 varlow)" `318 
v L "var1" 1 676 "int16" `322 
f B "make32" 1 676 "int32(int16 var1)" `321 
v L "var1" 1 677 "int16" `324 
v L "var2" 1 677 "int16" `325 
f G "make32" 1 677 "int32(int16 var1,int16 var2)" `323 
v L "var1" 1 678 "int16" `324 
v L "var2" 1 678 "int8" `328 
f G "make32" 1 678 "int32(int16 var1,int8 var2)" `326 
v L "var1" 1 679 "int16" `330 
v L "var2" 1 679 "int8" `331 
v L "var3" 1 679 "int8" `332 
f G "make32" 1 679 "int32(int16 var1,int8 var2,int8 var3)" `329 
v L "var1" 1 680 "int8" `334 
f G "make32" 1 680 "int32(int8 var1)" `333 
v L "var1" 1 681 "int8" `324 
v L "var2" 1 681 "int8" `337 
f G "make32" 1 681 "int32(int8 var1,int8 var2)" `335 
v L "var1" 1 682 "int8" `330 
v L "var2" 1 682 "int8" `331 
v L "var3" 1 682 "int8" `341 
f G "make32" 1 682 "int32(int8 var1,int8 var2,int8 var3)" `338 
v L "var1" 1 683 "int8" `343 
v L "var2" 1 683 "int8" `344 
v L "var3" 1 683 "int8" `345 
v L "var4" 1 683 "int8" `346 
f G "make32" 1 683 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `342 
v L "var1" 1 684 "int8" `324 
v L "var2" 1 684 "int16" `349 
f G "make32" 1 684 "int32(int8 var1,int16 var2)" `347 
v L "var1" 1 685 "int8" `330 
v L "var2" 1 685 "int16" `331 
v L "var3" 1 685 "int8" `353 
f G "make32" 1 685 "int32(int8 var1,int16 var2,int8 var3)" `350 
v L "var1" 1 686 "int8" `330 
v L "var2" 1 686 "int8" `331 
v L "var3" 1 686 "int16" `357 
f G "make32" 1 686 "int32(int8 var1,int8 var2,int16 var3)" `354 
v L "var" 1 687 "int8" `359 
v L "bit" 1 687 "int8" `360 
f B "bit_set" 1 687 "void(int8 var,int8 bit)" `358 
v L "var" 1 688 "int16" `359 
v L "bit" 1 688 "int8" `363 
f G "bit_set" 1 688 "void(int16 var,int8 bit)" `361 
v L "var" 1 689 "int32" `359 
v L "bit" 1 689 "int8" `366 
f G "bit_set" 1 689 "void(int32 var,int8 bit)" `364 
v L "var" 1 690 "int8" `368 
v L "bit" 1 690 "int8" `369 
f B "bit_clear" 1 690 "void(int8 var,int8 bit)" `367 
v L "var" 1 691 "int16" `368 
v L "bit" 1 691 "int8" `372 
f G "bit_clear" 1 691 "void(int16 var,int8 bit)" `370 
v L "var" 1 692 "int32" `368 
v L "bit" 1 692 "int8" `375 
f G "bit_clear" 1 692 "void(int32 var,int8 bit)" `373 
v L "var" 1 693 "int8" `377 
v L "bit" 1 693 "int8" `378 
f B "bit_test" 1 693 "int8(int8 var,int8 bit)" `376 
v L "var" 1 694 "int16" `377 
v L "bit" 1 694 "int8" `381 
f G "bit_test" 1 694 "int8(int16 var,int8 bit)" `379 
v L "var" 1 695 "int32" `377 
v L "bit" 1 695 "int8" `384 
f G "bit_test" 1 695 "int8(int32 var,int8 bit)" `382  "#use delay() Prototypes:"
v L "count" 1 698 "int8" `386 
f B "delay_cycles" 1 698 "void(int8 count)" `385 
v L "time" 1 699 "int16" `388 
f B "delay_ms" 1 699 "void(int16 time)" `387 
v L "time" 1 700 "int16" `390 
f B "delay_us" 1 700 "void(int16 time)" `389  "#use rs232() Prototypes:"
v L "cdata" 1 703 "int8" `392 
f B "putchar" 1 703 "void(int8 cdata)" `391 
v L "cdata" 1 704 "int8" `394 
v L "stream" 1 704 "int8" `395 
f G "putchar" 1 704 "void(int8 cdata,int8 stream)" `393 
v L "string" 1 705 "*int8" `397 
f B "puts" 1 705 "void(*int8 string)" `396 
v L "string" 1 706 "*int8" `399 
v L "stream" 1 706 "int8" `400 
f B "puts" 1 706 "void(*int8 string,int8 stream)" `398 
f B "getch" 1 707 "int8()" `401 
v L "stream" 1 708 "int8" `403 
f B "getch" 1 708 "int8(int8 stream)" `402 
v L "string" 1 709 "*int8" `405 
f B "gets" 1 709 "void(*int8 string)" `404 
v L "string" 1 710 "*int8" `407 
v L "stream" 1 710 "int8" `408 
f G "gets" 1 710 "void(*int8 string,int8 stream)" `406 
f B "kbhit" 1 711 "int8()" `409 
v L "stream" 1 712 "int8" `411 
f G "kbhit" 1 712 "int8(int8 stream)" `410 
v L "string" 1 713 "*int8" `413 
f B "printf" 1 713 "void(*int8 string,*int8 _VA_LIST)" `412 
v L "stream" 1 714 "int8" `416 
v L "string" 1 714 "*int8" `417 
f B "fprintf" 1 714 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `415 
f B "putc_send" 1 715 "void()" `419 
v L "stream" 1 716 "int8" `421 
f B "fputc_send" 1 716 "void(int8 stream)" `420 
f B "rcv_buffer_full" 1 717 "int8()" `422 
v L "stream" 1 718 "int8" `424 
f G "rcv_buffer_full" 1 718 "int8(int8 stream)" `423 
f B "rcv_buffer_bytes" 1 719 "int16()" `425 
v L "stream" 1 720 "int8" `427 
f G "rcv_buffer_bytes" 1 720 "int16(int8 stream)" `426 
f B "tx_buffer_full" 1 721 "int8()" `428 
v L "stream" 1 722 "int8" `430 
f G "tx_buffer_full" 1 722 "int8(int8 stream)" `429 
f B "tx_buffer_bytes" 1 723 "int16()" `431 
v L "stream" 1 724 "int8" `433 
f G "tx_buffer_bytes" 1 724 "int16(int8 stream)" `432  "#use i2c() Prototypes:"
f B "i2c_read" 1 727 "int8()" `434 
v L "stream" 1 728 "int8" `436 
f G "i2c_read" 1 728 "int8(int8 stream)" `435 
v L "stream" 1 729 "int8" `438 
v L "ack" 1 729 "int8" `439 
f G "i2c_read" 1 729 "int8(int8 stream,int8 ack)" `437 
v L "data" 1 730 "int8" `441 
f B "i2c_write" 1 730 "int8(int8 data)" `440 
v L "stream" 1 731 "int8" `443 
v L "data" 1 731 "int8" `444 
f G "i2c_write" 1 731 "int8(int8 stream,int8 data)" `442 
f B "i2c_start" 1 732 "void()" `445 
v L "stream" 1 733 "int8" `447 
f G "i2c_start" 1 733 "void(int8 stream)" `446 
v L "stream" 1 734 "int8" `449 
v L "restart" 1 734 "int8" `450 
f B "i2c_start" 1 734 "void(int8 stream,int8 restart)" `448 
f B "i2c_stop" 1 735 "void()" `451 
v L "stream" 1 736 "int8" `453 
f G "i2c_stop" 1 736 "void(int8 stream)" `452 
f B "i2c_isr_state" 1 737 "int8()" `454 
v L "addr" 1 738 "int8" `456 
f B "i2c_slaveaddr" 1 738 "void(int8 addr)" `455 
v L "stream" 1 739 "int8" `458 
v L "addr" 1 739 "int8" `459 
f G "i2c_slaveaddr" 1 739 "void(int8 stream,int8 addr)" `457 
f B "i2c_poll" 1 740 "int8()" `460 
v L "stream" 1 741 "int8" `462 
f B "i2c_poll" 1 741 "int8(int8 stream)" `461 
v L "baud" 1 742 "int32" `464 
f B "i2c_init" 1 742 "void(int32 baud)" `463 
v L "stream" 1 743 "int8" `466 
v L "baud" 1 743 "int32" `467 
f G "i2c_init" 1 743 "void(int8 stream,int32 baud)" `465  "#use spi() Prototypes:"
f B "spi_xfer" 1 746 "int8()" `468 
f B "spi_xfer" 1 747 "int16()" `469 
f G "spi_xfer" 1 748 "int32()" `470 
v L "data" 1 749 "int8" `472 
f G "spi_xfer" 1 749 "int8(int8 data)" `471 
v L "data" 1 750 "int16" `474 
f G "spi_xfer" 1 750 "int16(int16 data)" `473 
v L "data" 1 751 "int32" `476 
f G "spi_xfer" 1 751 "int32(int32 data)" `475 
v L "stream" 1 752 "int8" `478 
v L "data" 1 752 "int8" `479 
f B "spi_xfer" 1 752 "int8(int8 stream,int8 data)" `477 
v L "stream" 1 753 "int8" `478 
v L "data" 1 753 "int16" `482 
f G "spi_xfer" 1 753 "int16(int8 stream,int16 data)" `480 
v L "stream" 1 754 "int8" `478 
v L "data" 1 754 "int32" `485 
f G "spi_xfer" 1 754 "int32(int8 stream,int32 data)" `483 
v L "stream" 1 755 "int8" `487 
v L "data" 1 755 "int8" `488 
v L "bits" 1 755 "int8" `489 
f B "spi_xfer" 1 755 "int8(int8 stream,int8 data,int8 bits)" `486 
v L "stream" 1 756 "int8" `487 
v L "data" 1 756 "int16" `488 
v L "bits" 1 756 "int8" `493 
f B "spi_xfer" 1 756 "int16(int8 stream,int16 data,int8 bits)" `490 
v L "stream" 1 757 "int8" `487 
v L "data" 1 757 "int32" `488 
v L "bits" 1 757 "int8" `497 
f G "spi_xfer" 1 757 "int32(int8 stream,int32 data,int8 bits)" `494 
v L "baud" 1 758 "int32" `499 
f B "spi_init" 1 758 "void(int32 baud)" `498 
v L "stream" 1 759 "int8" `501 
v L "baud" 1 759 "int32" `502 
f G "spi_init" 1 759 "void(int8 stream,int32 baud)" `500 
v L "baud" 1 760 "int32" `504 
f B "spi_speed" 1 760 "void(int32 baud)" `503 
v L "stream" 1 761 "int8" `506 
v L "baud" 1 761 "int32" `507 
f G "spi_speed" 1 761 "void(int8 stream,int32 baud)" `505 
v L "stream" 1 762 "int8" `509 
v L "baud" 1 762 "int32" `510 
v L "clock" 1 762 "int32" `511 
f G "spi_speed" 1 762 "void(int8 stream,int32 baud,int32 clock)" `508 
v L "data" 1 763 "int8" `513 
f B "spi_prewrite" 1 763 "void(int8 data)" `512 
v L "data" 1 764 "int16" `515 
f G "spi_prewrite" 1 764 "void(int16 data)" `514 
v L "data" 1 765 "int32" `517 
f G "spi_prewrite" 1 765 "void(int32 data)" `516 
v L "??65535" 1 766 "int8" `519 
v L "data" 1 766 "int8" `520 
f G "spi_prewrite" 1 766 "void(int8 ,int8 data)" `518 
v L "??65535" 1 767 "int8" `519 
v L "data" 1 767 "int16" `523 
f G "spi_prewrite" 1 767 "void(int8 ,int16 data)" `521 
v L "??65535" 1 768 "int8" `519 
v L "data" 1 768 "int32" `526 
f G "spi_prewrite" 1 768 "void(int8 ,int32 data)" `524 
f B "spi_xfer_in" 1 769 "int8()" `527 
f G "spi_xfer_in" 1 770 "int16()" `528 
f G "spi_xfer_in" 1 771 "int32()" `529 
v L "bits" 1 772 "int8" `531 
f G "spi_xfer_in" 1 772 "int8(int8 bits)" `530 
v L "bits" 1 773 "int8" `533 
f G "spi_xfer_in" 1 773 "int16(int8 bits)" `532 
v L "bits" 1 774 "int8" `535 
f G "spi_xfer_in" 1 774 "int32(int8 bits)" `534 
v L "stream" 1 775 "int8" `537 
v L "bits" 1 775 "int8" `538 
f G "spi_xfer_in" 1 775 "int8(int8 stream,int8 bits)" `536 
v L "stream" 1 776 "int8" `537 
v L "bits" 1 776 "int8" `541 
f G "spi_xfer_in" 1 776 "int16(int8 stream,int8 bits)" `539 
v L "stream" 1 777 "int8" `537 
v L "bits" 1 777 "int8" `544 
f G "spi_xfer_in" 1 777 "int32(int8 stream,int8 bits)" `542  "#use rtos() Prototypes:"
f B "rtos_run" 1 780 "void()" `545 
f B "rtos_yield" 1 781 "void()" `546 
v L "task" 1 782 "int8" `548 
f B "rtos_enable" 1 782 "void(int8 task)" `547 
v L "task" 1 783 "int8" `550 
f B "rtos_disable" 1 783 "void(int8 task)" `549 
f B "rtos_terminate" 1 784 "void()" `551 
v L "flag" 1 785 "int8" `553 
f B "rtos_await" 1 785 "void(int8 flag)" `552 
v L "sem" 1 786 "int8" `555 
f B "rtos_wait" 1 786 "void(int8 sem)" `554 
v L "sem" 1 787 "int8" `557 
f B "rtos_signal" 1 787 "void(int8 sem)" `556 
v L "task" 1 788 "int8" `559 
v L "msg" 1 788 "int8" `560 
f B "rtos_msg_send" 1 788 "void(int8 task,int8 msg)" `558 
f B "rtos_msg_read" 1 789 "int8()" `561 
f B "rtos_msg_poll" 1 790 "int8()" `562 
v L "task" 1 791 "int8" `564 
f B "rtos_overrun" 1 791 "int8(int8 task)" `563 
v L "task" 1 792 "int8" `566 
v L "stat" 1 792 "*int8" `567 
f B "rtos_stats" 1 792 "void(int8 task,*int8 stat)" `565  "#use timer() Prototypes:"
f B "get_ticks" 1 795 "int8()" `568 
f G "get_ticks" 1 796 "int16()" `569 
f G "get_ticks" 1 797 "int32()" `570 
v L "stream" 1 798 "int8" `572 
f G "get_ticks" 1 798 "int8(int8 stream)" `571 
v L "stream" 1 799 "int8" `574 
f G "get_ticks" 1 799 "int16(int8 stream)" `573 
v L "stream" 1 800 "int8" `576 
f G "get_ticks" 1 800 "int32(int8 stream)" `575 
v L "value" 1 801 "int8" `578 
f B "set_ticks" 1 801 "void(int8 value)" `577 
v L "value" 1 802 "int16" `580 
f G "set_ticks" 1 802 "void(int16 value)" `579 
v L "value" 1 803 "int32" `582 
f G "set_ticks" 1 803 "void(int32 value)" `581 
v L "stream" 1 804 "int8" `584 
v L "value" 1 804 "int8" `585 
f G "set_ticks" 1 804 "void(int8 stream,int8 value)" `583 
v L "stream" 1 805 "int8" `584 
v L "value" 1 805 "int16" `588 
f G "set_ticks" 1 805 "void(int8 stream,int16 value)" `586 
v L "stream" 1 806 "int8" `584 
v L "value" 1 806 "int32" `591 
f G "set_ticks" 1 806 "void(int8 stream,int32 value)" `589  "#use pwm() Prototypes:"
f B "pwm_on" 1 809 "void()" `592 
v L "stream" 1 810 "int8" `594 
f G "pwm_on" 1 810 "void(int8 stream)" `593 
f B "pwm_off" 1 811 "void()" `595 
v L "stream" 1 812 "int8" `597 
f G "pwm_off" 1 812 "void(int8 stream)" `596 
v L "duty" 1 813 "int16" `599 
f B "pwm_set_duty" 1 813 "void(int16 duty)" `598 
v L "stream" 1 814 "int8" `601 
v L "duty" 1 814 "int16" `602 
f G "pwm_set_duty" 1 814 "void(int8 stream,int16 duty)" `600 
v L "percent" 1 815 "int16" `604 
f B "pwm_set_duty_percent" 1 815 "void(int16 percent)" `603 
v L "stream" 1 816 "int8" `606 
v L "percent" 1 816 "int16" `607 
f G "pwm_set_duty_percent" 1 816 "void(int8 stream,int16 percent)" `605 
v L "frequency" 1 817 "int32" `609 
f B "pwm_set_frequency" 1 817 "void(int32 frequency)" `608 
v L "stream" 1 818 "int8" `611 
v L "frequency" 1 818 "int32" `612 
f G "pwm_set_frequency" 1 818 "void(int8 stream,int32 frequency)" `610  "#use capture() Prototypes:"
f B "get_capture_time" 1 821 "int16()" `613 
v L "stream" 1 822 "int8" `615 
f G "get_capture_time" 1 822 "int16(int8 stream)" `614 
f B "get_capture_event" 1 823 "int8()" `616 
v L "stream" 1 824 "int8" `618 
f G "get_capture_event" 1 824 "int8(int8 stream)" `617  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
v L "address" 1 837 "int16" `620 
f B "goto_address" 1 837 "void(int16 address)" `619 
v L "label" 1 838 "int16" `622 
f B "label_address" 1 838 "int16(int16 label)" `621  "Program Memory Prototypes:"
v L "address" 1 841 "int16" `624 
v L "dataptr" 1 841 "*int8" `625 
v L "count" 1 841 "int16" `626 
f B "read_program_memory" 1 841 "void(int16 address,*int8 dataptr,int16 count)" `623 
v L "address" 1 842 "int16" `628 
f B "read_program_eeprom" 1 842 "int16(int16 address)" `627 
v L "address" 1 843 "int16" `630 
f B "erase_program_eeprom" 1 843 "void(int16 address)" `629 
v L "address" 1 844 "int16" `632 
v L "dataptr" 1 844 "*int8" `633 
v L "count" 1 844 "int16" `634 
f B "write_program_memory" 1 844 "void(int16 address,*int8 dataptr,int16 count)" `631 
v L "address" 1 845 "int16" `636 
v L "data" 1 845 "int16" `637 
f B "write_program_eeprom" 1 845 "void(int16 address,int16 data)" `635  "INT"
c L "write_program_eeprom" 1 3 4 "FUNCTION"
v L "interrupt" 1 852 "int32" `639 
f B "enable_interrupts" 1 852 "void(int32 interrupt)" `638 
v L "interrupt" 1 853 "int32" `641 
f B "disable_interrupts" 1 853 "void(int32 interrupt)" `640 
v L "interrupt" 1 854 "int32" `643 
f B "clear_interrupt" 1 854 "void(int32 interrupt)" `642 
v L "interrupt" 1 855 "int32" `645 
f B "interrupt_active" 1 855 "int8(int32 interrupt)" `644 
v L "interrupt" 1 856 "int32" `647 
f B "interrupt_enabled" 1 856 "int8(int32 interrupt)" `646 
v L "source" 1 857 "int8" `649 
v L "edge" 1 857 "int8" `650 
f B "ext_int_edge" 1 857 "void(int8 source,int8 edge)" `648 
v L "address" 1 858 "int16" `652 
f B "jump_to_isr" 1 858 "void(int16 address)" `651  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 860 "0x40"
d G "H_TO_L" 1 861 "0"
d G "GLOBAL" 1 863 "0x0BC0"
d G "PERIPH" 1 864 "0x0B40"
d G "INT_RB" 1 865 "0x31FF0B08"
d G "INT_EXT_L2H" 1 866 "0x50000B10"
d G "INT_EXT_H2L" 1 867 "0x60000B10"
d G "INT_EXT" 1 868 "0x300B10"
d G "INT_TIMER0" 1 869 "0x300B20"
d G "INT_TIMER1" 1 870 "0x309101"
d G "INT_TIMER2" 1 871 "0x309102"
d G "INT_SSP" 1 872 "0x309108"
d G "INT_TBE" 1 873 "0x309110"
d G "INT_RDA" 1 874 "0x309120"
d G "INT_AD" 1 875 "0x309140"
d G "INT_TIMER1_GATE" 1 876 "0x309180"
d G "INT_BUSCOL" 1 877 "0x309208"
d G "INT_COMP" 1 878 "0x309220"
d G "INT_COMP2" 1 879 "0x309240"
d G "INT_OSC_FAIL" 1 880 "0x309280"
d G "INT_RA" 1 881 "0x30FF0B08"
d G "INT_NCO" 1 882 "0x309204"
d G "INT_CLC" 1 883 "0x309301"
d G "INT_CLC2" 1 884 "0x309302"
d G "INT_CLC3" 1 885 "0x309304"
d G "INT_CLC4" 1 886 "0x309308"
d G "INT_RA0" 1 887 "0x30010B08"
d G "INT_RA0_L2H" 1 888 "0x10010B08"
d G "INT_RA0_H2L" 1 889 "0x20010B08"
d G "INT_RA1" 1 890 "0x30020B08"
d G "INT_RA1_L2H" 1 891 "0x10020B08"
d G "INT_RA1_H2L" 1 892 "0x20020B08"
d G "INT_RA2" 1 893 "0x30040B08"
d G "INT_RA2_L2H" 1 894 "0x10040B08"
d G "INT_RA2_H2L" 1 895 "0x20040B08"
d G "INT_RA3" 1 896 "0x30080B08"
d G "INT_RA3_L2H" 1 897 "0x10080B08"
d G "INT_RA3_H2L" 1 898 "0x20080B08"
d G "INT_RA4" 1 899 "0x30100B08"
d G "INT_RA4_L2H" 1 900 "0x10100B08"
d G "INT_RA4_H2L" 1 901 "0x20100B08"
d G "INT_RA5" 1 902 "0x30200B08"
d G "INT_RA5_L2H" 1 903 "0x10200B08"
d G "INT_RA5_H2L" 1 904 "0x20200B08"
d G "INT_RB4" 1 905 "0x31100B08"
d G "INT_RB4_L2H" 1 906 "0x11100B08"
d G "INT_RB4_H2L" 1 907 "0x21100B08"
d G "INT_RB5" 1 908 "0x31200B08"
d G "INT_RB5_L2H" 1 909 "0x11200B08"
d G "INT_RB5_H2L" 1 910 "0x21200B08"
d G "INT_RB6" 1 911 "0x31400B08"
d G "INT_RB6_L2H" 1 912 "0x11400B08"
d G "INT_RB6_H2L" 1 913 "0x21400B08"
d G "INT_RB7" 1 914 "0x31800B08"
d G "INT_RB7_L2H" 1 915 "0x11800B08"
d G "INT_RB7_H2L" 1 916 "0x21800B08"
D G "T1" 0 6 "PIN_C7"
D G "T2" 0 7 "PIN_B7"
D G "T_ON" 0 8 "(x)         output_high(x)"
D G "T_OFF" 0 9 "(x)        output_low(x)"
D G "RED_LED" 0 11 "PIN_C4"
D G "GREEN_LED" 0 12 "PIN_C3"
D G "LED_ON" 0 13 "(x)       output_low(x)"
D G "LED_OFF" 0 14 "(x)      output_high(x)"
D G "UP_BUTT" 0 16 "input(PIN_A5)"
D G "DOWN_BUTT" 0 17 "input(PIN_A4)"
D G "BUTT_PRESSED" 0 18 "(x) (!(x))"
D G "RELAY_ON" 0 20 "()      output_high(PIN_C6)"
D G "RELAY_OFF" 0 21 "()     output_low(PIN_C6)"
D G "MAX_RPM" 0 23 "8000"
D G "MIN_RPM" 0 24 "800"
D G "RPM_STEP" 0 25 "100"
D G "MAX_TIME_ON" 0 26 "10000"
D G "LCD_EXTENDED_NEWLINE" 0 28 ""
D G "LCD_ENABLE_PIN" 0 29 "PIN_C2"
D G "LCD_RS_PIN" 0 30 "PIN_C0"
D G "LCD_RW_PIN" 0 31 "PIN_C1"
D G "LCD_DATA4" 0 32 "PIN_B4"
D G "LCD_DATA5" 0 33 "PIN_B5"
D G "LCD_DATA6" 0 34 "PIN_B6"
D G "LCD_DATA7" 0 35 "PIN_A2"
D G "__LCD_C__" 2 76 ""
C L "jump_to_isr" 2 2 2 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 2 "FUNCTION"
T G "LCD_PIN_MAP" 2 90 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `663  "this is to improve compatability with previous LCD drivers that accepted"
D G "lcd_output_enable" 2 112 "(x) output_bit(LCD_ENABLE_PIN, x)"
D G "lcd_enable_tris" 2 113 "()  output_drive(LCD_ENABLE_PIN)"
D G "lcd_output_rs" 2 120 "(x) output_bit(LCD_RS_PIN, x)"
D G "lcd_rs_tris" 2 121 "()  output_drive(LCD_RS_PIN)"
D G "lcd_output_rw" 2 128 "(x) output_bit(LCD_RW_PIN, x)"
D G "lcd_rw_tris" 2 129 "()  output_drive(LCD_RW_PIN)"
D G "LCD_TYPE" 2 179 "2" "0=5x7, 1=5x10, 2=2 lines"
D G "LCD_LINE_TWO" 2 183 "0x40" "LCD RAM address for the second line"
D G "LCD_LINE_LENGTH" 2 187 "20"
f G "lcd_read_nibble" 2 190 "int8()" `664 
F G "lcd_read_byte" 2 193 "int8()" `665 
V L "low" 2 194 "int8" `666 
V L "high" 2 194 "int8" `667 
F G "lcd_read_nibble" 2 240 "int8()" `664 
V L "n" 2 242 "int8" `668 
C L "lcd_read_nibble" 2 2 1 "FUNCTION"
V L "n" 2 256 "int8" `670 
F G "lcd_send_nibble" 2 257 "void(int8 n)" `669 
C L "lcd_send_nibble" 2 2 1 "FUNCTION"
V L "address" 2 274 "int8" `672 
V L "n" 2 274 "int8" `673 
F G "lcd_send_byte" 2 275 "void(int8 address,int8 n)" `671 
V G "g_LcdX" 2 296 "int8" `674 
V G "g_LcdY" 2 296 "int8" `675 
F G "lcd_init" 2 300 "void()" `676 
V L "i" 2 301 "int8" `677 
V L "LCD_INIT_STRING" 2 302 "int8[4]" `678 
C L "lcd_init" 2 2 2 "FUNCTION"
V L "x" 2 345 "int8" `680 
V L "y" 2 345 "int8" `681 
F G "lcd_gotoxy" 2 346 "void(int8 x,int8 y)" `679 
V L "address" 2 347 "int8" `682 
V L "c" 2 363 "int8" `684 
F G "lcd_putc" 2 364 "void(int8 c)" `683 
V L "x" 2 406 "int8" `686 
V L "y" 2 406 "int8" `687 
F G "lcd_getc" 2 407 "int8(int8 x,int8 y)" `685 
V L "value" 2 408 "int8" `688 
C L "lcd_getc" 2 2 1 "FUNCTION"
C L "lcd_set_cgram_char" 2 2 5 "FUNCTION"
V L "which" 2 424 "int8" `690 
V L "ptr" 2 424 "*int8" `691 
F G "lcd_set_cgram_char" 2 425 "void(int8 which,*int8 ptr)" `689 
V L "i" 2 426 "int8" `692 
C L "lcd_set_cgram_char" 2 2 1 "FUNCTION"
C L "lcd_set_cgram_char" 2 2 1 "FUNCTION"
V L "on" 2 443 "int8" `694 
F G "lcd_cursor_on" 2 444 "void(int8 on)" `693 
C L "lcd_cursor_on" 2 2 1 "FUNCTION"
C L "lcd_cursor_on" 2 2 1 "FUNCTION"
V G "mode" 0 38 "int1" `695 
V G "rpm" 0 39 "int16" `696 
V G "time_on" 0 40 "int16" `697 
V G "time_off" 0 40 "int16" `698 
E G "LOGO" 0 41 "1" `700 
E G "MAX_RPM_REACHED" 0 41 "2" `701 
E G "MIN_RPM_REACHED" 0 41 "3" `702 
E G "PRINT_RPM" 0 41 "4" `703 
V G "message" 0 41 "lcd_message" `704 
V G "logo_str" 0 42 "[1]" `705 
f G "chip_init" 0 44 "void()" `708 
f G "nozzle_off" 0 45 "void()" `709 
f G "nozzle_task" 0 46 "void()" `710 
f G "lcd_task" 0 47 "void()" `711 
F G "timer0_isr" 0 51 "void()" `712 
V L "increase" 0 52 "int1" `713 
F G "int_handler" 0 86 "void()" `717 
C L "MAIN" 0 135 1 "FUNCTION"
F G "MAIN" 0 139 "void()" `718 
F G "chip_init" 0 158 "void()" `708 
C L "chip_init" 0 135 1 "FUNCTION"
C L "chip_init" 0 135 1 "FUNCTION"
F G "nozzle_off" 0 199 "void()" `709 
F G "nozzle_task" 0 205 "void()" `710 
F G "lcd_task" 0 219 "void()" `711 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "port_c_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_pwm1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_pwm2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_pwm3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_pwm4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "setup_cwg" 4 0
F B "cwg_status" 0 0
F B "cwg_restart" 0 0
F B "setup_nco" 2 0
F B "set_nco_accumulator" 1 0
F B "get_nco_accumulator" 0 0
F B "set_nco_inc_value" 1 0
F B "get_nco_inc_value" 0 0
F B "setup_clc1" 1 0
F B "clc1_setup_gate" 2 0
F B "clc1_setup_input" 2 0
F B "setup_clc2" 1 0
F B "clc2_setup_gate" 2 0
F B "clc2_setup_input" 2 0
F B "setup_clc3" 1 0
F B "clc3_setup_gate" 2 0
F B "clc3_setup_input" 2 0
F B "setup_clc4" 1 0
F B "clc4_setup_gate" 2 0
F B "clc4_setup_input" 2 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
