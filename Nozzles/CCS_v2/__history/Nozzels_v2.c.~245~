#include <16F1508.H> 
#fuses INTRC_IO, NOWDT, NOPROTECT, BROWNOUT, PUT, NOLVP 
#use delay(clock = 16MHZ)
#USE TIMER (TIMER=1, TICK=100us, BITS=16, NOISR)

//TRANZISTORS ASSIGNEMT
#define T1              PIN_C7
#define T2              PIN_B7
#define T_ON(x)         output_high(x)
#define T_OFF(x)        output_low(x)
//LED ASSIGNEMT
#define RED_LED         PIN_C4 
#define GREEN_LED       PIN_C3
#define LED_ON(x)       output_low(x)
#define LED_OFF(x)      output_high(x)
//BUTT ASSIGNEMT
#define UP_BUTT         input(PIN_A5)
#define DOWN_BUTT       input(PIN_A4)
#define BUTT_PRESSED(x) (!(x))   
//Limits assignment
#define MAX_RPM         8000
#define MIN_RPM         800
#define RPM_STEP        100
//LCD ASSIGNEMT
#define LCD_EXTENDED_NEWLINE
#define LCD_ENABLE_PIN  PIN_C2                               
#define LCD_RS_PIN      PIN_C0                                 
#define LCD_RW_PIN      PIN_C1                                    
#define LCD_DATA4       PIN_B4
#define LCD_DATA5       PIN_B5                                   
#define LCD_DATA6       PIN_B6                              
#define LCD_DATA7       PIN_A2 
#include  <lcd.c>

unsigned long int rpm =800;
unsigned long int time_off;
unsigned long int time_on;
enum lcd_message {LOGO = 1, MAX_RPM_REACHED, MIN_RPM_REACHED, PRINT_RPM} message = LOGO;
const char logo_str[] = "Hello Riko...";

void chip_init(void);
void nozzle_off(void);
void disable_ints(void);
void lcd_task(void);

#INT_RA
void int_handler(void)
{
   if (butt_pressed(UP_BUTT))
   {
      if (rpm < 7000)
      {
         rpm += 100;
         message = PRINT_RPM;
      }
      else
      {
         message = MAX_RPM_REACHED;
      }
   }
   if (butt_pressed(DOWN_BUTT))
   {
      if (rpm > 800)
      {
         rpm -= 100;
         message = PRINT_RPM;
      }
      else
      {
         message = MIN_RPM_REACHED;
      }
   }
clear_interrupt(INT_RA5_H2L);
clear_interrupt(INT_RA4_H2L);
}

//interrupt shall be cleared befor enableing 


void main(void)
{
chip_init();
   while (TRUE)
   {
      if (message)
      {
         LED_ON(GREEN_LED);
         lcd_task();
         LED_OFF(GREEN_LED);
      }
      if (rpm > 3000)
      {

      }
      
   }
}

void chip_init(void)
{
   nozzle_off();
   led_off(GREEN_LED);
   led_off(RED_LED);
   SETUP_SPI(SPI_DISABLED);
   setup_comparator(NC_NC_NC_NC);
   setup_vref(VREF_OFF);
   SETUP_DAC(DAC_OFF);
   setup_cwg(0,0,0,0);                 //CWG - Disabled
   setup_nco(0,0);                     //NCO - Disabled
   SETUP_ADC(ADC_OFF);
   setup_adc_ports(NO_ANALOGS);
   set_tris_a(0x03<<4);
   ENABLE_INTERRUPTS(INT_RA5_H2L);
   ENABLE_INTERRUPTS(INT_RA4_H2L);
   ENABLE_INTERRUPTS(GLOBAL);
   lcd_init();
   delay_ms(500);
   set_ticks(0);
}

void nozzle_off(void)
{
   T_OFF(T1);   
   T_OFF(T2); 
}


void disable_ints(void)
{
   disable_interrupts(INT_RA5_H2L);
   disable_interrupts(INT_RA4_H2L);   
}


void lcd_task(void)
{
nozzle_off();
   switch (message)
   {
      case PRINT_RPM: 
         printf (lcd_putc,"\fRPM=%lu", time_on);
         
         break;
      case MAX_RPM_REACHED:
         printf (lcd_putc,"\fMax rpm reached");
         break;
      case MIN_RPM_REACHED:
         printf (lcd_putc,"\fMin rpm reached");
         break;
      case LOGO:
         printf (lcd_putc,"\f%s", logo_str);
         break;
       default: ;
   }
   message = 0;
}


