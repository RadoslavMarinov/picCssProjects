#ifndef _NRF24L01_H_
#define _NRF24L01_H_

typedef unsigned char   uint8_t;
typedef signed char     int8_t;

#define CS     PIN_C3
#define CE     PIN_C4
#define LED    PIN_A5

#define DUMMY_BYTE 0x00

#define W_REGISTER_COMMAND    (1 << 5)

//Configuration register macros
//ADDRESS 0x00
#define MASK_RX_DR   (1 << 6)    //Disablses Data Received interrupt
#define MASK_TX_DS   (1 << 5)    //Disables Data Sent interrupt
#define MASK_MAX_RT  (1 << 4)    //If the number of retransmited packet reach its maximum interrupt will NOT be asserted
#define EN_CRC       (1 << 3)    //Ebable CRC. Note that at least one bit of register EN_AA must be set to have efect
#define CRCO         (1 << 2)    //Two bytes encoding scheme. If this bit is 0 then one bit encoding scheme is applied
#define PWR_UP       (1 << 1)    //POWER_UP mode. NOTE after this bit is set 1.5secs delay must be applied.
#define PRIM_RX            1     //1: PRX, 0: PTX

//Enable 'Auto Acknowledgment' for different pipes
//ADDRESS 0x01
#define ENAA_P5      (1 << 5)    //Enable auto acknowledgement data pipe 5
#define ENAA_P4      (1 << 4)    //Enable auto acknowledgement data pipe 4
#define ENAA_P3      (1 << 3)    //Enable auto acknowledgement data pipe 3
#define ENAA_P2      (1 << 2)    //Enable auto acknowledgement data pipe 2
#define ENAA_P1      (1 << 1)    //Enable auto acknowledgement data pipe 1
#define ENAA_P0            1     //Enable auto acknowledgement data pipe 0

//EN_RXADDR - Enabled RX Addresses, The data pipes are enabled with the bits in the EN_RXADDR register.
//ADDRESS 0x02
#define ERX_P5       (1 << 5)    //Enable data pipe 5.
#define ERX_P4       (1 << 4)    //Enable data pipe 4.
#define ERX_P3       (1 << 3)    //Enable data pipe 3.
#define ERX_P2       (1 << 2)    //Enable data pipe 2.
#define ERX_P1       (1 << 1)    //Enable data pipe 1.
#define ERX_P0             1     //Enable data pipe 0.

//SETUP_AW  RX/TX Address field width
//ADDRESS 0x03
#define AW_3     1      //Address is 3 bytes long
#define AW_4     2      //Address is 4 bytes long
#define AW_5     2      //Address is 5 bytes long

//SETUP_RETR Setup of Automatic Retransmission delay
//ADDRESS 0x04
#define ARD_250US          0     //Auto Retransmit Delay 250uS
#define ARD_500US    (1 << 4)    //Auto Retransmit Delay 500uS
#define ARD_750US    (2 << 4)
#define ARD_1000US   (3 << 4)
#define ARD_1250US   (4 << 4)
#define ARD_1500US   (5 << 4)
#define ARD_1750US   (6 << 4)
#define ARD_2000US   (7 << 4)
#define ARD_2250US   (8 << 4)
#define ARD_2500US   (9 << 4)
#define ARD_2750US   (10 << 4)
#define ARD_3000US   (11 << 4)
#define ARD_3250US   (12 << 4)
#define ARD_3500US   (13 << 4)
#define ARD_3750US   (14 << 4)
#define ARD_4000US   (15 << 4)      ////Auto Retransmit Delay 4000uS
//Auto Retransmit Count
#define ARC_1     1        //Retransmit packet once
#define ARC_2     2        //Retransmit packet twice
#define ARC_3     3
#define ARC_4     4
#define ARC_5     5
#define ARC_6     6
#define ARC_7     7
#define ARC_8     8
#define ARC_9     9
#define ARC_10    10
#define ARC_11    11
#define ARC_12    12
#define ARC_13    13
#define ARC_14    14
#define ARC_15    15    //Retransmit packet 15 times

//RF_CH RF Channel frequecy
//0x05
//Sets the frequency channel nRF24L01 operateson. Both receiver and transmiter must have same settings for RF_CH
//Bits 0-6 determines the freqency in MHz - F0= 2400 + RF_CH [MHz]

//RF_SETUP RF setup register
//ADDRESS 0x06
#define RF_DR_LOW    (1 << 5)    //Set RF Data Rate to 250kbps
#define RF_DR_HIGH   (1 << 3)    //1: air data rate - 2Mbps. 0: air data rate - 1Mbps
#define RF_PWR_18          0     //Set RF output power in TX mode -18dBm
#define RF_PWR_12    (1 << 1)    //Set RF output power in TX mode -12dBm
#define RF_PWR_6     (2 << 1)    //Set RF output power in TX mode -6dBm
#define RF_PWR_0     (3 << 1)    //Set RF output power in TX mode 0dBm

//STATUS REGISTER
//ADDRESS 0x07
#define   RX_DR        (1 << 6)
#define   TX_DS        (1 << 5)
#define   MAX_RT       (1 << 4)
#define   RX_P_N0      //if(STATUS_REG & (7 << 1) == 0){data_in_payload_belongs_to_data_pipe0}
#define   RX_P_N1      (1 << 1)   //Data into the payload belongs to data pipe1
#define   RX_P_N2      (2 << 1)   //Data into the payload belongs to data pipe2      
#define   RX_P_N3      (3 << 1)
#define   RX_P_N4      (4 << 1)
#define   RX_P_N5      (5 << 1)
#define   FIFIO_IS_EMPTY   (7 << 1)
#define   TX_FULL      1

//RPD Received Power Detector
//ADDRESS 0x09
#define   RPD    1   //1 - Input Power > -64dBm. 0 - otherwise

//FIFO STATUS
//ADDRESS 0x17
#define TX_REUSE     (1 << 6)   //??
#define TX_FULL      (1 << 5)   //1 - TX FIFO is full. 0 - Available space in TX FIFO
#define TX_EMPTY     (1 << 4)   //1 - TX FIFO is empty
#define RX_FULL      (1 << 1)
#define RX_EMPTY           1

//DYNPD   - Enable dynamic payload length 
//ADDRESS   0x1C
#define   DPL_P5      (1 << 5)   //Enable dynamic payload for data pipe 5
#define   DPL_P4      (1 << 4)   //Enable dynamic payload for data pipe 4
#define   DPL_P3      (1 << 3)   //Enable dynamic payload for data pipe 3
#define   DPL_P2      (1 << 2)   //Enable dynamic payload for data pipe 2
#define   DPL_P1      (1 << 1)   //Enable dynamic payload for data pipe 1
#define   DPL_P0           1      //Enable dynamic payload for data pipe 0   

//FEATURE - Feature Register
//ADDRESS   0x1D
#define      EN_DPL          (1 << 2)   //Enables dynamic payload length
#define      EN_ACK_PAY      (1 << 1)   //Enable payload with acknowledge
#define      EN_DYN_ACK            1      //Enables the W_TX_PAYLOAD_NO_ACK command 




#endif
